{
  "title": "编程是个细活儿,算法是个脑力活",
  "cells": [
    {
      "type": "text",
      "data": "<div class=\"current_nav\" style=\"margin: 0px; padding: 0px 0px 15px; border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: rgb(77, 166, 255); font-size: 14px; color: rgb(136, 136, 136); font-family: &quot;Microsoft Yahei&quot;;\"><br></div><div style=\"margin: 0px; padding: 10px 0px; color: rgb(39, 42, 48); font-family: &quot;Microsoft Yahei&quot;; font-size: 12px; text-align: center;\"></div><div class=\"post_content\" id=\"paragraph\" style=\"margin: 0px; padding: 0px; color: rgb(39, 42, 48); font-family: &quot;Microsoft Yahei&quot;; font-size: 12px;\"><h4 style=\"margin: 0px; padding: 0px; font-weight: normal;\">引记<br></h4><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">本文读者主要针对于那些对算法感兴趣的在校生或即将毕业参加工作的朋友。在我个人建的一些算法群里，常有朋友问：算法怎么学？其实，我更愿意看到的问题是：如何学编程。因为算法只是服务于编程的一个工具而已，当编程功底扎牢之后，方可去考虑如何学算法了。不好好思考如何编程，而一味的去考虑如何学算法，将是一种舍本逐末的举动。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">OK，下文中，言辞有任何不妥之处，还望诸君海涵（非技术文字的确不好写）。有任何问题，也欢迎随时交流或批评指正。谢谢。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><strong>编程是个细活儿</strong></p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">编程是个细活儿，是个经验活，非一朝一夕所能炼成，不得有半点马虎，半点浮躁，半点急功近利；算法是个脑力活，只要你肯动脑，爱思考，适合那些小学参加奥数，大学参加ACM的朋友们，或者多看看书，对付简单问题的解决或工作便可以了。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">而这还只是限于理解和学习现成已有的经典算法阶段，至于灵活运用及与工程实践结合，或者再创造，以及研究运用一些诸如机器学习，人工智能，数据挖掘等领域的复杂算法则亦断非朝夕之功。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">然大部分朋友将来的工作中往往用不到多高深多复杂的算法（除非你的工作跟上述提到的机器学习，数据挖掘等有关），只要你在编码时稍微考虑下效率便就可以了。编程是个细活儿，非手细腻不可。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">高水平的软件工程师队伍+极致的产品文化+效率造就了Facebook。高水平的软件工程师队伍从何而来？Facebook面试常专门问编程题目，考察对编程的熟练程度，是否能没有任何障碍地把想法写成代码，因为对软件工程师而言，编程就是生产力。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">常有人说，十年学会编程，一点也不夸张。编程基础是根基，在根基没有彻底扎牢之前，读者朋友们切忌跟风去学算法，根基不牢，再光鲜靓丽的建筑物，一遇风吹草动，都会轰然倒塌。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">敬告想学算法的读者朋友们：请在学会了编程后（什么叫做学会？没有标准，不过可参考此Facebook招人的标准：是否能没有任何障碍地把想法写成代码），或者编程能力达到一定提高后，再学算法。</p><h4 style=\"margin: 0px; padding: 0px; font-weight: normal;\">算法是个脑力活<br></h4><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">若编程功底真正彻底打牢了后，要学算法，那算法复杂么，难学么？诸君当中有很多人是由于要进大公司准备面试而学的算法，那么面试考察的算法难么？如果你将来的工作与算法并无多大关联，你还愿意去学算法么？OK，举两个极其简单的例子：</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><strong>1、杨氏矩阵查找</strong></p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">先看一个来自剑指offer一书的编程（面试）题：</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">例如下面的二维数组就是每行、每列都递增排序。如果在这个数组中查找数字6，则返回true；如果查找数字5，由于数组不含有该数字，则返回false。</p><blockquote style=\"padding-right: 0px; padding-left: 0px;\"><blockquote style=\"padding-right: 0px; padding-left: 0px;\"><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><a href=\"http://image.codeweblog.com/upload/7/ab/7abcbefb63e4193e.gif\" class=\"lightbox\" style=\"color: rgb(77, 166, 255); outline: none medium;\"><img src=\"quiver-image-url/03A668FA96B6EF6EFD32267DA287CEF5.png\" alt=\"编程是个细活儿,算法是个脑力活\" title=\"编程是个细活儿,算法是个脑力活\" style=\"border: 0px none; vertical-align: bottom; max-width: 628px; margin: 0px auto; display: block;\" width=\"236\" height=\"170\"></a><br></p></blockquote></blockquote><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">前面说了，学算法就是多思考，下面，解法有二（如查找数字6）：</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">1、分治法，分为四个矩形，配以二分查找，如果要找的数是6介于对角线上相邻的两个数4、10，可以排除掉左上和右下的两个矩形，而递归在左下和右上的两个矩形继续找，如下图所示：</p><blockquote style=\"padding-right: 0px; padding-left: 0px;\"><blockquote style=\"padding-right: 0px; padding-left: 0px;\"><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><a href=\"http://image.codeweblog.com/upload/e/2e/e2e74a20d355b9b0.gif\" class=\"lightbox\" style=\"color: rgb(77, 166, 255); outline: none medium;\"><img src=\"quiver-image-url/4B44A41077D976595792B1C2A6AE5411.png\" alt=\"编程是个细活儿,算法是个脑力活\" title=\"编程是个细活儿,算法是个脑力活\" style=\"border: 0px none; vertical-align: bottom; max-width: 628px; margin: 0px auto; display: block;\" width=\"177\" height=\"128\"></a><br></p></blockquote></blockquote><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">2、首先直接定位到最右上角的元素，再配以二分查找，比要找的数（6）大就往左走，比要找数（6）的小就往下走，直到找到要找的数字（6）为止，如下图所示：</p><blockquote style=\"padding-right: 0px; padding-left: 0px;\"><blockquote style=\"padding-right: 0px; padding-left: 0px;\"><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><a href=\"http://image.codeweblog.com/upload/3/4f/34f3574acb0fedda.gif\" class=\"lightbox\" style=\"color: rgb(77, 166, 255); outline: none medium;\"><img src=\"quiver-image-url/5413ABBD7EDD2E58D1473919DC1960FD.png\" alt=\"编程是个细活儿,算法是个脑力活\" title=\"编程是个细活儿,算法是个脑力活\" style=\"border: 0px none; vertical-align: bottom; max-width: 628px; margin: 0px auto; display: block;\" width=\"177\" height=\"128\"></a><br></p></blockquote></blockquote><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">试问，上述算法复杂么？不复杂，只要稍微懂点脑筋，或许没有任何编程经验的初、高中生也能想到（何海涛先生一书剑指offer中收集了此题，感兴趣的朋友也可以去看看）。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><strong>2、从倒排索引文件中提取关键词</strong></p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">再看一个可能实际工作中会遇的从索引中提取关键词的问题，我会摒弃其中复杂的原理与步骤，尽量用最简单易懂的语言阐述：</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">我们知道，搜索引擎的关键步骤就是建立倒排索引，所谓倒排索引一般表示为一个关键词，然后是它的频度（出现的次数），位置（出现在哪一篇文章或网页中，及有关的日期，作者等信息），它相当于为互联网上几千亿页网页做了一个索引，好比一本书的目录、标签一般。读者想看哪一个主题相关的章节，直接根据目录即可找到相关的页面。不必再从书的第一页到最后一页，一页一页的查找。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">搜索引擎的原理也是如此。用户要查找某个query，如在搜索框输入某个关键词：“结构之法”后，搜索引擎不会再次使用爬虫又一个一个去抓取每一个网页，从上到下扫描网页，看这个网页有没有出现这个关键词，而是会在它预先生成的倒排索引文件中查找和匹配包含这个关键词“结构之法”的所有网页。找到了之后，再按相关性度排序，最终把排序后的结果显示给用户。</p><blockquote style=\"padding-right: 0px; padding-left: 0px;\"><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><a href=\"http://image.codeweblog.com/upload/8/98/8984787b49955eaf.gif\" class=\"lightbox\" style=\"color: rgb(77, 166, 255); outline: none medium;\"><img src=\"quiver-image-url/083342862D2976EDF62B00A0567AF482.gif\" alt=\"编程是个细活儿,算法是个脑力活\" title=\"编程是个细活儿,算法是个脑力活\" style=\"border: 0px none; vertical-align: bottom; max-width: 628px; margin: 0px auto; display: block;\" width=\"500\" height=\"188\"></a><br></p></blockquote><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">如下，既是一个倒排索引文件（不全），粗体部分表示的是某个关键词，及这个关键词的出现次数。我现在要你从这个大索引文件中提取出这些关键词，--Firelf--，-Winter-，007，007：天降杀机，02Chan..如何做到呢？一行一行的扫描整个索引文件么？当然不是，请读者自行思考。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">提示一下：通过查找#####便可判断某一行出现的词是不是关键词，但如果这样做的话，便要扫描整个索引文件的每一行，代价实在巨大。如何提高速度呢？对了，关键词后面的那个出现次数为我们问题的解决起到了很好的作用，因为...（再说下去，答案便出来了）。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\"><strong>--Firelf--（关键词） 8（出现次数）</strong><br>20111116 2 TO011111600004603 240 O0 240 e2f6dc51c6f5231770cfd1ee8eaec376 85358 1#####TO011111600004604 240 O0 240 219e546753ab8de6e6bd6abbfbcad176 84539 1#####<br>20111115 5 TO011111500008241 240 O0 240 36c7627ea4eb9e6b31af9217435b55da 131221 1#####TO011111500007324 240 O0 240 201565a65f92bf1c33c69606f074c974 113059 1#####TO011111500005758 240 O0 240 d3bb710c0af1e29fdc7661ccc9623b68 103437 1#####TO011111500005756 240 O0 240 849aaa451ed929d50a7cd197ff42c7f0 103436 1#####TO011111500003426 240 O0 240 c67809f02d310b8fca23ec0dd27fd211 83039 1#####<br>20111114 1 TO011111400004894 240 O0 240 6d6a715558a5e67b815724af6050bbc1 123028 1#####<br>20111112 1 TO011111200001071 240 O0 240 f11bbb2063fac37b08a87175f80c1e47 84124 1#####<br>20111111 5 TO011111100003099 240 O0 240 cd2a41c4011cfec6aa237ed8f74234a6 94256 1#####TO011111100003741 240 O0 240 ad265e9273dde022ae7cc636b3adfd72 94032 1#####TO011111100002535 240 O0 240 710c92f6d1dc3392b1179b6b129700a4 90851 1#####TO011111100002473 240 O0 240 487d3280bf014d99b56c3cedd11223ff 84518 1#####TO011111100002086 240 O0 240 4363b608e19c08fca26c8c4252355a77 83051 1#####<br>20111110 9 TO011111000011295 0 O0 240 99778567b5c10ace0097195e0534c49b 160408 1#####TO011111000010700 240 O0 240 23037e2c9b694ae6fcd1d9b37cf8fa92 155151 1#####TO011111000010701 240 O0 240 9116d2386b06a79b61324d777e4ba4a6 155151 1#####TO011111000010699 0 O0 240 4042d3edb3f012ca289b42990e1163bb 153013 1#####TO011111000008210 240 O0 240 5fd4f3b03663f758ad8c362b056980fe 141723 1#####TO011111000008209 240 O0 240 482fa3d893ded7d734d4697a5944184c 141722 1#####TO011111000008203 0 O0 240 cbf0a7880b037c4f66e17b603bbeb4c9 140007 1#####TO011111000006911 0 O0 240 a812bb7faea6fb36936ecdb20839e43c 113028 1#####TO011111000005182 0 O0 240 0c01b893d8b636c4addd05443b8d9b3f 104029 1#####<br>20111102 4 TO011110200007030 48 O0 240 c84be7f5dc7d58aacd6923a87cd33e20 140003 1#####TO011110200003672 48 O0 240 4776396a57e0347c9c8cb6bc4cec3111 100008 1#####TO011110200000823 48 O0 240 bbbae264a8ea1c9c1405a267d64cdddd 93031 1#####TO011110200000827 48 O0 240 a7aab6523280ef652c8bc1d143c44858 80021 1#####<br>20111101 2 TO011110100010412 48 O0 240 f0ed2f08235b2dcd77cc7a20e45ebd1b 163759 1#####TO011110100010411 48 O0 240 e6c572ecb9ca300f0f69cbb8fd388a12 163758 1#####<br><strong>-11（关键词） 1（出现次数）</strong><br>20111115 3 PU011111500017163 156 U0 156 e9cc79096791d0325457ada45479c574 204455 1#####PU011111500017162 156 U0 156 e9cc79096791d0325457ada45479c574 204454 1#####PU011111500017161 156 U0 156 e9cc79096791d0325457ada45479c574 204452 1#####<br><strong>-Winter-（关键词） 1（出现次数）</strong><br>20111109 2 PU011110900013663 120 U0 156 6be088cc820436aa637f5be6cfee0309 205723 1#####PU011110900008419 120 U0 156 6be088cc820436aa637f5be6cfee0309 122538 1#####<strong><br>007（关键词） 1（出现次数）</strong><br>20111127 1 TB111112700002087 369 B1 172 809439b6900122369318fa3ae1e43e78 43100 1#####<br><strong>007：天降杀机（关键词） 2（出现次数）</strong><br>20111127 1 TB111112700000280 389 B1 2 724c5d3cca8e46a2a2a25d9a81fe5268 91342 1#####<br>20111126 1 TB111112600006933 282 B1 282 0384aaa4a0900912a845f1bc5c905e89 142910 1#####<br><strong>.......</strong></p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">而后，你自会发现，大部分的工作中（除去诸如机器学习，人工智能，数据挖掘等领域）要用到的算法其实很简单，没你想的那般复杂。学算法，无它，多思考而已。</p><h4 style=\"margin: 0px; padding: 0px; font-weight: normal;\">后记<br></h4><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">编程是个动手活，是个细活儿，算法是个脑力活。编程就像大军打仗中那一个个冲在最前面的小兵，而算法则是调度官，是将领，指点江山，但若没有那样一群小兵，则再强大的调度官也无法征服任何一座山峰，更不用说奔腾至最高最远处。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">学编程，无它，多动手耳，熟能生巧，精工出细活；学算法，无它，多动脑耳。然<strong>算法基于编程的基础之上</strong>，想学算法，不如先修炼如何编程。因为，别忘了，算法是为编程服务的，最终一切都是为了更好地写代码实现而已。</p><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">结束全文之前，请允许我再次引用下自个微博上（@v_JULY_v，<a href=\"http://weibo.com/julyweibo\" rel=\"external nofollow noreferrer\" style=\"color: rgb(77, 166, 255); outline: none medium;\">http://weibo.com/julyweibo</a>）的两段话：</p><ol style=\"margin: 0px; padding: 0px; list-style: none outside none;\"><li style=\"margin: 0px; padding: 0px; line-height: 17px;\">若真要学算法，那么也当循序渐进：语言-&gt;数据结构-&gt;算法。语言是基础，够啃一辈子，基本的常见的数据结构得了如指掌，最后才是算法。除了算法之外，有更多更重要且更值得学习的东西（最重要的是，学习如何编程）。切勿盲目跟风，找准自己的兴趣点，和领域才是关键。这跟选择职位、与领域并持久做下去，比选择公司更重要一样。选择学什么东西不重要，重要的是你的兴趣。</li><li style=\"margin: 0px; padding: 0px; line-height: 17px;\">修订六（三续）、KMP算法之总结篇（必懂KMP）这篇文章之时，个人接触KMP都有一年了，学算法也刚好快一年。想想阿，我弄一个KMP，弄了近一年了，到今天才算是真正彻底理解其思想，可想而知，当初创造这个算法的k、m、p三人是何等不易。我想，有不少读者是因为我的出现而想学算法的，但不可急功近利（单啃一个经典算法便已至此了，则更加佐证了上文开头所说的“至于灵活运用及与工程实践结合，或者再创造，以及研究运用一些诸如机器学习，人工智能，数据挖掘等研究领域的复杂算法则亦断非朝夕之功”），切勿妄想算法速成。学习，先修心。</li></ol><p style=\"margin: 0px; padding: 10px 0px; font-size: 14px; line-height: 22px; word-wrap: break-word;\">完。</p></div>"
    }
  ]
}
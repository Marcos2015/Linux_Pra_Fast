{
  "title": "C语言字节对齐问题–详细讲解",
  "cells": [
    {
      "type": "text",
      "data": "<embed id=\"xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd\" type=\"application/thunder_download_plugin\" height=\"0\" width=\"0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong style=\"color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px; box-sizing: border-box;\">一、概念</strong><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">　　<br style=\"box-sizing: border-box;\">　　 对齐跟数据在内存中的位置有关。如果一个变量的内存地址正好位于它长度的整数倍，他就被称做自然对齐。比如在32位cpu下，假设一个整型变量的地址为0x00000004，那它就是自然对齐的。<br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　<strong style=\"box-sizing: border-box;\">二、为什么要字节对齐</strong><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　 　 需要字节对齐的根本原因在于CPU访问数据的效率问题。假设上面整型变量的地址不是自然对齐，比如为0x00000002，则CPU如果取它的值的话需要 访问两次内存，第一次取从0x00000002-0x00000003的一个short，第二次取从0x00000004-0x00000005的一个 short然后组合得到所要的数据，如果变量在0x00000003地址上的话则要访问三次内存，第一次为char，第二次为short，第三次为 char，然后组合得到整型数据。而如果变量在自然对齐位置上，则只要一次就可以取出数据。一些系统对对齐要求非常严格，比如sparc系统，如果取未对 齐的数据会发生错误，举个例：<br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　char ch[8];<br style=\"box-sizing: border-box;\">　　char *p = &amp;ch[1];<br style=\"box-sizing: border-box;\">　　int i = *(int *)p;<br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　运行时会报segment error，而在x86上就不会出现错误，只是效率下降。<br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　<strong style=\"box-sizing: border-box;\">三、正确处理字节对齐</strong><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　 对于标准数据类型，它的地址只要是它的长度的整数倍就行了，而非标准数据类型按下面的原则对齐：<br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　数组 ：按照基本数据类型对齐，第一个对齐了后面的自然也就对齐了。<br style=\"box-sizing: border-box;\">　　联合 ：按其包含的长度最大的数据类型对齐。<br style=\"box-sizing: border-box;\">　　结构体： 结构体中每个数据类型都要对齐。<br style=\"box-sizing: border-box;\">　　比如有如下一个结构体：</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; padding: 10px 20px; font-family: 'courier new'; font-size: 12px; color: rgb(248, 248, 212); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 20px; margin-bottom: 20px; line-height: 20px; word-break: break-all; background-color: rgb(74, 74, 74); border: none; overflow: auto;\"><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> stu</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> sex</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> length</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> name</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">[</span><span class=\"lit\" style=\"box-sizing: border-box; color: rgb(25, 95, 145);\">10</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">];</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">};</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> stu my_stu</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span></pre><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">　　由于在x86下，GCC默认按4字节对齐，它会在sex后面跟name后面分别填充三个和两个字节使length和整个结构体对齐。于是我们sizeof(my_stu)会得到长度为20，而不是15.<br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　<strong style=\"box-sizing: border-box;\">四、__attribute__选项</strong><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　我们可以按照自己设定的对齐大小来编译程序，GNU使用__attribute__选项来设置，比如我们想让刚才的结构按一字节对齐，我们可以这样定义结构体.　　</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; padding: 10px 20px; font-family: 'courier new'; font-size: 12px; color: rgb(248, 248, 212); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 20px; margin-bottom: 20px; line-height: 20px; word-break: break-all; background-color: rgb(74, 74, 74); border: none; overflow: auto;\"><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> stu</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> sex</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> length</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> name</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">[</span><span class=\"lit\" style=\"box-sizing: border-box; color: rgb(25, 95, 145);\">10</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">];</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">}</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">__attribute__ </span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">((</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">aligned </span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"lit\" style=\"box-sizing: border-box; color: rgb(25, 95, 145);\">1</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">)));</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> stu my_stu</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">则</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">sizeof</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">my_stu</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">)可以得到大小为</span><span class=\"lit\" style=\"box-sizing: border-box; color: rgb(25, 95, 145);\">15</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">。</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">上面的定义等同于</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> stu</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> sex</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> length</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　 </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> name</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">[</span><span class=\"lit\" style=\"box-sizing: border-box; color: rgb(25, 95, 145);\">10</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">];</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">}</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">__attribute__ </span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">((</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">packed</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">));</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">　　</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> stu my_stu</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></pre><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">　　__attribute__((packed))得变量或者结构体成员使用最小的对齐方式，即对变量是一字节对齐，对域（field）是位对齐.<br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　<strong style=\"box-sizing: border-box;\">五、什么时候需要设置对齐</strong><br style=\"box-sizing: border-box;\">　　<br style=\"box-sizing: border-box;\">　　 在设计不同CPU下的通信协议时，或者编写硬件驱动程序时寄存器的结构这两个地方都需要按一字节对齐。即使看起来本来就自然对齐的也要使其对齐，以免不同的编译器生成的代码不一样.</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">&nbsp;</p><blockquote style=\"box-sizing: border-box; padding: 10px 30px 5px; margin: 15px auto; border: 2px dashed rgb(153, 190, 224); font-size: 15px; line-height: 25px; background-color: rgb(251, 251, 251); color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><p style=\"box-sizing: border-box; margin: 0px 0px 5px; font-size: 16px; line-height: 20px; padding: 0px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">一、快速理解</span></p></blockquote><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><strong style=\"box-sizing: border-box;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">1. 什么是字节对齐？</span></strong></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">在 C语言中，结构是一种复合数据类型，其构成元素既可以是基本数据类型（如int、long、float等）的变量，也可以是一些复合数据类型（如数组、结 构、联合等）的数据单元。在结构中，编译器为结构的每个成员按其自然边界（alignment）分配空间。各个成员按照它们被声明的顺序在内存中顺序存 储，第一个成员的地址和整个结构的地址相同。</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">为了使CPU能够对变量进行快速的访问,变量的起始地址应该具有某些特性,即所谓的”对齐”. 比如4字节的int型,其起始地址应该位于4字节的边界上,即起始地址能够被4整除.</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><strong style=\"box-sizing: border-box;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">2. 字节对齐有什么作用？</span></strong></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">字节对齐的作用不仅是便于cpu快速访问，同时合理的利用字节对齐可以有效地节省存储空间。</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">对 于32位机来说，4字节对齐能够使cpu访问速度提高，比如说一个long类型的变量，如果跨越了4字节边界存储，那么cpu要读取两次，这样效率就低 了。但是在32位机中使用1字节或者2字节对齐，反而会使变量访问速度降低。所以这要考虑处理器类型，另外还得考虑编译器的类型。在vc中默认是4字节对 齐的，GNU gcc 也是默认4字节对齐。</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\"><strong style=\"box-sizing: border-box;\">3. 更改C编译器的缺省字节对齐方式</strong></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">在缺省情况下，C编译器为每一个变量或是数据单元按其自然对界条件分配空间。一般地，可以通过下面的方法来改变缺省的对界条件：<br style=\"box-sizing: border-box;\">· 使用伪指令#pragma pack (n)，C编译器将按照n个字节对齐。<br style=\"box-sizing: border-box;\">· 使用伪指令#pragma pack ()，取消自定义字节对齐方式。</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">另外，还有如下的一种方式：<br style=\"box-sizing: border-box;\">· __attribute((aligned (n)))，让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。<br style=\"box-sizing: border-box;\">· __attribute__ ((packed))，取消结构在编译过程中的优化对齐，按照实际占用字节数进行对齐。</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">4. 举例说明</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">例1</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">struct test<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">char x1;<br style=\"box-sizing: border-box;\">short x2;<br style=\"box-sizing: border-box;\">float x3;<br style=\"box-sizing: border-box;\">char x4;<br style=\"box-sizing: border-box;\">};</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">由于编译器默认情况下会对这个struct作自然边界（有人说“自然对界”我觉得边界更顺口）对齐，<span style=\"box-sizing: border-box; color: rgb(255, 102, 102);\">结 构的第一个成员x1，其偏移地址为0，占据了第1个字节。第二个成员x2为short类型，其起始地址必须2字节对界，因此，编译器在x2和x1之间填充 了一个空字节。结构的第三个成员x3和第四个成员x4恰好落在其自然边界地址上，在它们前面不需要额外的填充字节。在test结构中，成员x3要求4字节 对界，是该结构所有成员中要求的最大边界单元，因而test结构的自然对界条件为4字节，编译器在成员x4后面填充了3个空字节。整个结构所占据空间为 12字节。</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">例2</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">#pragma pack(1) //让编译器对这个结构作1字节对齐<br style=\"box-sizing: border-box;\">struct test<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">char x1;<br style=\"box-sizing: border-box;\">short x2;<br style=\"box-sizing: border-box;\">float x3;<br style=\"box-sizing: border-box;\">char x4;<br style=\"box-sizing: border-box;\">};<br style=\"box-sizing: border-box;\">#pragma pack() //取消1字节对齐，恢复为默认4字节对齐</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">这时候sizeof(struct test)的值为8。</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">例3</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">#define GNUC_PACKED __attribute__((packed))<br style=\"box-sizing: border-box;\">struct PACKED test<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">char x1;<br style=\"box-sizing: border-box;\">short x2;<br style=\"box-sizing: border-box;\">float x3;<br style=\"box-sizing: border-box;\">char x4;<br style=\"box-sizing: border-box;\">}GNUC_PACKED;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">这时候sizeof(struct test)的值仍为8。</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">二、深入理解</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">什么是字节对齐,为什么要对齐?<br style=\"box-sizing: border-box;\">TragicJun 发表于 2006-9-18 9:41:00 现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对齐的作用和原因：各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误,那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况，但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那 么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数 据。显然在读取效率上下降很多。<br style=\"box-sizing: border-box;\">二.字节对齐对程序的影响:</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 先让我们看几个例子吧(32bit,x86环境,gcc编译器):<br style=\"box-sizing: border-box;\">设结构体如下定义：<br style=\"box-sizing: border-box;\">struct A<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char b;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short c;<br style=\"box-sizing: border-box;\">};<br style=\"box-sizing: border-box;\">struct B<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char b;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short c;<br style=\"box-sizing: border-box;\">};<br style=\"box-sizing: border-box;\">现在已知32位机器上各种数据类型的长度如下:<br style=\"box-sizing: border-box;\">char:1(有符号无符号同)&nbsp;&nbsp;&nbsp;<br style=\"box-sizing: border-box;\">short:2(有符号无符号同)&nbsp;&nbsp;&nbsp;<br style=\"box-sizing: border-box;\">int:4(有符号无符号同)&nbsp;&nbsp;&nbsp;<br style=\"box-sizing: border-box;\">long:4(有符号无符号同)&nbsp;&nbsp;&nbsp;<br style=\"box-sizing: border-box;\">float:4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double:8<br style=\"box-sizing: border-box;\">那么上面两个结构大小如何呢?<br style=\"box-sizing: border-box;\">结果是:<br style=\"box-sizing: border-box;\">sizeof(strcut A)值为8<br style=\"box-sizing: border-box;\">sizeof(struct B)的值却是12</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">结构体A中包含了4字节长度的int一个，1字节长度的char一个和2字节长度的short型数据一个,B也一样;按理说A,B大小应该都是7字节。<br style=\"box-sizing: border-box;\">之所以出现上面的结果是因为编译器要对数据成员在空间上进行对齐。上面是按照编译器的默认设置进行对齐的结果,那么我们是不是可以改变编译器的这种默认对齐设置呢,当然可以.例如:<br style=\"box-sizing: border-box;\">#pragma pack (2) /*指定按2字节对齐*/<br style=\"box-sizing: border-box;\">struct C<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char b;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short c;<br style=\"box-sizing: border-box;\">};<br style=\"box-sizing: border-box;\">#pragma pack () /*取消指定对齐，恢复缺省对齐*/<br style=\"box-sizing: border-box;\">sizeof(struct C)值是8。<br style=\"box-sizing: border-box;\">修改对齐值为1：<br style=\"box-sizing: border-box;\">#pragma pack (1) /*指定按1字节对齐*/<br style=\"box-sizing: border-box;\">struct D<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char b;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short c;<br style=\"box-sizing: border-box;\">};<br style=\"box-sizing: border-box;\">#pragma pack () /*取消指定对齐，恢复缺省对齐*/<br style=\"box-sizing: border-box;\">sizeof(struct D)值为7。<br style=\"box-sizing: border-box;\">后面我们再讲解#pragma pack()的作用.</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">三.编译器是按照什么样的原则进行对齐的?</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 先让我们看四个重要的基本概念：</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\"><br style=\"box-sizing: border-box;\"><span style=\"box-sizing: border-box; font-family: 宋体;\">1.数据类型自身的对齐值：<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于char型数据，其自身对齐值为1，对于short型为2，对于int,float,double类型，其自身对齐值为4，单位字节。<br style=\"box-sizing: border-box;\">2.结构体或者类的自身对齐值：其成员中自身对齐值最大的那个值。<br style=\"box-sizing: border-box;\">3.指定对齐值：#pragma pack (value)时的指定对齐值value。<br style=\"box-sizing: border-box;\">4.数据成员、结构体和类的有效对齐值：自身对齐值和指定对齐值中小的那个值。<br style=\"box-sizing: border-box;\">有 了这些值，我们就可以很方便的来讨论具体数据结构的成员和其自身的对齐方式。有效对齐值N是最终用来决定数据存放地址方式的值，最重要。有效对齐N，就是 表示“对齐在N上”，也就是说该数据的\"存放起始地址%N=0\".而数据结构中的数据变量都是按定义的先后顺序来排放的。第一个数据变量的起始地址就是数 据结构的起始地址。结构体的成员变量要对齐排放，结构体本身也要根据自身的有效对齐值圆整(就是结构体成员变量占用总长度需要是对结构体有效对齐值的整数 倍，结合下面例子理解)。这样就不能理解上面的几个例子的值了。<br style=\"box-sizing: border-box;\">例子分析：<br style=\"box-sizing: border-box;\">分析例子B；<br style=\"box-sizing: border-box;\">struct B<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char b;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short c;<br style=\"box-sizing: border-box;\">};<br style=\"box-sizing: border-box;\">假 设B从地址空间0x0000开始排放。该例子中没有定义指定对齐值，在笔者环境下，该值默认为4。第一个成员变量b的自身对齐值是1，比指定或者默认指定 对齐值4小，所以其有效对齐值为1，所以其存放地址0x0000符合0x0000%1=0.第二个成员变量a，其自身对齐值为4，所以有效对齐值也为4， 所以只能存放在起始地址为0x0004到0x0007这四个连续的字节空间中，复核0x0004%4=0,且紧靠第一个变量。第三个变量c,自身对齐值为 2，所以有效对齐值也是2，可以存放在0x0008到0x0009这两个字节空间中，符合0x0008%2=0。所以从0x0000到0x0009存放的 都是B内容。再看数据结构B的自身对齐值为其变量中最大对齐值(这里是b）所以就是4，所以结构体的有效对齐值也是4。根据结构体圆整的要 求，0x0009到0x0000=10字节，（10＋2）％4＝0。所以0x0000A到0x000B也为结构体B所占用。故B从0x0000到 0x000B共有12个字节,sizeof(struct B)=12;其实如果就这一个就来说它已将满足字节对齐了,因为它的起始地址是0,因此肯定是对齐的,之所以在后面补充2个字节,是因为编译器为了实现结 构数组的存取效率,试想如果我们定义了一个结构B的数组,那么第一个结构起始地址是0没有问题,但是第二个结构呢?按照数组的定义,数组中所有元素都是紧 挨着的,如果我们不把结构的大小补充为4的整数倍,那么下一个结构的起始地址将是0x0000A,这显然不能满足结构的地址对齐了,因此我们要把结构补充 成有效对齐大小的整数倍.其实诸如:对于char型数据，其自身对齐值为1，对于short型为2，对于int,float,double类型，其自身对 齐值为4，这些已有类型的自身对齐值也是基于数组考虑的,只是因为这些类型的长度已知了,所以他们的自身对齐值也就已知了.<br style=\"box-sizing: border-box;\">同理,分析上面例子C：<br style=\"box-sizing: border-box;\">#pragma pack (2) /*指定按2字节对齐*/<br style=\"box-sizing: border-box;\">struct C<br style=\"box-sizing: border-box;\">{<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char b;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short c;<br style=\"box-sizing: border-box;\">};<br style=\"box-sizing: border-box;\">#pragma pack () /*取消指定对齐，恢复缺省对齐*/<br style=\"box-sizing: border-box;\">第 一个变量b的自身对齐值为1，指定对齐值为2，所以，其有效对齐值为1，假设C从0x0000开始，那么b存放在0x0000，符合 0x0000%1=0;第二个变量，自身对齐值为4，指定对齐值为2，所以有效对齐值为2，所以顺序存放在0x0002、0x0003、0x0004、 0x0005四个连续字节中，符合0x0002%2=0。第三个变量c的自身对齐值为2，所以有效对齐值为2，顺序存放<br style=\"box-sizing: border-box;\">在0x0006、 0x0007中，符合0x0006%2=0。所以从0x0000到0x00007共八字节存放的是C的变量。又C的自身对齐值为4，所以C的有效对齐值为 2。又8%2=0,C只占用0x0000到0x0007的八个字节。所以sizeof(struct C)=8.</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">四.如何修改编译器的默认对齐值?</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">1.在VC IDE中，可以这样修改：[Project]|[Settings],c/c++选项卡Category的Code Generation选项的Struct Member Alignment中修改，默认是8字节。<br style=\"box-sizing: border-box;\">2.在编码时，可以这样动态修改：#pragma pack .注意:是pragma而不是progma.</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">五.针对字节对齐,我们在编程中如何考虑?<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果在编程的时候要考虑节约空间的话,那么我们只需要假定结构的首地址是0,然后各个变量按照上面的原则进行排列即可,基本的原则就是把结构中的变量按照 类型大小从小到大声明,尽量减少中间的填补空间.还有一种就是为了以空间换取时间的效率,我们显示的进行填补空间进行对齐,比如:有一种使用空间换时间做 法是显式的插入reserved成员：<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct A{<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char a;<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char reserved[3];//使用空间换时间<br style=\"box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int b;<br style=\"box-sizing: border-box;\">}</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">reserved成员对我们的程序没有什么意义,它只是起到填补空间以达到字节对齐的目的,当然即使不加这个成员通常编译器也会给我们自动填补对齐,我们自己加上它只是起到显式的提醒作用.</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">六.字节对齐可能带来的隐患:</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 代码中关于对齐的隐患，很多是隐式的。比如在强制类型转换的时候。例如：<br style=\"box-sizing: border-box;\">unsigned int i = 0x12345678;<br style=\"box-sizing: border-box;\">unsigned char *p=NULL;<br style=\"box-sizing: border-box;\">unsigned short *p1=NULL;</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">p=&amp;i;<br style=\"box-sizing: border-box;\">*p=0x00;<br style=\"box-sizing: border-box;\">p1=(unsigned short *)(p+1);<br style=\"box-sizing: border-box;\">*p1=0x0000;<br style=\"box-sizing: border-box;\">最后两句代码，从奇数边界去访问unsignedshort型变量，显然不符合对齐的规定。<br style=\"box-sizing: border-box;\">在x86上，类似的操作只会影响效率，但是在MIPS或者sparc上，可能就是一个error,因为它们要求必须字节对齐.</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">七.如何查找与字节对齐方面的问题:</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">如果出现对齐或者赋值问题首先查看<br style=\"box-sizing: border-box;\">1. 编译器的big little端设置<br style=\"box-sizing: border-box;\">2. 看这种体系本身是否支持非对齐访问<br style=\"box-sizing: border-box;\">3. 如果支持看设置了对齐与否,如果没有则看访问时需要加某些特殊的修饰来标志其特殊访问操作</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">举例：</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; padding: 10px 20px; font-family: 'courier new'; font-size: 12px; color: rgb(248, 248, 212); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; margin-top: 20px; margin-bottom: 20px; line-height: 20px; word-break: break-all; background-color: rgb(74, 74, 74); border: none; overflow: auto;\"><span class=\"com\" style=\"box-sizing: border-box; color: rgb(147, 161, 161);\">#include </span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">main</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">()</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> A </span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> a</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> b</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">short</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> c</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">};</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> B </span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> b</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> a</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">short</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> c</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">};</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"></span><span class=\"com\" style=\"box-sizing: border-box; color: rgb(147, 161, 161);\">#pragma pack (2) /*指定按2字节对齐*/</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> C </span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> b</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> a</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">short</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> c</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">};</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"com\" style=\"box-sizing: border-box; color: rgb(147, 161, 161);\">#pragma pack () /*取消指定对齐，恢复缺省对齐*/</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"></span><span class=\"com\" style=\"box-sizing: border-box; color: rgb(147, 161, 161);\">#pragma pack (1) /*指定按1字节对齐*/</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> D </span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">{</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">char</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> b</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> a</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">&nbsp; &nbsp; </span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">short</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> c</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">;</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">};</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"com\" style=\"box-sizing: border-box; color: rgb(147, 161, 161);\">#pragma pack ()/*取消指定对齐，恢复缺省对齐*/</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> s1</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">=</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">sizeof</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> A</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> s2</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">=</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">sizeof</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> B</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> s3</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">=</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">sizeof</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> C</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">int</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> s4</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">=</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">sizeof</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box; color: rgb(249, 38, 89);\">struct</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"> D</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">printf</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"str\" style=\"box-sizing: border-box; color: rgb(230, 219, 116);\">\"%d\\n\"</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">,</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">s1</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">printf</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"str\" style=\"box-sizing: border-box; color: rgb(230, 219, 116);\">\"%d\\n\"</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">,</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">s2</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">printf</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"str\" style=\"box-sizing: border-box; color: rgb(230, 219, 116);\">\"%d\\n\"</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">,</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">s3</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\">printf</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">(</span><span class=\"str\" style=\"box-sizing: border-box; color: rgb(230, 219, 116);\">\"%d\\n\"</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">,</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\">s4</span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">);</span><span class=\"pln\" style=\"box-sizing: border-box; color: rgb(102, 217, 239);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box; color: rgb(248, 248, 242);\">}</span></pre><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">输出：</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">8</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">12</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">8</p><p style=\"box-sizing: border-box; margin: 0px 0px 15px; color: rgb(85, 85, 85); font-family: 'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 15px;\">7</p>"
    }
  ]
}
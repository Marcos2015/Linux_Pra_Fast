{
  "title": "谁说C语言很简单？",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><h2 style=\"margin: 10px 0px 0px; padding: 8px; letter-spacing: -0.05em; font-family: 'Microsoft YaHei', Verdana, 'BitStream vera Sans'; font-size: 20px; border-width: 1px; border-style: solid; border-color: white rgb(204, 204, 204) rgb(204, 204, 204) white; background-color: rgb(238, 238, 238);\"><br></h2><div class=\"info\" style=\"margin: 0px; padding: 5px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(238, 238, 238); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(238, 238, 238);\"><span class=\"date\" style=\"background-image: url(http://coolshell.cn/wp-content/themes/inove/img/icons.gif); padding-left: 22px; height: 16px; line-height: 16px; display: block; margin-right: 15px; float: left; background-position: 0px -48px; background-repeat: no-repeat no-repeat;\">2009年5月19日</span><span class=\"author\" style=\"background-image: url(http://coolshell.cn/wp-content/themes/inove/img/icons.gif); padding-left: 22px; height: 16px; line-height: 16px; display: block; float: left; background-position: 0px 0px; background-repeat: no-repeat no-repeat;\"><a href=\"http://coolshell.cn/articles/author/haoel\" title=\"由 陈皓 发布\" rel=\"author\" style=\"color: rgb(41, 112, 166); text-decoration: none;\">陈皓</a></span><span class=\"addcomment\" style=\"background-image: url(http://coolshell.cn/wp-content/themes/inove/img/icons.gif); padding-left: 22px; height: 16px; line-height: 16px; display: block; margin-left: 15px; float: right; background-position: 0px -112px; background-repeat: no-repeat no-repeat;\"><a href=\"http://coolshell.cn/articles/873.html#respond\" style=\"color: rgb(41, 112, 166); text-decoration: none;\">发表评论</a></span><span class=\"comments\" style=\"background-image: url(http://coolshell.cn/wp-content/themes/inove/img/icons.gif); padding-left: 22px; height: 16px; line-height: 16px; display: block; float: right; background-position: 0px -96px; background-repeat: no-repeat no-repeat;\"><a href=\"http://coolshell.cn/articles/873.html#comments\" style=\"color: rgb(41, 112, 166); text-decoration: none;\">阅读评论</a></span><span class=\"comments\" style=\"background-image: url(http://coolshell.cn/wp-content/themes/inove/img/icons.gif); padding-left: 22px; height: 16px; line-height: 16px; display: block; float: right; background-position: 0px -96px; background-repeat: no-repeat no-repeat;\">17,093 人阅读 &nbsp; &nbsp;</span><div class=\"fixed\" style=\"margin: 0px; padding: 0px; clear: both;\"></div></div><div class=\"content\" style=\"margin: 0px; padding: 8px; overflow: hidden; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(238, 238, 238); border-right-width: 1px; border-right-style: solid; border-right-color: rgb(238, 238, 238); background-color: white; line-height: 22px;\"><p class=\"li-enumerate\" style=\"margin: 0px 0px 10px; padding: 0px; color: rgb(85, 85, 85); font-family: Arial, Verdana, 'BitStream vera Sans', Tahoma, Helvetica, sans-serif;\">前两天，Neo写了一篇《<a href=\"http://coolshell.cn/articles/830.html\" style=\"color: rgb(41, 112, 166); text-decoration: none;\">语言的歧义</a>》其使用C语言讨论了一些语言的歧义。大家应该也顺便了解了一下C语言中的很多不可思异的东西，可能也是你从未注意到的东西。</p><p class=\"li-enumerate\" style=\"margin: 0px 0px 10px; padding: 0px; color: rgb(85, 85, 85); font-family: Arial, Verdana, 'BitStream vera Sans', Tahoma, Helvetica, sans-serif;\">是的，C语言并不简单，让我们来看看下面这些示例：</p><ol class=\"enumerate\" type=\"1\" style=\"margin: 0px; padding: 0px 0px 10px; color: rgb(85, 85, 85); font-family: Arial, Verdana, 'BitStream vera Sans', Tahoma, Helvetica, sans-serif;\"><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>为什么下面的代码会返回0？(这题应该很简单吧)<br></strong><p style=\"margin: 0px 0px 10px; padding: 0px;\"></p><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\">  int x;\n  return x == (1 &amp;&amp; x);\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">本题主要是关于C/C++中变量初始化的问题。</p></li><p style=\"margin: 0px 0px 10px; padding: 0px;\"><span id=\"more-873\"></span></p><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>为什么下面的代码会返回0而不是-1？</strong><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\"> return ((1 - sizeof(int)) &gt;&gt; 32);\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">答案：<tt>sizeof</tt>&nbsp;是一个unsigned的类型，所以……</p></li><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>代码作用域是一件很诡异的事，下面这个函数返回值是什么？<br></strong><p style=\"margin: 0px 0px 10px; padding: 0px;\"></p><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\">int x = 5;\nint f() {\n  int x = 3;\n  {\n    extern int x;\n    return x;\n  }\n}\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">答案：5</p></li><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>函数和函数指针可以相互转换。下面的语句哪些是合法的？<br></strong><p style=\"margin: 0px 0px 10px; padding: 0px;\"></p><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\">int (*pf)(void);\nint f(void)\n{\n\n   pf = &amp;f; <span style=\"color: rgb(0, 128, 0);\">// 没问题</span>\n   pf = ***f; <span style=\"color: rgb(0, 128, 0);\">// 取址？</span>\n   pf(); <span style=\"color: rgb(0, 128, 0);\">// 函数指针可以调用？\n</span>   (****pf)();  <span style=\"color: rgb(0, 128, 0);\">// 这又是什么？</span>\n   (***************f)(); <span style=\"color: rgb(0, 128, 0);\">// 这个够变态了吧？</span>\n}\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">答案：全部合法。</p></li><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>初始化可能是ISO C中最难的部分了。无论是MSVC 还是GCC 都没有完全实现。GCC 可能更接近标准。在下面的代码中，<tt>i.nested.y</tt>&nbsp;和<tt>i.nested.z的最终值是什么？</tt></strong><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\">struct {\n   int x;\n   struct {\n       int y, z;\n   } nested;\n} i = { .nested.y = 5, 6, .x = 1, 2 };\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">答案：2和6</p></li><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>下面这个示例是C语言的痛，main函数返回值是什么？</strong><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\">typedef struct\n{\n  char *key;\n  char *value;\n} T1;\n\ntypedef struct\n{\n  long type;\n  char *value;\n} T3;\n\nT1 a[] =\n{\n  {\n    \"\",\n    ((char *)&amp;((T3) {1, (char *) 1}))\n  }\n};\nint main() {\n   T3 *pt3 = (T3*)a[0].value;\n   return pt3-&gt;value;\n}\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">答案：1（你知道为什么吗？）</p></li><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>下面这个例就更变态了。在GCC的文档中，这个语法是合法的，但是不知道为什么GCC并没有实现。下面的代码返回 2.</strong><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\"> return ((int []){1,2,3,4})[1];\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">&nbsp;</p></li><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>在下面的这个示例中，有一个“bar” 函数及其函数指针 “pbar” 的两个拷贝(static 类型一般作用于语句块或文件域).</strong><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\">  int foo() {\n     static bar();\n     static (*pbar)() = bar;\n\n  }\n\n  static bar() {\n    return 1;\n  }\n\n  static (*pbar)() = 0;\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">&nbsp;</p></li><li class=\"li-enumerate\" style=\"margin: 0px; padding: 0px 0px 0px 20px; list-style-position: inside;\"><strong>下面的这个函数返回值是什么？取决于编译器是先处理unsigned long转型，还是负号。</strong><pre class=\"verbatim\" style=\"margin-top: 5px; margin-bottom: 5px; padding: 8px 12px 8px 36px; background-image: url(http://coolshell.cn/wp-content/themes/inove/img/blockquote.gif); background-color: rgb(244, 245, 247); border: 1px dashed rgb(204, 204, 204); background-position: 3px 3px; background-repeat: no-repeat no-repeat;\"><span style=\"color: rgb(0, 0, 255);\">  unsigned long foo() {\n    return (unsigned long) - 1 / 8;\n  }\n</span></pre><p style=\"margin: 0px 0px 10px; padding: 0px;\">如果是：&nbsp;<tt>((unsigned long) - 1) / 8，那将是一个很大的数。<br></tt><tt>如果是：</tt>&nbsp;<tt>(unsigned long) (- 1 / 8 )</tt>, 那将是 0</p></li></ol><p class=\"li-enumerate\" style=\"margin: 0px 0px 10px; padding: 0px; color: rgb(85, 85, 85); font-family: Arial, Verdana, 'BitStream vera Sans', Tahoma, Helvetica, sans-serif;\">是的，这样使用C语言可能很奇怪，不过我们可以从另一方面了解C语言的很多我们不常注意的特性。C语言其实并不容易。</p><div style=\"margin: 15px 0px 0px; padding: 0px; font-family: Arial, Verdana, 'BitStream vera Sans', Tahoma, Helvetica, sans-serif; font-size: 11px; color: rgb(204, 0, 0);\"><p align=\"center\" style=\"margin: 0px 0px 10px; padding: 0px;\"><strong>（转载本站文章请注明作者和出处&nbsp;<a href=\"http://coolshell.cn/\" style=\"color: rgb(41, 112, 166); text-decoration: none;\">酷壳 – CoolShell.cn</a>&nbsp;，请勿用于任何商业用途）</strong></p><div><strong><br></strong></div></div></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span>"
    }
  ]
}
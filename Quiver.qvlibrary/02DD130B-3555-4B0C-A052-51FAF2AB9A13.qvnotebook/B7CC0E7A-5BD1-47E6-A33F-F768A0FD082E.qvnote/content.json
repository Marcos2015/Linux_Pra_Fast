{
  "title": "不定参数的应用",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><div class=\"article_title\" style=\"margin: 5px 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei';\"><span class=\"ico ico_type_Original\" style=\"display: inline-block; width: 19px; height: 19px; margin: 0px 2px 0px 0px; background-image: url(http://static.blog.csdn.net/images/ico_Original.gif); vertical-align: middle; background-position: 0px 0px; background-repeat: no-repeat no-repeat;\"></span><span style=\"font-family: Arial; font-size: 14px;\">不定参数的应用</span></div><div id=\"article_content\" class=\"article_content\" style=\"margin: 20px 0px 0px; line-height: 26px; font-family: Arial; color: rgb(51, 51, 51);\"><p>不定参数当年做为C/C++语言一个特长被很多人推崇，但是实际上这种技术并没有应用很多。除了格式化输出之外，我实在没看到多少应用。主要原因是这种技术比较麻烦，副作用也比较多，而一般情况下重载函数也足以替换它。尽管如此，既然大家对它比较感兴趣，我就简单总结一下它的使用和需要注意的常见问题。</p><h2 style=\"margin: 0px; padding: 0px;\"><a name=\"t1\" style=\"color: rgb(51, 102, 153);\"></a>原理</h2><p>刚学C语言的时候，一般人都会首先接触printf函数。通过这个函数，你可以打印不定个数的变量到屏幕，如：</p><p>printf(\"%d\", 3);<br>printf(\"%d,%d\",3,4);</p><p>&nbsp;上述代码看似简单，实际上却需要我们解决许多问题。在我们设计printf的时候，我们是不知道到底会传入几个参数的。在这种未知的情况下，我们需要解决下面几个问题：</p><ol><li>怎么告诉printf我们会传入几个参数</li><li>printf怎么去访问这些参数</li><li>函数调用完成后，系统怎么把参数从传递用的堆栈中释放</li></ol><p>为了解决这些问题，我们首先要解释cdecl调用约定（参见<a href=\"http://blog.vckbase.com/arong/archive/2004/06/09/409.html\" style=\"color: rgb(51, 102, 153); text-decoration: none;\">论调用约定</a>），所有使用不定参数的函数必须是使用cdecl（全局函数）或者this call（类成员函数）调用约定。该约定对于参数传递规定如下：</p><ol><li>参数从右向左入栈（也就是如果你调用f(a,b,c)，则c先入栈，然后是b，最后是a入栈）</li><li>调用者负责清理堆栈</li></ol><p>其中第二点直接解决了前面三个问题中的第三个问题。我们来详细说说其他两个问题。</p><h2 style=\"margin: 0px; padding: 0px;\"><a name=\"t2\" style=\"color: rgb(51, 102, 153);\"></a>确定参数的个数</h2><p>在一个函数中，一般有如下prolog代码：</p><p>00401020&nbsp;&nbsp; push&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ebp<br>00401021&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ebp,esp<br>00401023&nbsp;&nbsp; sub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; esp,48h<br>执行上述代码之后，func(a,b,c)函数所处的堆栈上下文就变成如下布局：</p><p><img src=\"quiver-image-url/5B1288803DE5C9E41386E3E9DA86AC09.jpg\" alt=\"堆栈布局\" style=\"border: none;\" width=\"155\" height=\"127\"></p><p>其中，ebp指向保存旧的ebp的堆栈内存的下一个字的地址，ebp＋8指向eip地址，ebp+12则指向函数调用的第一个参数，而ebp和esp之间是用于临时变量（也就是堆栈变量）的空间。</p><p>注意，由于上述prolog代码的存在，我们很容易通过ebp得到第一个参数的地址，对于不定参数列表之前的类型固定的参数，我们也可以根据类型信息得到其实际的位置（例如，第一个参数的位置偏移第一个参数的大小，就是第二个参数的地址)。</p><p>注意不定参数函数有个限制，就是不定参数的列表必须在整个函数的参数列表的最后。我们不可以定义如下的函数：</p><p>void func(int a, ..., int c)</p><p>所有类型固定的参数都必须出现在参数列表的开始。这样根据前面的论述，我们就可以得到所有类型固定的参数。</p><p>在设计具有不定参数列表的函数的时候，我们有两种方法来确定到底多少参数会被传递进来。</p><p>方法1是在类型固定的参数中指明后面有多少个参数以及他们的类型。printf就是采用的这种方法，它的format参数指明后面每个参数的类型。</p><p>方法2是指定一个结束参数。这种情况一般是不定参数拥有同样的类型，我们可以指定一个特定的值来表示参数列表结束。下面这个sum函数就是一个例子：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;sumi(</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;c,&nbsp;...)<br><img id=\"_21_165_Open_Image\" src=\"quiver-image-url/405B18B4B6584AE338E0F6ECAF736533.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"></span><span id=\"_21_165_Open_Text\"><span style=\"color: rgb(0, 0, 0);\">{<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;va_list&nbsp;ap;<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;va_start(ap,c);<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;i;<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;sum&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;c;<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;va_arg(ap,</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">);<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255);\">while</span><span style=\"color: rgb(0, 0, 0);\">(</span><span style=\"color: rgb(0, 0, 0);\">0</span><span style=\"color: rgb(0, 0, 0);\">!=</span><span style=\"color: rgb(0, 0, 0);\">c)<br><img id=\"_110_150_Open_Image\" src=\"quiver-image-url/2887D91D0594EF8793C1DB92B8A1D545.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span id=\"_110_150_Open_Text\"><span style=\"color: rgb(0, 0, 0);\">{<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;sum</span><span style=\"color: rgb(0, 0, 0);\">+</span><span style=\"color: rgb(0, 0, 0);\">c;<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;va_arg(ap,</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">);<br><img src=\"quiver-image-url/105A1E124122B2ABCEE4EA8E9F5108F3.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style=\"color: rgb(0, 0, 0);\"><br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255);\">return</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;sum;<br><img src=\"quiver-image-url/05DD8D549CFF04457A6366B0A7C9352A.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">}</span></span></div><p>使用这个函数的代码为：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;main(</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;argc,&nbsp;</span><span style=\"color: rgb(0, 0, 255);\">char</span><span style=\"color: rgb(0, 0, 0);\">*</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;argv[])<br><img id=\"_33_82_Open_Image\" src=\"quiver-image-url/405B18B4B6584AE338E0F6ECAF736533.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"></span><span id=\"_33_82_Open_Text\"><span style=\"color: rgb(0, 0, 0);\">{<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;i</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">sumi(</span><span style=\"color: rgb(0, 0, 0);\">1</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">2</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">3</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">4</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">5</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">6</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">7</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">8</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">9</span><span style=\"color: rgb(0, 0, 0);\">,</span><span style=\"color: rgb(0, 0, 0);\">0</span><span style=\"color: rgb(0, 0, 0);\">);<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;<br><img src=\"quiver-image-url/33D02437D135341F0800E3D415312AE8.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255);\">return</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">0</span><span style=\"color: rgb(0, 0, 0);\">;<br><img src=\"quiver-image-url/05DD8D549CFF04457A6366B0A7C9352A.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">}</span></span><span style=\"color: rgb(0, 0, 0);\"><br><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"></span></div><h2 style=\"margin: 0px; padding: 0px;\"><a name=\"t3\" style=\"color: rgb(51, 102, 153);\"></a>访问各个参数</h2><p>其实前文已经告诉我们怎么去访问不定参数。va_start和va_arg函数可以被结合起来用于依次访问每个函数，他们实际上都是宏函数。</p><p>在vc6，va_start函数定义为：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">#define</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;_INTSIZEOF(n)&nbsp;&nbsp;&nbsp;(&nbsp;(sizeof(n)&nbsp;+&nbsp;sizeof(int)&nbsp;-&nbsp;1)&nbsp;&amp;&nbsp;~(sizeof(int)&nbsp;-&nbsp;1)&nbsp;)</span><span style=\"color: rgb(0, 0, 0);\"><br><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"></span><span style=\"color: rgb(0, 0, 255);\">#define</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;va_start(ap,v)&nbsp;&nbsp;(&nbsp;ap&nbsp;=&nbsp;(va_list)&amp;v&nbsp;+&nbsp;_INTSIZEOF(v)&nbsp;)</span></div><p>其中_INTSIZEOF(n)计算比n大的sizeof(int)的最小倍数，如果n=101，则_INTSIZEOF(n)为104。</p><p>va_start执行完毕后，ap指向变量v后第一个4字节对齐的地址。例如，v的地址为0x123456, v的大小为13，则v后面的下一个与字边界对齐的地址为0x123456+0x0D=0x123463再调整为与4字节对齐的下一个地址，也就是0x123464.</p><p>va_arg函数定义为：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">#define</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;va_arg(ap,t)&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;*(t&nbsp;*)((ap&nbsp;+=&nbsp;_INTSIZEOF(t))&nbsp;-&nbsp;_INTSIZEOF(t))&nbsp;)</span></div><p>分析与va_start一样，它的结果是使ap指向当前变量的下一个变量。</p><p>这样，我们只要在开始时使用va_start把不定参数列表赋值给ap，然后依次用va_arg获得不同参数即可。</p><h2 style=\"margin: 0px; padding: 0px;\"><a name=\"t4\" style=\"color: rgb(51, 102, 153);\"></a>潜在问题</h2><p>使用不定参数列表，有两个问题特别需要注意。</p><p>问题1的理解相对简单：我们在重载一个函数的时候，不能依赖不定参数列表部分对函数进行区分。</p><p>假定我们定义两个重载函数如下：</p><p>int func(int a, int b, ...)</p><p>int func(int a, int b, float c);</p><p>则上述函数会导致编译器不知道怎么去解释func(1,2, 3.3)，因为当第三个参数为浮点数时，两个实现都可以满足匹配要求。一般情况，个人建议对于不定参数函数不要去做重载。</p><p>另外一个问题是关于类型问题。绝大多数情况下，C和C＋＋的变量都是强类型的，而不定参数列表属于一个特例。</p><p>当我们调用va_arg的时候，我们指明下一个参数的类型，而在执行的时候，va_arg正是根据这个信息在堆栈上来找到对应的参数的。如果我们需要的类型和真实传递进来的参数完全一致时自然没有问题，但是假如类型不一样，则会有大麻烦。</p><p>假如上面的的sumi函数，我们用下面方法调用：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;sum&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;sumi(</span><span style=\"color: rgb(0, 0, 0);\">1</span><span style=\"color: rgb(0, 0, 0);\">,&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">2.2</span><span style=\"color: rgb(0, 0, 0);\">,&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">3</span><span style=\"color: rgb(0, 0, 0);\">,&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">0</span><span style=\"color: rgb(0, 0, 0);\">)</span></div><p>注意第二个参数我们传入了一个double类型的2.2，我们希望sumi在做加法时可以做隐式类型转换，转换为int进行计算。但是实际情况时，当我们分析到这个参数时，调用的是：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">c=va_arg(ap,int)</span></div><p>根据前文va_arg的定义，这个宏被翻译成：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">#define</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;va_arg(ap,t)&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;*(int&nbsp;*)((ap&nbsp;+=&nbsp;_INTSIZEOF(int))&nbsp;-&nbsp;_INTSIZEOF(int))&nbsp;)</span></div><p>如果后面的+=计算出正确的地址，最后就变成</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\">*(int*)addr</div><p>如果希望能得到正确的整数值，必须要求addr所在的地址是一个真实的int类型。但是当我们传入double时，实际上其内存布局和int完全不同，因此我们得不到需要的整数。感兴趣的朋友可以用下面简单的代码做测试：</p><div style=\"padding: 4px 5.4pt; background-color: rgb(230, 230, 230); width: 659.296875px; word-break: break-all; border: 0.5pt solid windowtext;\"><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"><span style=\"color: rgb(0, 0, 255);\">double</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;a;<br><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\">a</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">1.1</span><span style=\"color: rgb(0, 0, 0);\">;<br><img src=\"quiver-image-url/A6339EE3E57D1D52BC7D02B338E15A60.gif\" alt=\"\" align=\"top\" style=\"border: none;\" width=\"11\" height=\"16\"></span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;b&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">=</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">*</span><span style=\"color: rgb(0, 0, 0);\">(</span><span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">*</span><span style=\"color: rgb(0, 0, 0);\">)&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">&amp;</span><span style=\"color: rgb(0, 0, 0);\">&nbsp;a;</span></div><p>因此，当我们调用有不定参数列表的函数时，不要期望系统做隐式类型转换，系统不会做这种检查或者转换，你给的参数类型必须严格和你希望的值一样。</p></div><div class=\"share_buttons\" id=\"sharePanel\" style=\"float: right; width: 170px; margin: 5px 0px; font-size: 12px; line-height: 24px; font-family: Arial, Helvetica, sans-serif; text-align: right; color: rgb(51, 51, 51);\"><span style=\"display: inline-block; line-height: 30px; font-weight: bold; color: green; vertical-align: middle;\">分享到：</span>&nbsp;<a name=\"sina\" class=\"share_sina\" title=\"分享到新浪微博\" style=\"color: rgb(51, 102, 153); background-image: url(http://static.blog.csdn.net/images/ico_sina.gif); display: inline-block; width: 25px; height: 30px; cursor: pointer; vertical-align: middle; background-position: 0px 5px; background-repeat: no-repeat no-repeat;\"></a><a name=\"qq\" class=\"share_qq\" title=\"分享到腾讯微博\" style=\"color: rgb(51, 102, 153); background-image: url(http://static.blog.csdn.net/images/ico_qq.gif); display: inline-block; width: 25px; height: 30px; cursor: pointer; vertical-align: middle; background-position: 0px 5px; background-repeat: no-repeat no-repeat;\"></a></div><div><br></div><div class=\"article_next_prev\" style=\"margin-top: 30px; color: rgb(102, 102, 102); font-size: 12px; line-height: 24px; font-family: Arial, Helvetica, sans-serif;\"></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span>"
    }
  ]
}
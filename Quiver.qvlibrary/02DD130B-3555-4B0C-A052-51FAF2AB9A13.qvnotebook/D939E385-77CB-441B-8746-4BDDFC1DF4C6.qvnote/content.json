{
  "title": "关于C语言，我喜欢和讨厌的十件事",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><div class=\"entry-header\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 13px;\"><h1 style=\"border-width: 0px 0px 1px; border-bottom-style: solid; border-bottom-color: rgb(232, 232, 232); margin: -5px 0px 10px; padding: 0px 0px 10px; font-size: 22px; font-weight: normal; line-height: 30px; font-family: Arial, sans-serif; text-align: center;\"><br></h1></div><div class=\"entry\" style=\"border: 0px; margin: 0px; padding: 0px;\"><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">前言：</strong>最近有个家伙抱怨道<a href=\"http://freeshells.ch/~revence/no-c.txt\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">“为什么我还要再用C？”</a>-虽然我不同意他的说法，但至少他随口提到如果你“在一台拇指大小的电脑”上编程，或者为一门语言写引导程序，那么可以用C语言。要我说，写设备驱动，或者特定平台的内核，不管怎么说都可以使用C。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">几年之前，我用C语言写下了我的第一个网络程序，但我并不推荐这么做。现在，我只用P打头的，尤其是P-y打头的语言写网络程序<span style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(136, 136, 136);\">（译者注：绕什么圈子，不就是Python嘛…）</span>。但在当时，我刚从DOS和TSRs的世界中出来，在那儿用上10KB的RAM我都会觉得大得惊人。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">现在我是一名Web开发者，但是仅限于晚上。白天我为嵌入式微处理器编写固件，因此，C依旧是我所选择的语言。我所说的微处理器是那种嵌入烤面包机，或者其他类似设备中的处理器，只有大概64KB的代码空间以及2KB的RAM。因此，可供选择的语言基本上就只有汇编和C了。（也可以是Forth，不过那是另外的故事。）</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">然后，我渐渐发现越是多用C，就越不觉得它讨厌了。因此我就想着要给这个世界最常用的系统级程序语言写一些颂词。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">以下分别是关于C语言我喜欢五件事和讨厌的五件事。请随意在底下的评论栏里加上你们自己喜欢或讨厌的事情。</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">1.K&amp;R（喜欢）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">Kernighan &amp; Ritchie 写的<strong style=\"border: 0px; margin: 0px; padding: 0px;\">《<a href=\"http://www.amazon.cn/gp/product/B0011425T8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011425T8&amp;linkCode=as2&amp;tag=vastwork-23\" target=\"_blank\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">C程序设计语言</a>》</strong>是关于C语言最好的书，而且我估计它也是关于编程的最好的书之一。简洁明了，都是有用并且重要的例子。这是一本非常好的书，同时也是一个非常好的参考。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">甚至就连序言都非常好。在此引用一句，“C不是一门庞大的语言，因此不应该用一本厚重的书来诠释。”如果所有的编程教程都像这本书一样把长度限制到270页，它们会好很多。K&amp;R的简洁明了、点到为止，很可能是C语言的成功所不可或缺的。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">另一本给我喜爱的类似的编程教材是Leo Brodie所著的《<a href=\"http://books.google.co.nz/books?id=1AlWbXItiCYC\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">Thinking Forth</a>》。当然，肯定还有其他非常好的书，像是<a href=\"http://www-mitpress.mit.edu/sicp/\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">SICP</a>之类的，只是我还没有读过罢了。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">2.它十分简明（喜欢）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">事实上，C语言作为一门简明语言是一个实实在在的福利。想要学习C，你只需了解它的类型，熟悉流程控制，处理好指针，然后你基本上就已经掌握它了。剩下的就仅仅是函数了。事实上，K&amp;R利用这个低级的命令式语言，仅花费11行就实现了<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">qsort()</code>，不得不说这是对C语言简明性有力的证明。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">3.IOCCC（喜欢）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">你或许会觉得我疯了，不过如果你足够上进，<a href=\"http://www0.us.ioccc.org/main.html\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">International Obfuscated C Code Contest</a>可能那儿是关于计算机科学最好的老师之一。算我开的一个小玩笑，不过我的确认为众多黑客都在不停挑战，并且创造了很多值得一谈的功绩。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">其中让我确实学到很多的就是<a href=\"http://fabrice.bellard.free.fr/otcc/\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">OTCC</a>，Fabrice Bellard所写的“混淆的小型C编译器”。从中我学到了关于编译器设计的知识，主要是C语言编译器不必是<a href=\"http://www.ohloh.net/projects/15\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">340万行代码</a>的庞然大物。同时，我也从<a href=\"http://compilers.iecc.com/crenshaw/\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">Let’s Build a Compiler</a>中获益，并静下来写了一个迷你的由C到Forth的编译器。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">4.变量的定义与使用形式相似（喜欢）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">这一点对记住如何定义十分复杂的事物非常有用，举个例子，一个指向包含十个整形的数组的指针应该是<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">int *api[10]</code>还是<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">int (*pai)[10]</code>呢？像你使用它的方式一样定义它即可，只需要记住<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">[]</code>操作符的优先级高于<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">*</code>（很自然就可以记住），然后你就明白那个括号是需要的了。(译者注：前者是指针数组，包含十个指向整形的指针。)</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">5.它编译出的“hello, world”体积很小（喜欢）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">尤其是对嵌入式编程，这一点简直棒极了。C语言之上没有一个体积庞大的运行时，在很多嵌入式处理器上，一个什么都不做的程序一般只会编译出3到4个byte。一个完整的“hello, world”程序，甚至是在Windows XP下，都只会编译出1.5KB大小（使用<a href=\"http://fabrice.bellard.free.fr/tcc/\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">Tiny C Compiler</a>，它非常合适与做小型可运行程序）。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">我认为，如果像Python一样的其他语言能够在这一点上赶上C，甚至是C的一部分，他们在嵌入式的世界中就会更加出彩。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><hr style=\"border-style: solid; border-color: rgb(232, 232, 232); margin-top: 0px; margin-bottom: 20px; padding: 0px; clear: both; height: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">6. 全局变量默认是外部的（讨厌）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">你会说“用全局变量可不是个好习惯！”。但在嵌入式系统中不同。举个例子，你有一个名为<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">timer.c</code>的文件，其中有个全局变量<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">int counter</code>，在另一个文件<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">state_machine.c</code>中，有另一个<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">counter</code>。如果你碰巧忘记了在它们之前加上’static’，它们就是同一个变量，你根本察觉不到，没有Warning，没有任何提示……</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">这种行为看起来十分奇怪，尤其是当关键字<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">extern</code>就在手边的时候。不过当你熟悉<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">static</code>的两种不同的意义后，就可以轻易避免这种情况了。不过这依然十分令人讨厌。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">7.&nbsp;<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">static</code>的两种不同的意义（讨厌）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">有人能解释一下为什么<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">static</code>在函数体中和函数体外有着两种完全不同的意义吗？在函数体中，他表示“静态”——“在函数调用过程中保持这个变量唯一”。但是在函数体外，它的意义完全改变，成了“该变量为该文件私有的”。为什么后者不用<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">private</code>或者<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">intern</code>呢？</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">8. &amp; 优先级低于 ==（讨厌）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">在嵌入式编程中，我们总是喜欢用<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">if ((x&amp;MASK) == 0)</code>这样的语句。但你可能常忘记写里面那对括号，因为感觉上，&amp;的优先级应该比==高。但是事实并非如此，因此必须使用这对多出来的括号。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">不过，这个情况有个不错的<a href=\"http://cm.bell-labs.com/cm/cs/who/dmr/chist.html\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">历史原因</a>。C语言诞生自B语言，而在B语言中只有&amp;而没有&amp;&amp;运算符。当Ritchie引入&amp;&amp;运算符时，他们希望原有的B语言端的代码能够正常运行，因此使&amp;的优先级低于==。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">9. 宏的功能并没有那么强（讨厌）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">虽然递归的<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">#include</code>是非常棒的点子，但是，要怎么做才能不诉诸一些费脑子的方法，轻易地做预处理循环呢？同样的，有些我常遇到的情况，比如怎么才能给程序int和string两种格式的版本号，而同时只需要修改一个变量呢？</p><div style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><div id=\"highlighter_387881\" class=\"syntaxhighlighter notranslate c\" style=\"border: 0px; margin: 1em 0px !important; padding: 1px !important; font-size: 12px !important; width: 969px; position: relative !important; overflow-y: hidden !important; overflow-x: auto !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width: 969px; border: 0px !important; margin-right: 0px !important; margin-bottom: 0px !important; margin-left: 0px !important; padding: 0px !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; min-height: inherit !important;\"><tbody style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important;\"><tr style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important;\"><td class=\"gutter\" style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; color: rgb(175, 175, 175) !important;\"><div class=\"line number1 index0 alt2\" style=\"border-width: 0px 3px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; margin: 0px !important; padding: 0px 0.5em 0px 1em !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;\">1</div><div class=\"line number2 index1 alt1\" style=\"border-width: 0px 3px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; margin: 0px !important; padding: 0px 0.5em 0px 1em !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;\">2</div></td><td class=\"code\" style=\"width: 941.390625px; border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; box-sizing: content-box !important; min-height: inherit !important;\"><div class=\"container\" style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; width: auto !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: relative !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; min-height: inherit !important;\"><div class=\"line number1 index0 alt2\" style=\"border: 0px !important; margin: 0px !important; padding: 0px 1em !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;\"><code class=\"c preprocessor\" style=\"border: 0px !important; padding-top: 0px !important; padding-bottom: 0px !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; color: gray !important;\">#define VERSION_INT 209</code></div><div class=\"line number2 index1 alt1\" style=\"border: 0px !important; margin: 0px !important; padding: 0px 1em !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; white-space: pre !important;\"><code class=\"c preprocessor\" style=\"border: 0px !important; padding-top: 0px !important; padding-bottom: 0px !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; background-image: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: inherit !important; color: gray !important;\">#define VERSION_STR \"2.09\"</code></div></div></td></tr></tbody></table></div></div><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">用上面的代码，你更新版本号的时候总是需要修改两个地方。而且，特殊的<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">#</code>和<code style=\"border: 0px; padding-top: 0px; padding-bottom: 0px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;\">##</code>并不能帮上什么忙。我找到的唯一的解决则涉及了一些运行时修改。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">&nbsp;</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; line-height: 36px; font-family: Arial, sans-serif; color: rgb(51, 51, 51);\">10. 它不支持反射（讨厌）</h2><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">好吧，可能这只是重申了一下第9点——如果宏系统再稍微强大一点，就不需要<a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_science%29\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">反射机制</a>了。说不定我还会滥用它。不过我真正想说的是，用C语言，你不能写出生成代码的代码。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">为什么不用C语言本身来写预处理器呢？这会给循环展开，更强大的宏机制，甚至更多IOCCC的怪点子提供无穷无尽的可能性。:-)</p><hr style=\"border-style: solid; border-color: rgb(232, 232, 232); margin-top: 0px; margin-bottom: 20px; padding: 0px; clear: both; height: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">我认为，C语言之父能够坦然承认C的不足之处是非常可贵的。就像Dennis Ritchie说的一样：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"><span style=\"border: 0px; margin: 0px; padding: 0px; color: rgb(136, 136, 136);\">“C语言行为古怪，瑕疵遍布，但却是一个巨大的成功。”</span></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">更多关于这点的信息，去读读他的论文&nbsp;<a href=\"http://cm.bell-labs.com/cm/cs/who/dmr/chist.html\" target=\"_blank\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration: none; color: rgb(0, 153, 204);\">The Development of the C language</a>&nbsp;吧 —— 那真是一篇值得一读的文章。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\">总而言之，在自己的优势上，C卓尔不群。</p><br style=\"color: rgb(51, 51, 51); font-family: Arial, sans-serif; line-height: 21px;\"></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span>"
    }
  ]
}
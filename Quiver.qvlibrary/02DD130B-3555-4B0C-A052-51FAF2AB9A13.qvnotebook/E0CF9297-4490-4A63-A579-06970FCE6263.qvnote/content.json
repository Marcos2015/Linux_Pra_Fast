{
  "title": "C语言之结构体",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">C语言中，结构体是一种很常用的数据类型。简单而又复杂，能够用好它实属不易。下面总结下它的常见用法及容易出错的地方。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 14.5px;\"><strong>一、关于结构体的声明</strong></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>1、匿名声明</strong>。如：</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">struct {</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i,j;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">}point;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">说明：</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;这段代码的含义是，声明一个无名(anonymous)的结构体，并创建了一个结构体变量point。如果这段声明是放在<span style=\"color: rgb(255, 0, 0);\">全局域(在任意函数(比如main函数)外)</span>内，那么point内的变量将被初始化为默认值，换句话说，以这种方式声明结构体变量时就已经为它分配了内存空间。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;适用于该结构体只需要产生一个变量！本例中，该匿名结构体将有且仅有point这个结构体变量！</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;不同的匿名结构体变量，类型是不同的！如</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">struct {</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i,j;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">}p1,p2;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\"><br></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">struct {</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i,j;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">}p3;</span></p><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: 'Courier New';\">&gt;&gt;如果将 p1=p2 ，则ok；如果将 p1=p3 ，则编译器提示\"incompatible types when assigning to type ‘struct &lt;anonymous&gt;’ from type ‘struct &lt;anonymous&gt;’\"，两者的实际类型是不一样的。</span><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"></span><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>2、显式声明一个结构体</strong></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">struct node{</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i,j;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">};</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New';\">&gt;&gt; 声明了一个结构体 struct node，如果需要声明一个它的对象，则可以这样：struct node n1;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New';\">&gt;&gt; 可以声明多个该结构体的变量。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt; 区别\"C中的结构体变量\" 和 \"Java中的类对象\"。C中，<span style=\"font-family: 'Courier New';\">\"struct node n1;\"</span>创建了一个结构体变量，并为它分配了内存空间，<span style=\"color: rgb(255, 0, 0);\">不一定初始化！得看这个变量是否在全局域</span>；而Java中,<span style=\"font-family: 'Courier New';\">\"Node n1;\"</span>只是声明了一个类对象，也就是说是一个\"空引用\",可以想象成C中的空指针，当<span style=\"font-family: 'Courier New';\">\"n1 = new Node();\"</span>时，n1才指向了该对象的内存空间。因此，在Java中，可以通过<span style=\"font-family: 'Courier New';\">\"n1==null\"</span>来判断对象是否为空；在C中，不能通过<span style=\"font-family: 'Courier New';\">\"n1==NULL\"</span>来判断，因为\"n1\"并不是一个指针，而是一个类型变量的名字，就像<span style=\"font-family: 'Courier New';\">\"int a;\"</span>这种，显然\"a\"不是指针！</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>3、用<span style=\"font-family: 'Courier New';\">typedef</span>来简化结构体的写法</strong></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">typedef<span style=\"color: rgb(255, 0, 0);\">struct {</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; color: rgb(255, 0, 0); background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i,j;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\"><span style=\"color: rgb(255, 0, 0);\">}</span>Node;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;相当于把红色代码该名为Node了。以前需要这样声明<span style=\"font-family: 'Courier New';\">\"struct node n1;\"</span>，现在只需要<span style=\"font-family: 'Courier New';\">\"Node n1;\"</span>。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;这段代码中，如果没有<span style=\"font-family: 'Courier New';\">typedef</span>，代码的意思是<span style=\"font-family: 'Courier New';\">\"声明了一个匿名结构体变量\"</span>！注意区别。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>4、在结构体中声明结构体变量</strong>。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">typedef struct {</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i,j;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;<span style=\"color: rgb(255, 0, 0);\">Node n1;</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">}Node;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;这段代码是<span style=\"color: rgb(255, 0, 0);\">错误</span>的！</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;错误1：直接在结构体中声明另外一个结构体，会出现死循环，如A包括B，B又包括A，A又包括B……使得编译器无法知道结构体的空间大小，因此，无法通过编译！</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;错误2：<span style=\"font-family: 'Courier New';\">typedef</span>还没有将结构体命名为Node，你就在结构体中使用了Node，显然，编译器此时还不知到Node是什么！所以，无法通过编译！</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;正确的使用方法如下：</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">typedef struct&nbsp;<span style=\"color: rgb(0, 0, 153);\">node</span>{</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i,j;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;<span style=\"color: rgb(0, 0, 153);\">struct node *</span>n1;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 4px 0px; padding: 2px 0px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">}Node;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 14.5px;\"><strong><br></strong></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 14.5px;\"><strong>二、关于结构体的赋值</strong></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>1、声明一个变量后的默认值</strong></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"background-color: rgb(255, 204, 255);\">t<span style=\"font-family: 'Courier New';\">ypedef struct {</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;char *p;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;int i;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">&nbsp; &nbsp;char ch[256];</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">}mystr;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New';\"><span style=\"background-color: rgb(255, 204, 255);\">mystr str;</span>//声明一个变量,此时已为之分配了空间！</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;如前面提到的，如果这个变量声明是在全局，则<span style=\"font-family: 'Courier New';\">\"<span style=\"color: rgb(0, 0, 153);\">str.p等于NULL,str.i等于0,<a href=\"http://str.ch/\">str.ch</a>数组都是'\\0'</span>\"</span>，为默认初始值；如果不在全局，则所有值都是\"野值\"。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>2、手动初始化</strong></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"background-color: rgb(255, 204, 255);\"><span style=\"font-family: 'Courier New';\">mystr str2={\"abc\",2,\"def\"};</span><br></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New';\"><span style=\"background-color: rgb(255, 204, 255);\">mystr str3={.p=\"abc\",.ch=\"def\"};</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; color: rgb(204, 0, 0);\"><span style=\"background-color: rgb(255, 204, 255);\">mystr str4={.ch[256]=\"def\"};//error！</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New';\"><span style=\"background-color: rgb(255, 204, 255);\">mystr str5={.ch[10]=\"def\"};</span><span style=\"color: rgb(153, 0, 0);\">//right！</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;此时，<span style=\"font-family: 'Courier New';\">str2</span>声 明时手动赋了初值。str2.p和<a href=\"http://str2.ch/\">str2.ch</a>赋值时的行为是不一样的！str2.p是一个字符指针，也就是将p指向常量字符串\"abc\"在内存中的地 址；而<a href=\"http://str2.ch/\">str2.ch</a>是一个常量字符指针(无法操作指针)，代表的是字符数组，也就是将常量字符串\"def\"逐字符copy到ch数组里，赋值结束 后，ch的值是：<span style=\"font-family: 'Courier New'; color: rgb(0, 0, 153);\">'d','e','f','\\0','\\0'</span>……</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;也可以像<span style=\"font-family: 'Courier New';\">str3</span>这样初始化结构体中的某些变量，值得注意的是str4和str5。对于数组(如 char a[size])来说，传递给常量字符指针，可以是\"a\"，可以是\"a[n]\"(<strong>0&lt;=n&lt;size，编译器会忽略掉n</strong>)，不能是\"a[size]\"(编译器会检测，报<span style=\"font-family: 'Courier New';\">\"array index in initializer exceeds array bounds\"</span>)。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>3、赋值</strong></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">mystr str6;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">str6.p = \"abc\";</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">或者</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">mystr * pstr = &amp; str6;//得到这个结构体变量的指针</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">pstr-&gt;p = \"abc\";</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>4、动态生成结构体变量</strong></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">mystr * pstr = (mystr*)malloc(sizeof(mystr));</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">pstr-&gt;p = \"abc\";</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;注意，如果是<strong>动态生成</strong>的结构体变量(用到了malloc)，则必须在丢弃该变量前将他的内存空间释放掉(用free)。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&gt;&gt;如果结构体内部也存在动态生成的对象，在释放结构体之前要先释放掉其内部的内存空间，如下</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">pstr-&gt;p = (char*)malloc(sizeof(char)*256);</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; color: rgb(153, 0, 0); background-color: rgb(255, 204, 255);\">free(pstr-&gt;p);</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New'; background-color: rgb(255, 204, 255);\">free(pstr);</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: 'Courier New';\">注：本文版权所有，如有转载，请链接本文地址<a href=\"http://blog.csdn.net/whuslei/article/details/blog.csdn.net/whuslei\" target=\"_blank\">blog.csdn.net/whuslei</a></span></p>"
    }
  ]
}
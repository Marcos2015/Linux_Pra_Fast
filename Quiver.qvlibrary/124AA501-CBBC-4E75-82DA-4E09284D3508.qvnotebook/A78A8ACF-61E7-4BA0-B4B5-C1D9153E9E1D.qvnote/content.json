{
  "title": "使用Vim搭建C++开发环境",
  "cells": [
    {
      "type": "text",
      "data": "<div>作者：韦易笑<br>链接：https://www.zhihu.com/question/47691414/answer/373700711<br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br><br><div><p>2018年了，不要再看网上那些老旧的文章还在教你使用手工生成 tags 的，请使用自动代码索引生成工具，比如 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/ludovicchabant/vim-gutentags\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">vim-gutentags</a>，现在网上好像就没有一篇能正确讨论  Vim C/C++ 环境搭建的，都在谈些十年前的东西，所以我写了篇关于 Vim 8 和 C/C++ 相关插件的介绍：</p><p>假设你已经有一定 Vim 使用经验，并且折腾过 Vim 配置，能够相对舒适的在 Vim 中编写其他代码的时候，准备在 Vim 开始 C/C++ 项目开发，或者你已经用 Vim 编写了几年 C/C++ 代码，想要更进一步，让自己的工作更加顺畅的话，本文就是为你准备的：</p><p><br></p><p><b>插件管理</b></p><p>为什么把插件管理放在第一个来讲呢？这是比较基本的一个东西，如今 Vim 下熟练开发的人，基本上手都有 20-50 个插件，遥想十年前，Vim里常用的插件一只手都数得过来。过去我一直使用老牌的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/VundleVim/Vundle.vim\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Vundle</a> 来管理插件，但是随着插件越来越多，更新越来越频繁，Vundle 这种每次更新就要好几分钟的东西实在是不堪重负了。</p><p>在我逐步对 Vundle 失去耐心之后，我试用了 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/junegunn/vim-plug\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">vim-plug</a> ，用了两天以后就再也回不去 Vundle了，它支持全异步的插件安装，安装50个插件只需要一分钟不到的时间，这在 Vundle 下面根本不可想像的事情，插件更新也很快，不像原来每次更新都可以去喝杯茶去，最重要的是它支持插件延迟加载：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"c\">\" 定义插件，默认用法，和 Vundle 的语法差不多</span>\nPlug <span class=\"s1\">'junegunn/vim-easy-align'</span>\nPlug <span class=\"s1\">'skywind3000/quickmenu.vim'</span>\n\n<span class=\"c\">\" 延迟按需加载，使用到命令的时候再加载或者打开对应文件类型才加载</span>\nPlug <span class=\"s1\">'scrooloose/nerdtree'</span><span class=\"p\">,</span> { <span class=\"s1\">'on'</span>:  <span class=\"s1\">'NERDTreeToggle'</span> }\nPlug <span class=\"s1\">'tpope/vim-fireplace'</span><span class=\"p\">,</span> { <span class=\"s1\">'for'</span>: <span class=\"s1\">'clojure'</span> }\n\n<span class=\"c\">\" 确定插件仓库中的分支或者 tag</span>\nPlug <span class=\"s1\">'rdnetto/YCM-Generator'</span><span class=\"p\">,</span> { <span class=\"s1\">'branch'</span>: <span class=\"s1\">'stable'</span> }\nPlug <span class=\"s1\">'nsf/gocode'</span><span class=\"p\">,</span> { <span class=\"s1\">'tag'</span>: <span class=\"s1\">'v.20150303'</span><span class=\"p\">,</span> <span class=\"s1\">'rtp'</span>: <span class=\"s1\">'vim'</span> }\n</code></pre></div><p>定义好插件以后一个 :PlugInstall 命令就并行安装所有插件了，比 Vundle 快捷不少，关键是 vim-plug 只有单个文件，正好可以放在我 github 上的 vim 配置仓库中，每次需要更新 vim-plug 时只需要 :PlugUpgrade，即可自我更新。使用时建议给插件分组，同类别插件放一个组里，vimrc 里面只需要确定下启用哪些组就行了。</p><p>抛弃 Vundle 切换到 vim-plug 以后，不仅插件安装和更新快了一个数量级，大量的插件我都配置成了延迟加载，Vim 启动速度比 Vundle 时候提高了不少。使用 Vundle 的时候一旦插件数量超过30个，管理是一件很痛苦的事情，而用了 vim-plug 以后，50-60个插件都轻轻松松。</p><p><br></p><p><b>符号索引</b></p><p>现在有好多 ctags 的代替品，比如 gtags, etags 和 cquery。然而我并不排斥 ctags，因为他支持 50+ 种语言，没有任何一个符号索引工具有它支持的语言多。同时 Vim 和 ctags 集成的相当好，用它依赖最少，大量基础工作可以直接通过 ctags 进行，然而到现在为止，我就没见过几个人把 ctags 用对了的。</p><p>就连配置文件他们都没写对，正确的 ctags 配置应该是：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"k\">set</span> <span class=\"k\">tags</span><span class=\"p\">=</span>./.<span class=\"k\">tags</span>;<span class=\"p\">,</span>.<span class=\"k\">tags</span>\n</code></pre></div><p>这里解释一下，首先我把 tag 文件的名字从“tags” 换成了 “.tags”，前面多加了一个点，这样即便放到项目中也不容易污染当前项目的文件，删除时也好删除，gitignore 也好写，默认忽略点开头的文件名即可。</p><p>前半部分 “<b>./.tags; </b>”代表在文件的所在目录下（不是 “:pwd”返回的 Vim 当前目录）查找名字为 “.tags”的符号文件，后面一个分号代表查找不到的话向上递归到父目录，直到找到 .tags 文件或者递归到了根目录还没找到，这样对于复杂工程很友好，源代码都是分布在不同子目录中，而只需要在项目顶层目录放一个 .tags文件即可；逗号分隔的后半部分 .tags 是指同时在 Vim 的当前目录（“:pwd”命令返回的目录，可以用 :cd ..命令改变）下面查找 .tags 文件。</p><p>最后请更新你的 ctags，不要再使用老旧的 Exuberant Ctags，这货停止更新快十年了，请使用最新的  <a href=\"https://link.zhihu.com/?target=https%3A//ctags.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Universal CTags</a> 代替之，它在 Exuberant Ctags 的基础上继续更新迭代了近十年，如今任然活跃的维护着，功能更强大，语言支持更多。</p><p>（注意最新版 universal ctags 调用时需要加一个 --output-format=e-ctags，输出格式才和老的 exuberant ctags 兼容否则会有 windows 下路径名等小问题）。</p><p><br></p><p><b>自动索引</b></p><p>过去写几行代码又需要运行一下 ctags 来生成索引，每次生成耗费不少时间。如今 Vim 8 下面自动异步生成 tags 的工具有很多，这里推荐最好的一个：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/ludovicchabant/vim-gutentags\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">vim-gutentags</a>，这个插件主要做两件事情：</p><p>- 确定文件所属的工程目录，即文件当前路径向上递归查找是否有 `.git`, `.svn`, `.project` 等标志性文件（可以自定义）来确定当前文档所属的工程目录。</p><p>- 检测同一个工程下面的文件改动，能会自动增量更新对应工程的 `.tags` 文件。每次改了几行不用全部重新生成，并且这个增量更新能够保证 `.tags` 文件的符号排序，方便 Vim 中用二分查找快速搜索符号。</p><p>vim-gutentags 需要简单配置一下：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"c\">\" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:gutentags_project_root <span class=\"p\">=</span> [<span class=\"s1\">'.root'</span><span class=\"p\">,</span> <span class=\"s1\">'.svn'</span><span class=\"p\">,</span> <span class=\"s1\">'.git'</span><span class=\"p\">,</span> <span class=\"s1\">'.hg'</span><span class=\"p\">,</span> <span class=\"s1\">'.project'</span>]\n\n<span class=\"c\">\" 所生成的数据文件的名称</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:gutentags_ctags_tagfile <span class=\"p\">=</span> <span class=\"s1\">'.tags'</span>\n\n<span class=\"c\">\" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录</span>\n<span class=\"k\">let</span> s:vim_tags <span class=\"p\">=</span> expand<span class=\"p\">(</span><span class=\"s1\">'~/.cache/tags'</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:gutentags_cache_dir <span class=\"p\">=</span> s:vim_tags\n\n<span class=\"c\">\" 配置 ctags 的参数</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:gutentags_ctags_extra_args <span class=\"p\">=</span> [<span class=\"s1\">'--fields=+niazS'</span><span class=\"p\">,</span> <span class=\"s1\">'--extra=+q'</span>]\n<span class=\"k\">let</span> <span class=\"k\">g</span>:gutentags_ctags_extra_args <span class=\"p\">+=</span> [<span class=\"s1\">'--c++-kinds=+px'</span>]\n<span class=\"k\">let</span> <span class=\"k\">g</span>:gutentags_ctags_extra_args <span class=\"p\">+=</span> [<span class=\"s1\">'--c-kinds=+px'</span>]\n\n<span class=\"c\">\" 检测 ~/.cache/tags 不存在就新建</span>\n<span class=\"k\">if</span> <span class=\"p\">!</span>isdirectory<span class=\"p\">(</span>s:vim_tags<span class=\"p\">)</span>\n   <span class=\"k\">silent</span><span class=\"p\">!</span> <span class=\"k\">call</span> mkdir<span class=\"p\">(</span>s:vim_tags<span class=\"p\">,</span> <span class=\"s1\">'p'</span><span class=\"p\">)</span>\n<span class=\"k\">endif</span>\n</code></pre></div><p>有了上面的设置，你平时基本感觉不到 tags 文件的生成过程了，只要文件修改过，gutentags 都在后台为你默默打点是否需要更新数据文件，你根本不用管，还会帮你：<b>setlocal tags+=...</b> 添加到局部 tags 搜索列表中。</p><p>为当前文件添加上对应的 tags 文件的路劲而不影响其他文件。得益于 Vim 8 的异步机制，你可以任意随时使用 ctags 相关功能，并且数据库都是最新的。需要注意的是，gutentags 需要靠上面定义的 project_root 里的标志，判断文件所在的工程，如果一个文件没有托管在 .git/.svn 中，gutentags 找不到工程目录的话，就不会为该野文件生成 tags，这也很合理。想要避免的话，你可以在你的野文件目录中放一个名字为 <b>.root</b> 的空白文件，主动告诉 gutentags 这里就是工程目录。</p><p>最后啰嗦两句，少用 <b>CTRL-]</b> 直接在当前窗口里跳转到定义，多使用 <b>CTRL-W ]</b> 用新窗口打开并查看光标下符号的定义，或者 <b>CTRL-W } </b>使用 preview 窗口预览光标下符号的定义。</p><p>我自己还写过不少关于 ctags 的 vimscript，例如在最下面命令行显示函数的原型而不用急着跳转，或者重复按 `ALT+;` 在 preview 窗口中轮流查看多个定义，不切走当前窗口，不会出一个很长的列表让你选择，有兴趣可以刨我的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/skywind3000/vim\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">vim dotfiles</a>。</p><p><br></p><p><b>编译运行</b></p><p>再 Vim 8 以前，编译和运行程序要么就让 vim 傻等着结束，不能做其他事情，要么切到一个新的终端下面去单独运行编译命令和执行命令，要么开个 tmux 左右切换。如今新版本的异步模式可以让这个流程更加简化，这里我们使用 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/skywind3000/asyncrun.vim\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">AsyncRun</a> 插件，简单设置下：</p><div class=\"highlight\"><pre><code class=\"language-vim\">Plug <span class=\"s1\">'skywind3000/asyncrun.vim'</span>\n\n<span class=\"c\">\" 自动打开 quickfix window ，高度为 6</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:asyncrun_open <span class=\"p\">=</span> <span class=\"m\">6</span>\n\n<span class=\"c\">\" 任务结束时候响铃提醒</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:asyncrun_bell <span class=\"p\">=</span> <span class=\"m\">1</span>\n\n<span class=\"c\">\" 设置 F10 打开/关闭 Quickfix 窗口</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>F10<span class=\"p\">&gt;</span> :<span class=\"k\">call</span> asyncrun#quickfix_toggle<span class=\"p\">(</span><span class=\"m\">6</span><span class=\"p\">)&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>该插件可以在后台运行 shell 命令，并且把结果输出到 quickfix 窗口：</p><figure><noscript>&lt;img src=\"https://pic2.zhimg.com/50/v2-b683e6b77a7808fa31e9d4cbe2177104_hd.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"460\" data-thumbnail=\"https://pic2.zhimg.com/50/v2-b683e6b77a7808fa31e9d4cbe2177104_hd.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https://pic2.zhimg.com/v2-b683e6b77a7808fa31e9d4cbe2177104_r.jpg\"&gt;</noscript><div class=\"RichText-gifPlaceholder\"><div class=\"GifPlayer is-playing\" data-size=\"normal\" data-za-detail-view-path-module=\"GifItem\"><img class=\"column-gif\" role=\"presentation\" src=\"quiver-image-url/B683E6B77A7808FA31E9D4CBE2177104.gif\" data-thumbnail=\"https://pic2.zhimg.com/50/v2-b683e6b77a7808fa31e9d4cbe2177104_hd.jpg\" data-size=\"normal\" width=\"680\" height=\"460\"></div></div></figure><p>最简单的编译单个文件，和 sublime 的默认 build system 差不多，我们定义 F9 为编译单文件:</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F9<span class=\"p\">&gt;</span> :AsyncRun gcc <span class=\"p\">-</span>Wall <span class=\"p\">-</span>O2 <span class=\"s2\">\"$(VIM_FILEPATH)\"</span> <span class=\"p\">-</span><span class=\"k\">o</span> <span class=\"s2\">\"$(VIM_FILEDIR)/$(VIM_FILENOEXT)\"</span> <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>其中 $(...) 形式的宏在执行时会被替换成实际的文件名或者文件目录，这样按 F9 就可以编译当前文件，同时按 F5 运行：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F5<span class=\"p\">&gt;</span> :AsyncRun <span class=\"p\">-</span>raw <span class=\"p\">-</span>cwd<span class=\"p\">=</span>$<span class=\"p\">(</span>VIM_FILEDIR<span class=\"p\">)</span> <span class=\"s2\">\"$(VIM_FILEDIR)/$(VIM_FILENOEXT)\"</span> <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>用双引号引起来避免文件名包含空格，“<b>-cwd=$(VIM_FILEDIR)</b>” 的意思时在文件文件的所在目录运行可执行，后面可执行使用了全路径，避免 linux 下面当前路径加 “./” 而 windows 不需要的跨平台问题。</p><p>参数 `-raw` 表示输出不用匹配错误检测模板 (errorformat) ，直接原始内容输出到 quickfix 窗口。这样你可以一边编辑一边 F9 编译，出错了可以在 quickfix 窗口中按回车直接跳转到错误的位置，编译正确就接着执行。</p><p>接下来是项目的编译，不管你直接使用 make 还是 cmake，都是对一群文件做点什么，都需要定位到文件所属项目的目录，AsyncRun 识别当前文件的项目目录方式和 gutentags相同，从文件所在目录向上递归，直到找到名为 “.git”, “.svn”, “.hg”或者 “.root”文件或者目录，如果递归到根目录还没找到，那么文件所在目录就被当作项目目录，你重新定义项目标志：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"k\">let</span> <span class=\"k\">g</span>:asyncrun_rootmarks <span class=\"p\">=</span> [<span class=\"s1\">'.svn'</span><span class=\"p\">,</span> <span class=\"s1\">'.git'</span><span class=\"p\">,</span> <span class=\"s1\">'.root'</span><span class=\"p\">,</span> <span class=\"s1\">'_darcs'</span><span class=\"p\">,</span> <span class=\"s1\">'build.xml'</span>] \n</code></pre></div><p>然后在 AsyncRun 命令行中，用 “&lt;root&gt;” 或者 “$(VIM_ROOT)”来表示项目所在路径，于是我们可以定义按 F7 编译整个项目：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F7<span class=\"p\">&gt;</span> :AsyncRun <span class=\"p\">-</span>cwd<span class=\"p\">=&lt;</span>root<span class=\"p\">&gt;</span> <span class=\"k\">make</span> <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>那么如果你有一个项目不在 svn 也不在 git 中怎么查找 <code>&lt;root&gt;</code> 呢？很简单，放一个空的 <code>.root</code> 文件到你的项目目录下就行了，前面配置过，识别名为 .root 的文件。</p><p>继续配置用 F8 运行当前项目：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F8<span class=\"p\">&gt;</span> :AsyncRun <span class=\"p\">-</span>cwd<span class=\"p\">=&lt;</span>root<span class=\"p\">&gt;</span> <span class=\"p\">-</span>raw <span class=\"k\">make</span> run <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>当然，你的 makefile 中需要定义怎么 run ，接着按 F6 执行测试：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F6<span class=\"p\">&gt;</span> :AsyncRun <span class=\"p\">-</span>cwd<span class=\"p\">=&lt;</span>root<span class=\"p\">&gt;</span> <span class=\"p\">-</span>raw <span class=\"k\">make</span> test <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>如果你使用了 cmake 的话，还可以照葫芦画瓢，定义 F4 为更新 Makefile 文件，如果不用 cmake 可以忽略：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F4<span class=\"p\">&gt;</span> :AsyncRun <span class=\"p\">-</span>cwd<span class=\"p\">=&lt;</span>root<span class=\"p\">&gt;</span> cmake . <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>由于 C/C++ 标准库的实现方式是发现在后台运行时会缓存标准输出直到程序退出，你想实时看到 printf 输出的话需要 fflush(stdout) 一下，或者程序开头关闭缓存：“setbuf(stdout, NULL);” 即可。</p><p>同时，如果你开发 C++ 程序使用 std::cout 的话，后面直接加一个 std::endl 就强制刷新缓存了，不需要弄其他。而如果你在 Windows 下使用 GVim 的话，可以弹出新的 cmd.exe 窗口来运行刚才的程序：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F5<span class=\"p\">&gt;</span> :AsyncRun <span class=\"p\">-</span>cwd<span class=\"p\">=</span>$<span class=\"p\">(</span>VIM_FILEDIR<span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"k\">mode</span><span class=\"p\">=</span><span class=\"m\">4</span> <span class=\"s2\">\"$(VIM_FILEDIR)/$(VIM_FILENOEXT)\"</span> <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span><span class=\"k\">silent</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>F8<span class=\"p\">&gt;</span> :AsyncRun <span class=\"p\">-</span>cwd<span class=\"p\">=&lt;</span>root<span class=\"p\">&gt;</span> <span class=\"p\">-</span><span class=\"k\">mode</span><span class=\"p\">=</span><span class=\"m\">4</span> <span class=\"k\">make</span> run <span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>在 Windows 下使用 -mode=4 选项可以跟 Visual Studio 执行命令行工具一样，弹出一个新的 cmd.exe窗口来运行程序或者项目，于是我们有了下面的快捷键：</p><ul><li>F4：使用 cmake 生成 Makefile </li><li>F5：单文件：运行</li><li>F6：项目：测试</li><li>F7：项目：编译</li><li>F8：项目：运行</li><li>F9：单文件：编译</li><li>F10：打开/关闭底部的 quickfix 窗口</li></ul><p>恩，编译和运行基本和 NotePad++ / GEdit 的体验差不多了。如果你重度使用 cmake 的话，你还可以写点小脚本，将 F4 和 F7 的功能合并，检测 CMakeLists.txt 文件改变的话先执行 cmake 更新一下 Makefile，然后再执行 make，否则直接执行 make，这样更自动化些。</p><p><br></p><p><b>动态检查</b></p><p>代码检查是个好东西，让你在编辑文字的同时就帮你把潜在错误标注出来，不用等到编译或者运行了才发现。我很奇怪 2018 年了，为啥网上还在到处介绍老旧的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vim-syntastic/syntastic\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">syntastic</a>，但凡见到介绍这个插件的文章基本都可以不看了。老的 syntastic 基本没法用，不能实时检查，一保存文件就运行检查器并且等待半天，所以请用实时 linting 工具 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/w0rp/ale\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">ALE</a>：</p><figure><noscript>&lt;img src=\"https://pic3.zhimg.com/50/v2-548f3afab2e0d989a6551600461d06dc_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"718\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb\" width=\"718\" data-original=\"https://pic3.zhimg.com/v2-548f3afab2e0d989a6551600461d06dc_r.jpg\"&gt;</noscript><img src=\"quiver-image-url/23E92789BD404BB3E8D5044EAAF2A056.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"718\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"718\" data-original=\"https://pic3.zhimg.com/v2-548f3afab2e0d989a6551600461d06dc_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/50/v2-548f3afab2e0d989a6551600461d06dc_hd.jpg\" height=\"475\"></figure><p>大概长这个样子，随着你不断的编辑新代码，有语法错误的地方会实时帮你标注出来，侧边会标注本行有错，光标移动过去的时候下面会显示错误原因，而具体错误的符号下面会有红色波浪线提醒。Ale 支持多种语言的各种代码分析器，就 C/C++ 而言，就支持：gcc, clang, cppcheck 以及 clang-format 等，需要另行安装并放入 PATH下面，ALE能在你修改了文本后自动调用这些 linter 来分析最新代码，然后将各种 linter 的结果进行汇总并显示再界面上。</p><p>同样，我们也需要简单配置一下：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"k\">let</span> <span class=\"k\">g</span>:ale_linters_explicit <span class=\"p\">=</span> <span class=\"m\">1</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_completion_delay <span class=\"p\">=</span> <span class=\"m\">500</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_echo_delay <span class=\"p\">=</span> <span class=\"m\">20</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_lint_delay <span class=\"p\">=</span> <span class=\"m\">500</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_echo_msg_format <span class=\"p\">=</span> <span class=\"s1\">'[%linter%] %code: %%s'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_lint_on_text_changed <span class=\"p\">=</span> <span class=\"s1\">'normal'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_lint_on_insert_leave <span class=\"p\">=</span> <span class=\"m\">1</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:airline#extensions#ale#enabled <span class=\"p\">=</span> <span class=\"m\">1</span>\n\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_c_gcc_options <span class=\"p\">=</span> <span class=\"s1\">'-Wall -O2 -std=c99'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_cpp_gcc_options <span class=\"p\">=</span> <span class=\"s1\">'-Wall -O2 -std=c++14'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_c_cppcheck_options <span class=\"p\">=</span> <span class=\"s1\">''</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ale_cpp_cppcheck_options <span class=\"p\">=</span> <span class=\"s1\">''</span>\n</code></pre></div><p>基本上就是定义了一下运行规则，信息显示格式以及几个 linter 的运行参数，其中 6，7 两行比较重要，它规定了如果 normal 模式下文字改变以及离开 insert 模式的时候运行 linter，这是相对保守的做法，如果没有的话，会导致 YouCompleteMe 的补全对话框频繁刷新。</p><p>记得设置一下各个 linter 的参数，忽略一些你觉得没问题的规则，不然错误太多没法看。默认错误和警告的风格都太难看了，你需要修改一下，比如我使用 GVim，就重新定义了警告和错误的样式，去除默认难看的红色背景，代码正文使用干净的波浪下划线表示：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"k\">let</span> <span class=\"k\">g</span>:ale_sign_error <span class=\"p\">=</span> <span class=\"s2\">\"\\ue009\\ue009\"</span>\n<span class=\"k\">hi</span><span class=\"p\">!</span> clear SpellBad\n<span class=\"k\">hi</span><span class=\"p\">!</span> clear SpellCap\n<span class=\"k\">hi</span><span class=\"p\">!</span> clear SpellRare\n<span class=\"k\">hi</span><span class=\"p\">!</span> SpellBad <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl guisp<span class=\"p\">=</span><span class=\"k\">red</span>\n<span class=\"k\">hi</span><span class=\"p\">!</span> SpellCap <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl guisp<span class=\"p\">=</span>blue\n<span class=\"k\">hi</span><span class=\"p\">!</span> SpellRare <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl guisp<span class=\"p\">=</span>magenta\n</code></pre></div><p>不同项目之间如果评测标准不一样还可以具体单独制定 linter 的参数，具体见 ALE 帮助文档了。我基本使用两个检查器：gcc 和 cppcheck，都可以在 ALE 中进行详细配置，前者主要检查有无语法错误，后者主要会给出一些编码建议，和对危险写法的警告。</p><p>我之前用 syntastic 时就用了两天就彻底删除了，而开始用 ALE 后，一用上就停不下来，头两天我还一度觉得它就是个可有可无的点缀，但是第三天它帮我找出两个潜在的 bug 的时候，我开始觉得没白安装，用上一段时间以后，让我编写 C/C++ 代码时充满了惬意的感觉。</p><p><br></p><p><b>修改比较</b></p><p>这是个小功能，在侧边栏显示一个修改状态，对比当前文本和 git/svn 仓库里的版本，在侧边栏显示修改情况，以前 Vim 做不到实时显示修改状态，如今推荐使用 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/mhinz/vim-signify\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">vim-signify</a> 来实时显示修改状态，它比 gitgutter 强，除了 git 外还支持 svn/mercurial/cvs 等十多种主流版本管理系统。</p><p>没注意到它时，你可能觉得它不存在，当你有时真的看上两眼时，你会发现这个功能很贴心。最新版 signify 还有一个命令`:SignifyDiff`，可以左右分屏对比提交前后记录，比你命令行 svn/git diff 半天直观多了。并且对我这种同时工作在 subversion 和 git 环境下的情况契合的比较好。</p><p>Signify 和前面的 ALE 都会在侧边栏显示一些标记，默认侧边栏会自动隐藏，有内容才会显示，不喜欢侧边栏时有时无的行为可设置强制显示侧边栏：“set signcolumn=yes” 。</p><p><br></p><p><b>文本对象</b></p><p>相信大家用 Vim 进行编辑时都很喜欢文本对象这个概念，diw 删除光标所在单词，ciw 改写单词，vip 选中段落等，ci\"/ci( 改写引号/括号中的内容。而编写 C/C++ 代码时我推荐大家补充几个十分有用的文本对象，可以使用 textobj-user 全家桶：</p><div class=\"highlight\"><pre><code class=\"language-vim\">Plug <span class=\"s1\">'kana/vim-textobj-user'</span>\nPlug <span class=\"s1\">'kana/vim-textobj-indent'</span>\nPlug <span class=\"s1\">'kana/vim-textobj-syntax'</span>\nPlug <span class=\"s1\">'kana/vim-textobj-function'</span><span class=\"p\">,</span> { <span class=\"s1\">'for'</span>:[<span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'cpp'</span><span class=\"p\">,</span> <span class=\"s1\">'vim'</span><span class=\"p\">,</span> <span class=\"s1\">'java'</span>] }\nPlug <span class=\"s1\">'sgur/vim-textobj-parameter'</span>\n</code></pre></div><p>它新定义的文本对象主要有：</p><ul><li>i, 和 a, ：参数对象，写代码一半在修改，现在可以用 di, 或 ci, 一次性删除/改写当前参数</li><li>ii 和 ai ：缩进对象，同一个缩进层次的代码，可以用 vii 选中，dii / cii 删除或改写</li><li>if 和 af ：函数对象，可以用 vif / dif / cif 来选中/删除/改写函数的内容</li></ul><p>最开始我不太想用额外的文本对象，一直在坚持 Vim 固有的几个默认对象，生怕手练习惯了肌肉形成记忆到远端没有环境的 vim 下形成依赖改不过来，后来我慢慢发现挺有用的，比如改写参数，以前是比较麻烦的事情，这下流畅了很多，当我发现自己编码效率得到比较大的提升时，才发现习惯依赖不重要，行云流水才是真重要。以前看到过无数次都选择性忽略的东西，有时候试试可能会有新的发现。</p><p><br></p><p><b>编辑辅助</b></p><p>大家都知道 color 文件定义了众多不同语法元素的色彩，还有一个关键因素就是语法文件本身能否识别并标记得出众多不同的内容来？语法文件对某些东西没标注，你 color 文件确定了颜色也没用。因此 Vim 下面写 C/C++ 代码，语法高亮准确丰富的话能让你编码的心情好很多，这里推荐 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/octol/vim-cpp-enhanced-highlight\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">vim-cpp-enhanced-highlight</a> 插件，提供比 Vim 自带语法文件更好的 C/C++ 语法标注，支持 标准 11/14/17。</p><p>前面编译运行时需要频繁的操作 quickfix 窗口，ale查错时也需要快速再错误间跳转（location list），就连文件比较也会用到快速跳转到上/下一个差异处，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/tpope/vim-unimpaired\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">unimpaired</a> 插件帮你定义了一系列方括号开头的快捷键，被称为官方 Vim 中丢失的快捷键。</p><p>我们好些地方用到了 quickfix / location 窗口，你在 quickfix 中回车选中一条错误的话，默认会把你当前窗口给切走，变成新文件，虽然按 CTRL+O 可以返回，但是如果不太喜欢这样切走当前文件的做法，可以设置 switchbuf，发现文件已在 Vim 中打开就跳过去，没打开过就新建窗口/标签打开，具体见帮助。</p><p>Vim最爽的地方是把所有 ALT 键映射全部留给用户了，尽量使用 Vim 的 ALT键映射，可以让冗长的快捷键缩短很多，请参考：《<a href=\"https://link.zhihu.com/?target=http%3A//www.skywind.me/blog/archives/2021\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Vim和终端软件中支持ALT映射</a>》。</p><p><br></p><p><b>代码补全</b></p><p>传统的 Vim 代码补全基本以 omni 系列补全和符号补全为主，omni 补全系统是 Vim 自带的针对不同文件类型编写不同的补全函数的基础语义补全系统，搭配 neocomplete 可以很方便的对所有补全结果（omni补全/符号补全/字典补全）进行一个合成并且自动弹出补全框，虽然赶不上 IDE 的补全，但是已经比大部分编辑器补全好用很多了。然而传统 Vim 补全还是有两个迈不过去的坎：语义补全太弱，其次是补全分析无法再后台运行，对大项目而言，某些复杂符号的补全会拖慢你的打字速度。</p><p>新一代的 Vim 补全系统，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Valloric/YouCompleteMe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">YouCompleteMe</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Shougo/deoplete.nvim\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Deoplete</a>，都支持异步补全和基于 clang 的语义补全，前者集成度高，后者扩展方便。对于 C/C++ 的话，我推荐 YCM，因为 deoplete 的 clang 补全插件不够稳定，太吃内存，并且反应比较慢，它的代码量和代码质量和 YCM完全不是一个量级的。所以 C/C++ 的补全的话，请直接使用 YCM，没有之一，而使用 YCM的话，需要进行一些简单的调教：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_add_preview_to_completeopt <span class=\"p\">=</span> <span class=\"m\">0</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_show_diagnostics_ui <span class=\"p\">=</span> <span class=\"m\">0</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_server_log_level <span class=\"p\">=</span> <span class=\"s1\">'info'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_min_num_identifier_candidate_chars <span class=\"p\">=</span> <span class=\"m\">2</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_collect_identifiers_from_comments_and_strings <span class=\"p\">=</span> <span class=\"m\">1</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_complete_in_strings<span class=\"p\">=</span><span class=\"m\">1</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_key_invoke_completion <span class=\"p\">=</span> <span class=\"s1\">'&lt;c-z&gt;'</span>\n<span class=\"k\">set</span> <span class=\"nb\">completeopt</span><span class=\"p\">=</span>menu<span class=\"p\">,</span>menuone\n\n<span class=\"nb\">noremap</span> <span class=\"p\">&lt;</span><span class=\"k\">c</span><span class=\"p\">-</span>z<span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>NOP<span class=\"p\">&gt;</span>\n\n<span class=\"k\">let</span> <span class=\"k\">g</span>:ycm_semantic_triggers <span class=\"p\">=</span>  {\n           \\ <span class=\"s1\">'c,cpp,python,java,go,erlang,perl'</span>: [<span class=\"s1\">'re!\\w{2}'</span>]<span class=\"p\">,</span>\n           \\ <span class=\"s1\">'cs,lua,javascript'</span>: [<span class=\"s1\">'re!\\w{2}'</span>]<span class=\"p\">,</span>\n           \\ }\n</code></pre></div><p>这样可以输入两个字符就自动弹出语义补全，不用等到输入句号 . 或者 -&gt; 才触发，同时关闭了预览窗口和代码诊断这些 YCM 花边功能，保持清静，对于原型预览和诊断我们后面有更好的解决方法，YCM这两项功能干扰太大。</p><p>上面这几行配置具体每行的含义，可以见：《<a href=\"https://zhuanlan.zhihu.com/p/33046090\" class=\"internal\" data-za-detail-view-id=\"1043\">YouCompleteMe 中容易忽略的配置</a>》。另外我在 Windows 下编译了一个版本，你用 Windows 的话无需下载VS编译，点击 [<a href=\"https://www.zhihu.com/question/25437050/answer/95662340\" class=\"internal\" data-za-detail-view-id=\"1043\">这里</a>]。我日常开发使用 YCM 辅助编写 C/C++, Python 和 Go 代码，基本能提供 IDE 级别的补全。</p><p><br></p><p><b>函数列表</b></p><p>不再建议使用 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/majutsushi/tagbar\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">tagbar</a>, 它会在你保存文件的时候以同步等待的方式运行 ctags （即便你没有打开 tagbar），导致vim操作变卡，特别是 windows下开了反病毒软件扫描的话，有时候保存文件卡5-6秒。2018年了，我们有更好的选择，比如使用 <span class=\"UserLink\"></span></p><div class=\"Popover\"><div id=\"Popover-69827-63904-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"Popover-69827-63904-content\"><a class=\"UserLink-link\" data-za-detail-view-element_name=\"User\" target=\"_blank\" href=\"//www.zhihu.com/people/d9bf12c9f42ee30f8aa9242cece83053\" data-za-detail-view-id=\"1045\">@Yggdroot</a></div></div> 开发的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Yggdroot/LeaderF\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">LeaderF</a> 来显示函数列表：<p></p><figure><noscript>&lt;img src=\"https://pic3.zhimg.com/50/v2-98b21c2d3ee116870d8ff551319e7d3c_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1034\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb\" width=\"1034\" data-original=\"https://pic3.zhimg.com/v2-98b21c2d3ee116870d8ff551319e7d3c_r.jpg\"&gt;</noscript><img src=\"quiver-image-url/DFE5BA3A6BB5D877B2298A4A93315AE9.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1034\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic3.zhimg.com/v2-98b21c2d3ee116870d8ff551319e7d3c_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/50/v2-98b21c2d3ee116870d8ff551319e7d3c_hd.jpg\" height=\"462\"></figure><p>全异步显示文件函数列表，不用的时候不会占用你任何屏幕空间，将 ALT+P 绑定到 “:LeaderfFunction” 这个命令上，按 ALT+P 就弹出当前文件的函数列表，然后可以进行模糊匹配搜索，还可以按 TAB 进入列表选择窗口，上下移动光标选择，按回车立马完成跳转并同时关闭列表。</p><p>Leaderf 的函数功能属于你想要它的时候它才会出来，不想要它的时候不会给你捣乱。</p><p><br></p><p><b>文件切换</b></p><p>文件/buffer模糊匹配快速切换的方式，比你打开一个对话框选择文件便捷不少，过去我们常用的 CtrlP 可以光荣下岗了，如今有更多速度更快，匹配更精准以及完美支持后台运行方式的文件模糊匹配工具。我自己用的是上面提到的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Yggdroot/LeaderF\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">LeaderF</a>，除了提供函数列表外，还支持文件，MRU，Buffer名称搜索，完美代替 CtrlP，使用时需要简单调教下：</p><div class=\"highlight\"><pre><code class=\"language-vim\"><span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_ShortcutF <span class=\"p\">=</span> <span class=\"s1\">'&lt;c-p&gt;'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_ShortcutB <span class=\"p\">=</span> <span class=\"s1\">'&lt;m-n&gt;'</span>\n<span class=\"nb\">noremap</span> <span class=\"p\">&lt;</span><span class=\"k\">c</span><span class=\"p\">-</span><span class=\"k\">n</span><span class=\"p\">&gt;</span> :LeaderfMru<span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n<span class=\"nb\">noremap</span> <span class=\"p\">&lt;</span><span class=\"k\">m</span><span class=\"p\">-</span><span class=\"k\">p</span><span class=\"p\">&gt;</span> :LeaderfFunction<span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n<span class=\"nb\">noremap</span> <span class=\"p\">&lt;</span><span class=\"k\">m</span><span class=\"p\">-</span><span class=\"k\">n</span><span class=\"p\">&gt;</span> :LeaderfBuffer<span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n<span class=\"nb\">noremap</span> <span class=\"p\">&lt;</span><span class=\"k\">m</span><span class=\"p\">-</span><span class=\"k\">m</span><span class=\"p\">&gt;</span> :LeaderfTag<span class=\"p\">&lt;</span><span class=\"k\">cr</span><span class=\"p\">&gt;</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_StlSeparator <span class=\"p\">=</span> { <span class=\"s1\">'left'</span>: <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'right'</span>: <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'font'</span>: <span class=\"s1\">''</span> }\n\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_RootMarkers <span class=\"p\">=</span> [<span class=\"s1\">'.project'</span><span class=\"p\">,</span> <span class=\"s1\">'.root'</span><span class=\"p\">,</span> <span class=\"s1\">'.svn'</span><span class=\"p\">,</span> <span class=\"s1\">'.git'</span>]\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_WorkingDirectoryMode <span class=\"p\">=</span> <span class=\"s1\">'Ac'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_WindowHeight <span class=\"p\">=</span> <span class=\"m\">0</span>.<span class=\"m\">30</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_CacheDirectory <span class=\"p\">=</span> expand<span class=\"p\">(</span><span class=\"s1\">'~/.vim/cache'</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_ShowRelativePath <span class=\"p\">=</span> <span class=\"m\">0</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_HideHelp <span class=\"p\">=</span> <span class=\"m\">1</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_StlColorscheme <span class=\"p\">=</span> <span class=\"s1\">'powerline'</span>\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_PreviewResult <span class=\"p\">=</span> {<span class=\"s1\">'Function'</span>:<span class=\"m\">0</span>}\n\n<span class=\"k\">let</span> <span class=\"k\">g</span>:Lf_NormalMap <span class=\"p\">=</span> {\n\t\\ <span class=\"s2\">\"File\"</span>:   [[<span class=\"s2\">\"&lt;ESC&gt;\"</span><span class=\"p\">,</span> <span class=\"s1\">':exec g:Lf_py \"fileExplManager.quit()\"&lt;CR&gt;'</span>]]<span class=\"p\">,</span>\n\t\\ <span class=\"s2\">\"Buffer\"</span>: [[<span class=\"s2\">\"&lt;ESC&gt;\"</span><span class=\"p\">,</span> <span class=\"s1\">':exec g:Lf_py \"bufExplManager.quit()\"&lt;CR&gt;'</span>]]<span class=\"p\">,</span>\n\t\\ <span class=\"s2\">\"Mru\"</span>:    [[<span class=\"s2\">\"&lt;ESC&gt;\"</span><span class=\"p\">,</span> <span class=\"s1\">':exec g:Lf_py \"mruExplManager.quit()\"&lt;CR&gt;'</span>]]<span class=\"p\">,</span>\n\t\\ <span class=\"s2\">\"Tag\"</span>:    [[<span class=\"s2\">\"&lt;ESC&gt;\"</span><span class=\"p\">,</span> <span class=\"s1\">':exec g:Lf_py \"tagExplManager.quit()\"&lt;CR&gt;'</span>]]<span class=\"p\">,</span>\n\t\\ <span class=\"s2\">\"Function\"</span>:    [[<span class=\"s2\">\"&lt;ESC&gt;\"</span><span class=\"p\">,</span> <span class=\"s1\">':exec g:Lf_py \"functionExplManager.quit()\"&lt;CR&gt;'</span>]]<span class=\"p\">,</span>\n\t\\ <span class=\"s2\">\"Colorscheme\"</span>:    [[<span class=\"s2\">\"&lt;ESC&gt;\"</span><span class=\"p\">,</span> <span class=\"s1\">':exec g:Lf_py \"colorschemeExplManager.quit()\"&lt;CR&gt;'</span>]]<span class=\"p\">,</span>\n\t\\ }\n</code></pre></div><p>这里定义了 CTRL+P 在当前项目目录打开文件搜索，CTRL+N 打开 MRU搜索，搜索你最近打开的文件，这两项是我用的最频繁的功能。接着 ALT+P 打开函数搜索，ALT+N 打开 Buffer 搜索：</p><figure><noscript>&lt;img src=\"https://pic1.zhimg.com/50/v2-f47e003ab026a7de6dffde13628e4a5d_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb\" width=\"1006\" data-original=\"https://pic1.zhimg.com/v2-f47e003ab026a7de6dffde13628e4a5d_r.jpg\"&gt;</noscript><img src=\"quiver-image-url/748B5383BFD7ED8DAE27A5F22F74A1D2.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-f47e003ab026a7de6dffde13628e4a5d_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-f47e003ab026a7de6dffde13628e4a5d_hd.jpg\" height=\"447\"></figure><p>LeaderF 是目前匹配效率最高的，高过 CtrlP/Fzf 不少，敲更少的字母就能把文件找出来，同时搜索很迅速，使用 Python 后台线程进行搜索匹配，还有一个 C模块可以加速匹配性能，需要手工编译下。LeaderF在模糊匹配模式下按 TAB 可以切换到匹配结果窗口用光标或者 Vim 搜索命令进一步筛选，这是 CtrlP/Fzf 不具备的，更多方便的功能见它的官方文档。</p><p>文件/MRU 模糊匹配对于熟悉的项目效率是最高的，但对于一个新的项目，通常我们都不知道它有些什么文件，那就谈不上根据文件名匹配什么了，我们需要文件浏览功能。如果你喜欢把 Vim 伪装成 NotePad++ 之类的，那你该继续使用 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/scrooloose/nerdtree\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">NERDTree</a> 进行文件浏览，但你想按照 Vim 的方式来，推荐阅读这篇文章：</p><p><a href=\"https://link.zhihu.com/?target=http%3A//vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Oil and vinegar - split windows and project drawer</a></p><p>然后像我一样开始使用 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/justinmk/vim-dirvish\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">vim-dirvish</a>，进行一些配置，比如当前文档按“-”号就能不切窗口的情况下在当前窗口直接返回当前文档所在的目录，再按一次减号就返回上一级目录，按回车进入下一级目录或者再当前窗口打开光标下的文件。进一步映射 “&lt;tab&gt;7” , “&lt;tab&gt;8” 和 “&lt;tab&gt;9” 分别用于在新的 split, vsplit 和新标签打开当前文件所在目录，这样从一个文件如手，很容易找到和该文件相关的其他项目文件。</p><p>最后一个是 C/C++ 的头文件/源文件快速切换功能，有现成的插件做这事情，比如 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vim-scripts/a.vim\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">a.vim</a>，我自己没用，因为这事情太简单，再我发现 a.vim 前我就觉得需要这个功能，然后自己两行 vim 脚本就搞定了。</p><p><br></p><p><b>参数提示</b></p><p>这个功能应人而异，有人觉得不需要，有人觉得管用。写 C/C++ 时函数忘了可以用上面的 YCM 补全，但很多时候是参数忘记了怎么办？YCM的参数提示很蛋疼，要打开个 Preview 窗口，实在是太影响我的视线了，我自己写过一些参数提醒功能，可以在最下面的命令行显示当前函数的参数，不过这是基于 tags 的，搭配前面的 gutentags，对其他语言很管用，但对 C/C++ 我们还可以使用更好的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Shougo/echodoc.vim\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">echodoc</a> 插件：</p><figure><noscript>&lt;img src=\"https://pic4.zhimg.com/50/v2-18ba5e121113f8c85e0481d8b2653762_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb\" width=\"619\" data-original=\"https://pic4.zhimg.com/v2-18ba5e121113f8c85e0481d8b2653762_r.jpg\"&gt;</noscript><img src=\"quiver-image-url/FDBA8CB752CC93C1A935B934D87CAAC7.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"619\" data-original=\"https://pic4.zhimg.com/v2-18ba5e121113f8c85e0481d8b2653762_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-18ba5e121113f8c85e0481d8b2653762_hd.jpg\" height=\"109\"></figure><p>它可以无缝的和前面的 YCM 搭配，用 libclang 给你生成参数提示，当你用 YCM 的 tab 补全了一个函数名后，只要输入左括号，下面命令行就会里面显示出该函数的参数信息，随着光标移动，下面还会高亮出来你正在处于哪个参数位置。</p><p>唯一需要设置的是使用 “set noshowmode”关闭模式提示，就是底部 ---INSERT--- 那个，我们一般都用 airline / lightline 之类的显示当前模式了，所以默认模式提示可以关闭，INSERT 模式下的命令行，完全留给 echodoc 显示参数使用。</p><p><br></p><p>-------------</p><p>2018年了，用点新方法，网上那些 Vim 开发 C/C++ 的文章真的都可以淘汰了。</p><p>更多参考：《<a href=\"https://link.zhihu.com/?target=https%3A//github.com/wsdjeg/vim-galore-zh_cn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Vim 中文版入门到精通</a>》和《<a href=\"https://link.zhihu.com/?target=https%3A//github.com/skywind3000/awesome-cheatsheets/blob/master/editors/vim.txt\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Vim 中文速查表</a>》</p><p>本文主要是针对 C/C++ 环境搭建的插件介绍，关于基本使用，欢迎参考上面这些链接。篇幅有限，这里只能谈一部分内容，对大多数人已经够了，如果你想继续深入的话，还可以慢慢折腾诸如 git 集成，帮助文档集成，调试，rtags 和 lsp 这些。</p></div></div>"
    }
  ]
}
{
  "title": "Git push 语法",
  "cells": [
    {
      "type": "text",
      "data": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\" style=\"margin: 0px 0px 20px; word-break: break-word; line-height: 1.8; color: rgb(0, 0, 0); font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><p style=\"margin: 10px auto;\"><span style=\"font-size: 18pt;\"><strong>&nbsp;Git push</strong></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 15px;\">&nbsp; &nbsp; &nbsp; &nbsp; 在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。</span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 15px;\">&nbsp; &nbsp; git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt; &nbsp;&lt;远程分支名&gt; ，例如&nbsp;git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，</span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 15px;\">&nbsp; &nbsp; 第一个master是本地分支名，第二个master是远程分支名。</span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><strong>&nbsp; &nbsp; 1.1&nbsp;<strong>git push origin master</strong></strong></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建<br></span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">&nbsp; &nbsp; &nbsp;<span style=\"font-size: 18px;\"><strong>1.2</strong>&nbsp;<strong>git push origin ：refs/for/master&nbsp;</strong></span></span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\"><span style=\"font-size: 18px;\">　　<span style=\"font-size: 15px;\">如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master</span></span></span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\"><span style=\"font-size: 18px;\"><strong>&nbsp; &nbsp; 1.3</strong></span>&nbsp;<span style=\"font-size: 18px;\"><strong>git push origin</strong></span></span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　&nbsp;如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，</span></span><span style=\"font-size: 15px; line-height: 1.5;\">将当前分支推送到origin主机的对应分支&nbsp;</span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\"><span style=\"font-size: 18px;\"><strong>　1.4&nbsp;git push</strong></span></span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><strong>　1.5 git push 的其他命令</strong></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　　　　　如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　　　（2） git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　　　（3） git push --force origin git push</span></span><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　　　（4） git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</span></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><strong>　1.6 关于 refs/for</strong></span></p><p style=\"margin: 10px auto;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 15px;\">　　// refs/for 的意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的，而refs/heads 不需要</span></span></p></div><div id=\"MySignature\" style=\"margin: 0px; color: rgb(0, 0, 0); font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">学习无他法，唯有持之以恒</div>"
    }
  ]
}
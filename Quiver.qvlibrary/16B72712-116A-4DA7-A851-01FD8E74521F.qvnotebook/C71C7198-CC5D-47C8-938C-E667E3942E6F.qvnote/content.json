{
  "title": "Git中三种文件状态及其转换",
  "cells": [
    {
      "type": "text",
      "data": "<div class=\"blog_title\" style=\"margin-bottom: 15px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 12px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><h3 style=\"font-size: 16px; line-height: 1.5em; margin: 0px 0px 0.5em; padding: 10px 0px 0px; color: black;\"><a href=\"http://phplaber.iteye.com/blog/1699926\" style=\"color: black;\">Git中三种文件状态及其转换</a><span class=\"actions\" style=\"font-style: italic;\"></span></h3><ul class=\"blog_categories\" style=\"margin: 0px; padding: 0px; list-style-type: none;\"><strong>博客分类：</strong>&nbsp;<li style=\"margin: 0px 5px 0px 0px; padding: 0px; list-style-type: none; display: inline;\"><a href=\"http://phplaber.iteye.com/category/251817\" style=\"color: black;\">Git</a></li></ul><div class=\"news_tag\" style=\"clear: both; margin: 10px 0px 5px; line-height: 20px;\"><a href=\"http://www.iteye.com/blogs/tag/Git\" style=\"color: rgb(255, 255, 255); text-decoration: none; display: inline-block; margin: 0px 5px 5px 0px; padding: 0px 10px; background-color: rgb(170, 181, 195); border-radius: 10px;\">Git</a><a href=\"http://www.iteye.com/blogs/tag/git%20status\" style=\"color: rgb(255, 255, 255); text-decoration: none; display: inline-block; margin: 0px 5px 5px 0px; padding: 0px 10px; background-color: rgb(170, 181, 195); border-radius: 10px;\">git status</a>&nbsp;</div></div><div id=\"blog_content\" class=\"blog_content\" style=\"font-size: 14px; line-height: 1.8em; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><p style=\"margin: 0px; padding: 0px;\">Git作为一种版本控制解决方案，由于其具有的分布式特性，正被越来越多的用户熟知，一些有名的开源项目，如：Linux kernel，CakePHP，Ruby on Rails等，都在使用Git进行版本管理。</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">在Git中，文件状态是一个非常重要的概念，不同的状态对应不同的操作。因此，要想熟练掌握Git的用法，需要了解Git的几种文件状态。</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">为了说明的方便，现在初始化一个项目，也就是将项目所在目录纳入Git的管理之下。假设项目目录为hello_world，初始化之后，在目录下新建README.txt文件，接着，使用“git status”查看文件状态，如图：</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\"><img height=\"171\" width=\"638\" alt=\"\" src=\"quiver-image-url/143E240A85FFD2B502EB27D3052F65FB.png\" style=\"border: 0px; vertical-align: middle;\"></p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">可以看到，Git友好的标示出README.txt为“Untracked files”，并且提示使用“git add &lt;file&gt;...”的命令将文件包含到待提交清单中。按照提示，使用“git add README.txt”命令，然后，使用“git status”查看文件状态，如图：</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\"><img height=\"168\" width=\"639\" alt=\"\" src=\"quiver-image-url/3D7E03C2D7F30291FF4D3F2A04505E67.png\" style=\"border: 0px; vertical-align: middle;\"></p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">文件README.txt状态变成了“Changes to be committed”，也就是说README.txt在暂存区域生成了快照，等待被提交。正如Git所提示的那样，通过“git rm --cached README.txt”命令，可以将文件状态还原为未暂存状态，即回到“Untracked files”文件状态。现在，README.txt已经可以被提交到git目录中了，但是暂时不提交。打开README.txt，向其中加些内容，保存之后，用“git status”查看，返回如图信息：</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\"><img height=\"246\" width=\"639\" alt=\"\" src=\"quiver-image-url/FD6437EBE7ED13102C8B1AAA81A17A16.png\" style=\"border: 0px; vertical-align: middle;\"></p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">可以看到，除了之前的“Changes to be committed”状态，现在又多了一条“Changes not staged for commit”状态，表明文件已经修改，但是还没有放入暂存区域，也就是没生成快照。如果现在进行commit操作，只是将修改之前的文件快照提交到了git目录，一定记住：只有暂存区域的文件（即：文件状态为“Changes to be committed”）才会被提交。正如提示，通过“git add README.txt”命令将已修改文件更新到暂存区域中，如果想撤销修改，可以使用“git checkout -- README.txt”命令。</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">正如上文所说，Git在未进行commit操作之前，存在三种状态：Untracked files，Changes not staged for commit及Changes to be committed，每种状态之间可以随意进行互相转换。了解这三种状态各自所对应的不同情况，能够帮助你方便有效的使用Git来管理项目。</p></div>"
    }
  ]
}
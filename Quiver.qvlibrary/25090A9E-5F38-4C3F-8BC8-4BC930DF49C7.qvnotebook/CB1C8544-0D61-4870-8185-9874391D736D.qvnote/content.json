{
  "title": "CMake交叉编译配置 - Ricky.K",
  "cells": [
    {
      "type": "text",
      "data": "<embed id=\"xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd\" type=\"application/thunder_download_plugin\" height=\"0\" width=\"0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em;\">很多时候，我们在开发的时候是面对嵌入式平台，因此由于资源的限制需要用到相关的交叉编译。即在你host宿主机上要生成target目标机的程序。里面牵扯到相关头文件的切换和编译器的选择以及环境变量的改变等，我今天仅仅简单介绍下相关CMake在面对交叉编译的时候，需要做的一些准备工作。</span><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">CMake给交叉编译预留了一个很好的变量即CMAKE_TOOLCHAIN_FILE,它定义了一个文件的路径，这个文件即toolChain,里面set了一系列你需要改变的变量和属性，包括C_COMPILER,CXX_COMPILER,如果用Qt的话需要更改QT_QMAKE_EXECUTABLE以及如果用BOOST的话需要更改的BOOST_ROOT(具体查看相关Findxxx.cmake里面指定的路径)。CMake为了不让用户每次交叉编译都要重新输入这些命令，因此它带来toolChain机制，简而言之就是一个cmake脚本，内嵌了你需要改变以及需要set的所有交叉环境的设置。</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">这里面也牵扯了一些相关的变量设置,在这里简单介绍下几个比较重要的</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">1.CMAKE_SYSTEM_NAME: 即你目标机target所在的操作系统名称，比如ARM或者Linux你就需要写\"Linux\",如果Windows平台你就写\"Windows\",如果你的嵌入式平台没有相关OS你即需要写成\"Generic\",只有当CMAKE_SYSTEM_NAME这个变量被设置了，CMake才认为此时正在交叉编译，它会额外设置一个变量CMAKE_CROSSCOMPILING为TRUE.</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">2. CMAKE_C_COMPILER: 顾名思义，即C语言编译器，这里可以将变量设置成完整路径或者文件名，设置成完整路径有一个好处就是CMake会去这个路径下去寻找编译相关的其他工具比如linker,binutils等，如果你写的文件名带有arm-elf等等前缀，CMake会识别到并且去寻找相关的交叉编译器。</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">3. CMAKE_CXX_COMPILER: 同上，此时代表的是C++编译器。</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">4. CMAKE_FIND_ROOT_PATH: 代表了一系列的相关文件夹路径的根路径的变更，比如你设置了/opt/arm/,所有的Find_xxx.cmake都会优先根据这个路径下的/usr/lib,/lib等进行查找，然后才会去你自己的/usr/lib和/lib进行查找，如果你有一些库是不被包含在/opt/arm里面的，你也可以显示指定多个值给CMAKE_FIND_ROOT_PATH,比如</p><pre class=\"prettyprint sql\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; background-color: rgb(246, 246, 246); border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto;\"><span class=\"operator\"><span class=\"keyword\" style=\"font-weight: bold;\">set</span>(CMAKE_FIND_ROOT_PATH /opt/arm /opt/inst)</span></pre><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">5.&nbsp; CMAKE_FIND_ROOT_PATH_MODE_PROGRAM: 对FIND_PROGRAM()起作用，有三种取值，NEVER,ONLY,BOTH,第一个表示不在你CMAKE_FIND_ROOT_PATH下进行查找，第二个表示只在这个路径下查找，第三个表示先查找这个路径，再查找全局路径，对于这个变量来说，一般都是调用宿主机的程序，所以一般都设置成NEVER</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">6. CMAKE_FIND_ROOT_PATH_MODE_LIBRARY: 对FIND_LIBRARY()起作用，表示在链接的时候的库的相关选项，因此这里需要设置成ONLY来保证我们的库是在交叉环境中找的.</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">7. CMAKE_FIND_ROOT_PATH_MODE_INCLUDE: 对FIND_PATH()和FIND_FILE()起作用，一般来说也是ONLY,如果你想改变，一般也是在相关的FIND命令中增加option来改变局部设置，有NO_CMAKE_FIND_ROOT_PATH,ONLY_CMAKE_FIND_ROOT_PATH,BOTH_CMAKE_FIND_ROOT_PATH</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">8. BOOST_ROOT： 对于需要boost库的用户来说，相关的boost库路径配置也需要设置，因此这里的路径即ARM下的boost路径，里面有include和lib。</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">9. QT_QMAKE_EXECUTABLE: 对于Qt用户来说，需要更改相关的qmake命令切换成嵌入式版本，因此这里需要指定成相应的qmake路径（指定到qmake本身）</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">下面贴上相关demo,让同学可以更清晰的看到相应配置。</p><pre class=\"prettyprint sql\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; background-color: rgb(246, 246, 246); border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto;\"><span style=\"color: rgb(0, 0, 0);\"># this is required\n<span class=\"operator\"><span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(CMAKE_SYSTEM_NAME Linux)\n\n# specify the <span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">cross</span> compiler\n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(CMAKE_C_COMPILER   </span></span><span class=\"operator\">/opt/arm/usr/bin/ppc_74xx-<span style=\"color: rgb(0, 0, 255);\">gcc</span><span style=\"color: rgb(0, 0, 0);\">)\n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(CMAKE_CXX_COMPILER </span>/opt/arm/usr/bin/ppc_74xx-g++<span style=\"color: rgb(0, 0, 0);\">)\n\n# <span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">where</span> <span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">is</span> the target environment \n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(CMAKE_FIND_ROOT_PATH  </span>/opt/arm/ppc_74xx /home/rickk/<span style=\"color: rgb(0, 0, 0);\">arm_inst)\n\n# search </span><span style=\"color: rgb(0, 0, 255);\"><span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">for</span></span> programs <span style=\"color: rgb(0, 0, 255);\"><span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">in</span></span><span style=\"color: rgb(0, 0, 0);\"> the build host directories (<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">not</span> necessary)\n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n# </span><span style=\"color: rgb(0, 0, 255);\"><span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">for</span></span> libraries <span class=\"keyword\" style=\"font-weight: bold;\">and</span> headers <span style=\"color: rgb(0, 0, 255);\"><span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">in</span></span><span style=\"color: rgb(0, 0, 0);\"> the target directories\n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY <span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">ONLY</span>)\n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE <span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">ONLY</span>)\n\n# configure Boost <span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">and</span> Qt\n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(QT_QMAKE_EXECUTABLE </span>/opt/qt-embedded/<span style=\"color: rgb(0, 0, 0);\">qmake)\n<span class=\"keyword\" style=\"color: rgb(51, 51, 51); font-weight: bold;\">SET</span>(BOOST_ROOT </span>/opt/boost_arm)</span></pre><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">这样就完成了相关toolChain的编写，之后，你可以灵活的选择到底采用宿主机版本还是开发机版本，之间的区别仅仅是一条-DCMAKE_TOOLCHAIN_FILE=./toolChain.cmake，更爽的是，如果你有很多程序需要做转移，但目标平台是同一个，你仅仅需要写一份toolChain放在一个地方，就可以给所有工程使用。</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">CMake交叉编译配置就介绍到这，转移之间我来博客园也2个多月了，感受颇多，希望你会喜欢这篇文章 : ) 并且给我一点鼓励。</p><p style=\"margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.200000762939453px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif;\">参考链接：&nbsp;<a href=\"http://www.cmake.org/Wiki/CMake_Cross_Compiling\">http://www.cmake.org/Wiki/CMake_Cross_Compiling</a></p>"
    }
  ]
}
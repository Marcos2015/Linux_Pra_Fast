{
  "title": "细说Reactor模式",
  "cells": [
    {
      "type": "text",
      "data": "<blockquote style=\"box-sizing: border-box; outline: 0px; padding: 16px; margin-bottom: 24px; border-left-width: 8px; border-left-color: rgb(221, 223, 228); background-color: rgb(238, 240, 244); overflow: auto; word-wrap: normal; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\"><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-break: break-all;\">&nbsp; 今天在看书的时候看到了一个新的设计模式——Reactor模式，这个模式是出现在NIO中，至于这到底是个什么模式，今天我们来细说一下。</p></blockquote><h1 id=\"一是什么\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t0\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>一、是什么</h1><h2 id=\"1概念\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t1\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>1、概念</h2><blockquote style=\"box-sizing: border-box; outline: 0px; padding: 16px; margin-bottom: 24px; border-left-width: 8px; border-left-color: rgb(221, 223, 228); background-color: rgb(238, 240, 244); overflow: auto; word-wrap: normal; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\"><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reactor设计模式，是一种基于事件驱动的设计模式。Reactor框架是ACE各个框架中最基础的一个框架，其他框架都或多或少地用到了Reactor框架。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在事件驱动的应用中，将一个或多个客户的服务请求分离（demultiplex）和调度（dispatch）给应用程序。在事件驱动的应用中，同步地、有序地处理同时接收的多个服务请求。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reactor模式与外观模式有点像。不过，观察者模式与单个事件源关联，而反应器模式则与多个事件源关联 。当一个主体发生改变时，所有依属体都得到通知。</p></blockquote><h2 id=\"2优点\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t2\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>2、优点</h2><blockquote style=\"box-sizing: border-box; outline: 0px; padding: 16px; margin-bottom: 24px; border-left-width: 8px; border-left-color: rgb(221, 223, 228); background-color: rgb(238, 240, 244); overflow: auto; word-wrap: normal; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\"><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1）响应快，不必为单个同步时间所阻塞，虽然Reactor本身依然是同步的；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2）编程相对简单，可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3）可扩展性，可以方便的通过增加Reactor实例个数来充分利用CPU资源；&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4）可复用性，reactor框架本身与具体事件处理逻辑无关，具有很高的复用性；</p></blockquote><h2 id=\"3缺点\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t3\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>3、缺点</h2><blockquote style=\"box-sizing: border-box; outline: 0px; padding: 16px; margin-bottom: 24px; border-left-width: 8px; border-left-color: rgb(221, 223, 228); background-color: rgb(238, 240, 244); overflow: auto; word-wrap: normal; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\"><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）相比传统的简单模型，Reactor增加了一定的复杂性，因而有一定的门槛，并且不易于调试。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）Reactor模式需要底层的Synchronous Event Demultiplexer支持，比如Java中的Selector支持，操作系统的select系统调用支持，如果要自己实现Synchronous Event Demultiplexer可能不会有那么高效。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3） Reactor模式在IO读写数据时还是在同一个线程中实现的，即使使用多个Reactor机制的情况下，那些共享一个Reactor的Channel如果出现一个长时间的数据读写，会影响这个Reactor中其他Channel的相应时间，比如在大文件传输时，IO操作就会影响其他Client的相应时间，因而对这种操作，使用传统的Thread-Per-Connection或许是一个更好的选择，或则此时使用Proactor模式。</p></blockquote><h1 id=\"二架构模式\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t4\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>二、架构模式</h1><h2 id=\"1架构图\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t5\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>1、架构图</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><img src=\"quiver-image-url/B34F7835253B0761384A70EF5C08AB32.png\" alt=\"这里写图片描述\" title=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 24px 0px; word-break: break-all; cursor: zoom-in;\" width=\"522\" height=\"321\"></p><h2 id=\"2构成\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t6\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>2、构成</h2><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Handles ：表示操作系统管理的资源，我们可以理解为fd。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Synchronous Event Demultiplexer ：同步事件分离器，阻塞等待Handles中的事件发生。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Initiation Dispatcher ：初始分派器，作用为添加Event handler（事件处理器）、删除Event handler以及分派事件给Event handler。也就是说，Synchronous Event Demultiplexer负责等待新事件发生，事件发生时通知Initiation Dispatcher，然后Initiation Dispatcher调用event handler处理事件。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Event Handler ：事件处理器的接口</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Concrete Event Handler ：事件处理器的实际实现，而且绑定了一个Handle。因为在实际情况中，我们往往不止一种事件处理器，因此这里将事件处理器接口和实现分开，与C++、Java这些高级语言中的多态类似。</p><h2 id=\"3模块交互\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t7\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>3、模块交互</h2><blockquote style=\"box-sizing: border-box; outline: 0px; padding: 16px; margin-bottom: 24px; border-left-width: 8px; border-left-color: rgb(221, 223, 228); background-color: rgb(238, 240, 244); overflow: auto; word-wrap: normal; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\"><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）我们注册Concrete Event Handler到Initiation Dispatcher中。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）Initiation Dispatcher调用每个Event Handler的get_handle接口获取其绑定的Handle。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3）Initiation Dispatcher调用handle_events开始事件处理循环。在这里，Initiation Dispatcher会将步骤2获取的所有Handle都收集起来，使用Synchronous Event Demultiplexer来等待这些Handle的事件发生。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4）当某个（或某几个）Handle的事件发生时，Synchronous Event Demultiplexer通知Initiation Dispatcher。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5）Initiation Dispatcher根据发生事件的Handle找出所对应的Handler。&nbsp;<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6）Initiation Dispatcher调用Handler的handle_event方法处理事件。</p></blockquote><h1 id=\"三代码注释\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t8\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>三、代码注释</h1><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; color: rgb(0, 0, 0); word-break: break-all; background-color: rgb(246, 248, 250); border: none; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><code class=\"hljs java has-numbering\" style=\"box-sizing: border-box; outline: 0px; display: block; color: rgb(0, 0, 0); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; background-color: rgb(246, 248, 250); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-x: auto; word-wrap: normal; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">package</span> com.linxcool.reactor;  \n\n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.io.IOException;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.net.InetAddress;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.net.InetSocketAddress;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.channels.SelectionKey;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.channels.Selector;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.channels.ServerSocketChannel;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.util.Iterator;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.util.Set;  \n\n<span class=\"hljs-javadoc\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">/** \n * 反应器模式 \n * 用于解决多用户访问并发问题 \n *  \n * 举个例子：餐厅服务问题 \n *  \n * 传统线程池做法：来一个客人(请求)去一个服务员(线程) \n * 反应器模式做法：当客人点菜的时候，服务员就可以去招呼其他客人了，等客人点好了菜，直接招呼一声“服务员” \n *  \n *<span class=\"hljs-javadoctag\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\"> @author</span> linxcool \n */</span>  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-class\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">class</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">Reactor</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">implements</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">Runnable</span>{</span>  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">final</span> Selector selector;  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">final</span> ServerSocketChannel serverSocketChannel;  \n\n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">Reactor</span>(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">int</span> port) <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">throws</span> IOException{  \n        selector=Selector.open();  \n        serverSocketChannel=ServerSocketChannel.open();  \n        InetSocketAddress inetSocketAddress=<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">new</span> InetSocketAddress(InetAddress.getLocalHost(),port);  \n        serverSocketChannel.socket().bind(inetSocketAddress);  \n        serverSocketChannel.configureBlocking(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">false</span>);  \n\n        <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//向selector注册该channel    </span>\n        SelectionKey selectionKey=serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);  \n\n        <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//利用selectionKey的attache功能绑定Acceptor 如果有事情，触发Acceptor   </span>\n        selectionKey.attach(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">new</span> Acceptor(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">this</span>));  \n    }  \n\n    <span class=\"hljs-annotation\" style=\"box-sizing: border-box; outline: 0px; color: rgb(155, 133, 157); word-break: break-all;\">@Override</span>  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">void</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">run</span>() {  \n        <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">try</span> {  \n            <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">while</span>(!Thread.interrupted()){  \n                selector.select();  \n                Set&lt;SelectionKey&gt; selectionKeys= selector.selectedKeys();  \n                Iterator&lt;SelectionKey&gt; it=selectionKeys.iterator();  \n                <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//Selector如果发现channel有OP_ACCEPT或READ事件发生，下列遍历就会进行。  </span>\n                <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">while</span>(it.hasNext()){  \n                    <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//来一个事件 第一次触发一个accepter线程    </span>\n                    <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//以后触发SocketReadHandler  </span>\n                    SelectionKey selectionKey=it.next();  \n                    dispatch(selectionKey);  \n                    selectionKeys.clear();  \n                }  \n            }  \n        } <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">catch</span> (IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n\n    <span class=\"hljs-javadoc\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">/** \n     * 运行Acceptor或SocketReadHandler \n     *<span class=\"hljs-javadoctag\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\"> @param</span> key \n     */</span>  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">void</span> dispatch(SelectionKey key) {  \n        Runnable r = (Runnable)(key.attachment());    \n        <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">if</span> (r != <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">null</span>){    \n            r.run();  \n        }    \n    }    \n\n}  </code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 0px; margin: 0px; list-style: none; word-break: break-all; position: absolute; width: 48px; background-color: rgb(238, 240, 244); top: 0px; left: 0px; text-align: right;\"><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">1</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">2</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">3</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">4</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">5</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">6</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">7</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">8</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">9</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">10</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">11</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">12</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">13</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">14</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">15</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">16</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">17</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">18</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">19</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">20</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">21</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">22</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">23</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">24</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">25</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">26</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">27</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">28</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">29</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">30</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">31</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">32</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">33</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">34</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">35</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">36</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">37</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">38</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">39</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">40</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">41</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">42</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">43</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">44</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">45</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">46</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">47</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">48</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">49</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">50</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">51</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">52</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">53</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">54</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">55</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">56</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">57</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">58</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">59</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">60</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">61</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">62</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">63</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">64</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">65</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">66</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">67</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">68</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">69</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">70</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">71</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">72</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">73</li></ul></pre><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; color: rgb(0, 0, 0); word-break: break-all; background-color: rgb(246, 248, 250); border: none; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><code class=\"hljs java has-numbering\" style=\"box-sizing: border-box; outline: 0px; display: block; color: rgb(0, 0, 0); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; background-color: rgb(246, 248, 250); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-x: auto; word-wrap: normal; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">package</span> com.linxcool.reactor;  \n\n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.io.IOException;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.channels.SocketChannel;  \n\n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-class\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">class</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">Acceptor</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">implements</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">Runnable</span>{</span>  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">private</span> Reactor reactor;  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">Acceptor</span>(Reactor reactor){  \n        <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">this</span>.reactor=reactor;  \n    }  \n    <span class=\"hljs-annotation\" style=\"box-sizing: border-box; outline: 0px; color: rgb(155, 133, 157); word-break: break-all;\">@Override</span>  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">void</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">run</span>() {  \n        <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">try</span> {  \n            SocketChannel socketChannel=reactor.serverSocketChannel.accept();  \n            <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">if</span>(socketChannel!=<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">null</span>)<span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//调用Handler来处理channel  </span>\n                <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">new</span> SocketReadHandler(reactor.selector, socketChannel);  \n        } <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">catch</span> (IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  </code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 0px; margin: 0px; list-style: none; word-break: break-all; position: absolute; width: 48px; background-color: rgb(238, 240, 244); top: 0px; left: 0px; text-align: right;\"><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">1</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">2</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">3</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">4</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">5</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">6</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">7</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">8</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">9</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">10</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">11</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">12</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">13</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">14</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">15</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">16</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">17</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">18</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">19</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">20</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">21</li></ul></pre><pre class=\"prettyprint\" name=\"code\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 16px 4px 56px; margin-top: 0px; margin-bottom: 24px; position: relative; overflow-y: hidden; overflow-x: auto; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; color: rgb(0, 0, 0); word-break: break-all; background-color: rgb(246, 248, 250); border: none; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><code class=\"hljs java has-numbering\" style=\"box-sizing: border-box; outline: 0px; display: block; color: rgb(0, 0, 0); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 22px; background-color: rgb(246, 248, 250); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-x: auto; word-wrap: normal; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">package</span> com.linxcool.reactor;  \n\n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.io.IOException;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.ByteBuffer;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.channels.SelectionKey;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.channels.Selector;  \n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">import</span> java.nio.channels.SocketChannel;  \n\n<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-class\" style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">class</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">SocketReadHandler</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">implements</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">Runnable</span>{</span>  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">private</span> SocketChannel socketChannel;  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">SocketReadHandler</span>(Selector selector,SocketChannel socketChannel) <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">throws</span> IOException{  \n        <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">this</span>.socketChannel=socketChannel;  \n        socketChannel.configureBlocking(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">false</span>);  \n\n        SelectionKey selectionKey=socketChannel.register(selector, <span class=\"hljs-number\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">0</span>);  \n\n        <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//将SelectionKey绑定为本Handler 下一步有事件触发时，将调用本类的run方法。    </span>\n        <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//参看dispatch(SelectionKey key)    </span>\n        selectionKey.attach(<span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">this</span>);  \n\n        <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//同时将SelectionKey标记为可读，以便读取。    </span>\n        selectionKey.interestOps(SelectionKey.OP_READ);    \n        selector.wakeup();  \n    }  \n\n    <span class=\"hljs-javadoc\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">/** \n     * 处理读取数据 \n     */</span>  \n    <span class=\"hljs-annotation\" style=\"box-sizing: border-box; outline: 0px; color: rgb(155, 133, 157); word-break: break-all;\">@Override</span>  \n    <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">public</span> <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">void</span> <span class=\"hljs-title\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">run</span>() {  \n        ByteBuffer inputBuffer=ByteBuffer.allocate(<span class=\"hljs-number\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">1024</span>);  \n        inputBuffer.clear();  \n        <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">try</span> {  \n            socketChannel.read(inputBuffer);  \n            <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//激活线程池 处理这些request  </span>\n            <span class=\"hljs-comment\" style=\"box-sizing: border-box; outline: 0px; color: rgb(136, 0, 0); word-break: break-all;\">//requestHandle(new Request(socket,btt));   </span>\n        } <span class=\"hljs-keyword\" style=\"box-sizing: border-box; outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">catch</span> (IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  </code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; outline: 0px; padding: 8px 0px; margin: 0px; list-style: none; word-break: break-all; position: absolute; width: 48px; background-color: rgb(238, 240, 244); top: 0px; left: 0px; text-align: right;\"><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">1</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">2</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">3</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">4</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">5</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">6</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">7</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">8</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">9</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">10</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">11</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">12</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">13</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">14</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">15</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">16</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">17</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">18</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">19</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">20</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">21</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">22</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">23</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">24</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">25</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">26</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">27</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">28</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">29</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">30</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">31</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">32</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">33</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">34</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">35</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">36</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">37</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">38</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">39</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">40</li><li style=\"box-sizing: border-box; outline: 0px; padding: 0px 8px; margin: 0px; list-style: none; word-break: break-all; color: rgb(153, 153, 153);\">41</li></ul></pre><h2 id=\"总结\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><a name=\"t9\" style=\"box-sizing: border-box; outline: 0px; color: rgb(78, 161, 219); cursor: pointer; word-break: break-all;\"></a>总结：</h2><blockquote style=\"box-sizing: border-box; outline: 0px; padding: 16px; margin-bottom: 24px; border-left-width: 8px; border-left-color: rgb(221, 223, 228); background-color: rgb(238, 240, 244); overflow: auto; word-wrap: normal; word-break: break-all; color: rgb(51, 51, 51); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\"><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reactor模式是javaNIO非堵塞技术的实现原理，我们不仅要知道其原理流程，还要知道其代码实现，当然这个reactor模式不仅仅在NIO中实现，而且在redies等其他地方也出现过，说明这个模式还是比较实用的，尤其是在多线程高并发的情况下使用。</p></blockquote>"
    }
  ]
}
{
  "title": "reactor和proactor模式",
  "cells": [
    {
      "type": "text",
      "data": "<article style=\"box-sizing: inherit; outline: 0px; position: relative; padding-top: 16px; color: rgb(51, 51, 51); font-family: &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><div id=\"article_content\" class=\"article_content csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\" style=\"box-sizing: inherit; outline: 0px; padding: 0px; margin: 0px; word-break: break-all;\"><div class=\"htmledit_views\" style=\"box-sizing: inherit; outline: 0px; padding: 0px; margin: 0px; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; word-break: break-all;\"><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">首先分享一下，我在网上看到的两篇不错的文章：正是这两篇文章才理解了reactor和proactor模式;</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;</span><a href=\"http://daimojingdeyu.iteye.com/blog/828696\" target=\"_blank\" style=\"box-sizing: border-box; outline: 0px; color: rgb(103, 149, 181); text-decoration: none; cursor: pointer; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">Reactor模式，或者叫反应器模式</span></a></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><a href=\"http://xmuzyq.iteye.com/blog/783218\" target=\"_blank\" style=\"box-sizing: border-box; outline: 0px; color: rgb(103, 149, 181); text-decoration: none; cursor: pointer; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">高性能IO设计的Reactor和Proactor模式</span></a></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;首先就第一篇《Reactor模式，或者叫反应器模式》做一下笔记：</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">刚开店做生意，老板为了给顾客一个美好的印象，给顾客最好的服务，一对一:</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><img src=\"quiver-image-url/0BAE791F3931C6561A336AFD73A940A2.png\" alt=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 0px; word-break: break-all; cursor: zoom-in;\" width=\"399\" height=\"317\"></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">随着经营的生意越来越好，顾客多了，不能服务员也多吧，那样得支出的成本也太大了，要是一下子来个1000个顾客，难道老板还得养活1000个服务员，没办法，得改变这种服务模式，但又不能让顾客感到这里的服务下降了，怎么办呢？</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><img src=\"quiver-image-url/28F434B8285B0894C4358CEACDCF0AD1.png\" alt=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 0px; word-break: break-all; cursor: zoom-in;\" width=\"422\" height=\"230\"></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">改革以后，有没有觉得和我们平时去大排档啊，街边小吃店的服务模式很相似是不是，</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">为什么不说和酒店服务很像，其实还真不像，一般XXX星级的饭店的服务，还真是上一种经营模式，为什么他们要这样呢，</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">因为，他们是高富帅啊，顾客消费也高，自然老板的收入也高，所以老板也乐子不疲啊。我们是屌丝，请客都只是去个大排档就好了。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">改革后的模式就是reactor模式，顾客通过呼叫服务员（event事件）通知服务员，菜单写好了，服务员就会把菜单交给厨师（事件处理器），厨师就会去做菜了。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">现在知道reactor模式的由来了吧，知道一个事情的始末会让我们更好的理解它。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">下面对第二篇《高性能IO设计的Reactor和Proactor模式》做一下笔记：</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">这里主要是讲reactor模式和proactor模式的区别：其实就是对数据处理方式变了导致监听事件方式也转变了。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">当然，如果还是以第一篇那样以饭店的经营模式来讲解的话，proactor模式应该是这样的：</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">我们知道每一个饭店都有自己的招牌菜去吸引顾客。当然，其实这道菜你也会做，只是别人做的比你更好，更美味。有一天，一群高富帅来了这家大拍档：</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"><img src=\"quiver-image-url/D39FBB1CAC396C2F67F5359436E85D4A.png\" alt=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 0px; word-break: break-all; cursor: zoom-in;\" width=\"540\" height=\"300\"></span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">老板就是老板，人面广啊，自家厨师不会做，可以让更专业的人去做，省时省事省心啊！</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">其实这里我们都能看出reactor模式和proactor模式的一点点区别了吧！只是还不了解具体的细节。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">第二篇《性能IO设计的Reactor和Proactor模式》就是干这个事的，给我们介绍具体细节和区别，我也是读了好几遍，慢慢画个流程图才理解了啊。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">其实说到底就是一句广告语：把事情交给更专业的人，你会更开心。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">好吧，以下是copy过来，做了少少修改的：<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">转换为自己的理解</span>。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在高性能的I/O设计中，有两个比较著名的模式Reactor和Proactor模式，其中<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">Reactor模式用于同步I/O</span>，而<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">Proactor运用于异步I/O操作。<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">在比较这两个模式之前，我们首先的搞明白几个概念，什么是阻塞和非阻塞，什么是同步和异步；</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 同步和异步是针对<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">应用程序和内核</span>的交互而言的；</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 同步指的是用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪，</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;异步是指用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知。</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\"></span>&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 阻塞和非阻塞是针对于进程在<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">访问数据</span>的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式；</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;阻塞方式下读取或者写入函数将一直等待，</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 非阻塞方式下，读取或者写入函数会立即返回一个状态值。<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></span></p><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></span><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一般来说I/O模型可以分为：同步阻塞，同步非阻塞，异步阻塞，异步非阻塞IO<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">同步阻塞IO：<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">在此种方式下，用户进程在发起一个IO操作以后，必须等待IO操作的完成，只有当真正完成了IO操作以后，用户进程才能运行。JAVA传统的IO模型属于此种方式！<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">同步非阻塞IO:<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">在此种方式下，用户进程发起一个IO操作以后边可返回做其它事情，但是用户进程需要时不时的询问IO操作是否就绪，这就要求用户进程不停的去询问，从而引入不必要的CPU资源浪费。其中目前JAVA的NIO就属于同步非阻塞IO。<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">异步阻塞IO：<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">此种方式下是指应用发起一个IO操作以后，不等待内核IO操作的完成，等内核完成IO操作以后会通知应用程序，这其实就是同步和异步最关键的区别，同步必须等待或者主动的去询问IO是否完成，那么为什么说是阻塞的呢？因为此时是通过select系统调用来完成的，而select函数本身的实现方式是阻塞的，而采用select函数有个好处就是它可以同时监听多个文件句柄，从而提高系统的并发性！<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">异步非阻塞IO:<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></span><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">在此种模式下，用户进程只需要发起一个IO操作然后立即返回，等IO操作真正的完成以后，应用程序会得到IO操作完成的通知，此时用户进程只需要对数据进行处理就好了，不需要进行实际的IO读写操作，因为真正的IO读取或者写入操作已经由内核完成了。目前Java中还没有支持此种IO模型。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">搞清楚了以上概念以后，我们再回过头来看看，Reactor模式和Proactor模式。<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">首先来看看<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">Reactor模式，</span>Reactor模式应用于同步I/O的场景。我们以读操作为例来看看Reactor中的具体步骤：<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">读取操作：<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">1. 应用程序注册读就需事件和相关联的事件处理器<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">2. 事件分离器等待事件的发生<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">3. 当发生读就需事件的时候，事件分离器调用第一步注册的事件处理器<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">4. 事件处理器首先执行实际的读取操作，然后根据读取到的内容进行进一步的处理<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\">&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\">下面我们来看看<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">Proactor模式</span>中读取操作和写入操作的过程：<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">读取操作：<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">1. 应用程序初始化一个异步读取操作，然后注册相应的事件处理器，此时事件处理器不关注读取就绪事件，而是关注读取完成事件，这是区别于Reactor的关键。<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">2. 事件分离器等待读取操作完成事件<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">3. 在事件分离器等待读取操作完成的时候，操作系统调用内核线程完成读取操作，并将读取的内容放入用户传递过来的缓存区中。这也是区别于Reactor的一点，Proactor中，应用程序需要传递缓存区。<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">4. 事件分离器捕获到读取完成事件后，激活应用程序注册的事件处理器，事件处理器直接从缓存区读取数据，而不需要进行实际的读取操作。<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">Proactor中写入操作和读取操作，只不过感兴趣的事件是写入完成事件。</span></p><span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\"></span><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">从上面可以看出，Reactor和Proactor模式的<span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; word-break: break-all;\">主要区别</span>就是真正的读取和写入操作是有谁来完成的，Reactor中需要应用程序自己读取或者写入数据，而Proactor模式中，应用程序不需要进行实际的读写过程，它只需要从缓存区读取或者写入即可，操作系统会读取缓存区或者写入缓存区到真正的IO设备.<br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\"><br style=\"box-sizing: border-box; outline: 0px; word-break: break-all;\">综上所述，同步和异步是相对于应用和内核的交互方式而言的，同步 需要主动去询问，而异步的时候内核在IO事件发生的时候通知应用程序，而阻塞和非阻塞仅仅是系统在调用系统调用的时候函数的实现方式而已。</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\">&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\">最后来两张图做个总结：</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><img src=\"quiver-image-url/44638131E53306E2EB8BD462FBDEF1B1.png\" alt=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 0px; word-break: break-all; cursor: zoom-in;\" width=\"461\" height=\"377\"></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\">&nbsp;</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all;\"><img src=\"quiver-image-url/ED285F5DA8EBDFEE1CA91FF813A3DF54.png\" alt=\"\" style=\"box-sizing: border-box; outline: 0px; margin: 0px; word-break: break-all; cursor: zoom-in;\" width=\"445\" height=\"288\"></p></div></div></article><div class=\"article-bar-bottom\" style=\"box-sizing: inherit; outline: 0px; padding: 0px 0px 16px; margin: 36px 0px 0px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(227, 227, 227); color: rgb(51, 51, 51); font-family: &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"></div>"
    }
  ]
}
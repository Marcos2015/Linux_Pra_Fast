{
  "title": "深入探讨this指针",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><div class=\"article_title\" style=\"margin: 5px 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei';\"><span class=\"ico ico_type_Original\" style=\"display: inline-block; width: 19px; height: 19px; margin: 0px 2px 0px 0px; background-image: url(http://static.blog.csdn.net/images/ico_Original.gif); vertical-align: middle; background-position: 0px 0px; background-repeat: no-repeat no-repeat;\"></span><strong style=\"text-align: center; font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p><font face=\"Times New Roman\">&nbsp;</font></o:p></span></strong></div><div id=\"article_content\" class=\"article_content\" style=\"margin: 20px 0px 0px; line-height: 26px; font-family: Arial; color: rgb(51, 51, 51);\"><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-size: 12pt; font-family: 宋体;\">为了写这篇文章，准备了好长时间，翻遍了箱底的书籍。但是现在还是不敢放开手来写，战战兢兢。不是担心自己写错，而是唯恐自己错误误导别人。同时也希望这篇文章能给你一点收获。既然是深入探讨</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">指针，所以建议初学者，最好具有一定编译基础，调试基础。如果大家认为这片文章有不满的地方</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">,</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">就给我发信批评一下，以便及时修正。</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-size: 12pt; font-family: 宋体;\">关于</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">指针的描述我们一般从语言层次上讲；</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">指针作为一个隐含参数传递给非静态成员函数，用以指向该成员函数所属类所定义的对象。当不同的对象调用同一个类的成员函数代码时，编译器会依据该成员函数的</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">指针所指向的不同对象来确定应该引用哪个对象的数据成员。简单例子</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-size: 12pt; font-family: 宋体;\">我们定义一个简单</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">stack</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">类</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\">//&nbsp;</span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">定义<span lang=\"EN-US\">stack</span>类<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">class</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;Stack<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">public</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">:<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack();<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">构造函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~Stack();<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">析构函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">public</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">:<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">void</span>&nbsp;push(<span style=\"color: blue;\">char</span>&nbsp;c);<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">压栈函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">private</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">:<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">char</span>&nbsp;*top;<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">栈顶元素<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">char</span>&nbsp;*max;<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">栈容量<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">};<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;</span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\">//&nbsp;</span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">压栈函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">void</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;Stack::push(<span style=\"color: blue;\">char</span>&nbsp;c)<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>(top &gt; max)<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*top++ = c;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">}<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;</span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\">//&nbsp;</span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">定义公共函数，操作栈对象中的<span lang=\"EN-US\">push</span>函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">void</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;FunStack(Stack *p)<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;push('c');<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">}<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-size: 9pt; font-family: 新宋体;\">上面的代码我们加入<span lang=\"EN-US\">this</span>概念，以<span lang=\"EN-US\">C</span>代码形式显示<span lang=\"EN-US\">(</span>你可以理解编译<span lang=\"EN-US\">C++</span>成<span lang=\"EN-US\">C</span>代码后，<span lang=\"EN-US\">Cfront</span>开始就是这么做的<span lang=\"EN-US\">)<o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\">//&nbsp;</span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">用普通<span lang=\"EN-US\">C</span>描述类成员函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">void</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;Stack__push(<span style=\"color: blue;\">this</span>,c);<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">普通<span lang=\"EN-US\">C</span>代码<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>(<span style=\"color: blue;\">this</span>-&gt;top &gt;&nbsp;<span style=\"color: blue;\">this</span>-&gt;max)<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*(<span style=\"color: blue;\">this</span>-&gt;top)++ = c;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">}<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;</span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">void</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;FunStack(p)<span style=\"color: green;\">// Stack *p;<o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack__push(p,'c');<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">}<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt; font-family: 新宋体;\">C++</span><span style=\"font-size: 12pt; font-family: 新宋体;\">中<span lang=\"EN-US\">this</span>指针是从<span lang=\"EN-US\">Simula</span>（只是听说没有使用过）里的<span lang=\"EN-US\">THIS</span>引用的翻版，有时候有人会问，为什么<span lang=\"EN-US\">this</span>是指针而不是一个引用？为什么叫<span lang=\"EN-US\">this</span>而不是叫<span lang=\"EN-US\">self</span>（<span lang=\"EN-US\">smalltalk</span>）？第一个问题是，当<span lang=\"EN-US\">this</span>引入带类的<span lang=\"EN-US\">C</span>时，在那时的是<span lang=\"EN-US\">C</span>＋＋中还没有引用机制，所以只能是<span lang=\"EN-US\">this</span>指针而不是引用了。第二个问题，更简单了，就是因为<span lang=\"EN-US\">this</span>是从<span lang=\"EN-US\">simula</span>来，而不是从<span lang=\"EN-US\">smalltalk</span>来。<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-size: 12pt; font-family: 新宋体;\">上面是简单的讨论，我们将逐步深入讨论<span lang=\"EN-US\">this</span>。<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-size: 12pt; font-family: 新宋体;\">我们通过<span lang=\"EN-US\">this</span>访问对象（已经成惯例了）中函数和变量时一般这样使用<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;top;//&nbsp;</span><span style=\"font-size: 12pt; font-family: 新宋体;\">访问变量<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;push();//&nbsp;</span><span style=\"font-size: 12pt; font-family: 新宋体;\">访问函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;</span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;(*this).top;//&nbsp;</span><span style=\"font-size: 12pt; font-family: 新宋体;\">访问变量<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;(*this).push();//&nbsp;</span><span style=\"font-size: 12pt; font-family: 新宋体;\">访问函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">通过上面例子，我们从语言层次上说<span lang=\"EN-US\">this</span>是一个指针（也许你说<span lang=\"EN-US\">this</span>本来就是一个指针，就叫<span lang=\"EN-US\">this</span>指针，不要着急听我慢慢说来）。那么<span lang=\"EN-US\">this</span>是一个什么样子的指针，比如我们最常见的指针有。<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><font size=\"3\">&nbsp;&nbsp;&nbsp;&nbsp;int *p;<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><font size=\"3\">&nbsp;&nbsp;&nbsp;&nbsp;Const int *p;<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><font size=\"3\">&nbsp;&nbsp;&nbsp;&nbsp;int * const p;<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">那么<span lang=\"EN-US\">this</span>指针是不是其中一种？下面我们分别验证。<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">我们定义类<span lang=\"EN-US\">,</span>作为验证对象<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><font size=\"3\">&nbsp;&nbsp;&nbsp;&nbsp;</font></span><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">class</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;A<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">public</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">:<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iData;<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">简单期间我们定义为<span lang=\"EN-US\">int</span>型<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">mutable</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iData2;<span style=\"color: green;\">// mutable</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">变量<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">int</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;Fun1(){<span style=\"color: blue;\">return</span>&nbsp;++iData;};<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">普通函数</span><span style=\"font-size: 9pt; color: red; font-family: 新宋体;\">㈠</span><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\"><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">int</span>&nbsp;Fun2()&nbsp;<span style=\"color: blue;\">const</span>&nbsp;{<span style=\"color: blue;\">return</span>&nbsp;++iData;};<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">带<span lang=\"EN-US\">const</span>的函数</span><span style=\"font-size: 9pt; color: red; font-family: 新宋体;\">㈡</span><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\"><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">};<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">上面的</font></span><span style=\"font-size: 9pt; color: red; font-family: 新宋体;\">㈠</span><span style=\"font-size: 9pt; font-family: 新宋体;\">函数可以正确执行。</span><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">上面<span style=\"color: rgb(255, 102, 0);\">㈡</span>函数，不能通过编译，我们知道在<span lang=\"EN-US\">const</span>函数中，不允许修改类中变量。那么最终原因是什么？其实在上面的例子中，我们用<span lang=\"EN-US\">C</span>实现<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><font size=\"3\">int A_Fun2(const A* this);<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">const</span><span style=\"font-family: 新宋体;\">函数本质是<span lang=\"EN-US\">const this</span>的原因，所以不允许修改<span lang=\"EN-US\">iData</span>值。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">至少现在我们可以确定<span lang=\"EN-US\">this</span>指针，不是一个<span lang=\"EN-US\">const</span>常量指针。因为如果<span lang=\"EN-US\">this</span>是常量指针，我们就不能修改类中变量的值了。捎带我们提一下<span lang=\"EN-US\">C</span>＋＋中关键字<span lang=\"EN-US\">mutable</span>，如上定义的</font></span><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">mutable</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;</span><font size=\"3\"><span lang=\"EN-US\" style=\"color: blue; font-family: 新宋体;\">int</span><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;iData2;<span style=\"color: green;\">// mutable</span></span><span style=\"color: green; font-family: 新宋体;\">变量</span><span style=\"font-family: 新宋体;\">，这样我们就可以在<span lang=\"EN-US\">const</span>函数中修改<span lang=\"EN-US\">iData2</span>的值。其实这时的<span lang=\"EN-US\">mutable</span>和<span lang=\"EN-US\">public</span>，<span lang=\"EN-US\">private</span>，<span lang=\"EN-US\">protected</span>是相同的，这些关键字只是在编译时刻有用，编译后变量类型是没有区别的。更深一步说，强制类型转换也是对编译器来说，是通过编译器编译过程中判断类型转换的正误。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">那么<span lang=\"EN-US\">this</span>对象是否是<span lang=\"EN-US\">A *const this</span>的值哪？首先我们先看一个例子<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><o:p><font size=\"3\">&nbsp;</font></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">static</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iTest = 1;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">class</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;A<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">public</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">:<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iData;<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">简单期间我们定义为<span lang=\"EN-US\">int</span>型<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">mutable</span>&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iData2;<span style=\"color: green;\">// mutable</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">变量<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">int</span>&nbsp;Fun1()<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iTemp = 4;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">return</span>&nbsp;++iData;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">普通函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">int</span>&nbsp;Fun2()<span style=\"color: blue;\">const</span>&nbsp;{<span style=\"color: blue;\">return</span>&nbsp;iData;};<span style=\"color: green;\">//&nbsp;</span></span><span style=\"font-size: 9pt; color: green; font-family: 新宋体;\">带<span lang=\"EN-US\">const</span>的函数<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">};<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: green; font-family: 新宋体;\">&nbsp;</span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">int</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;_tmain(<span style=\"color: blue;\">int</span>&nbsp;argc, _TCHAR* argv[])<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">{<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A a;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">static</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iTest1 = 2;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.Fun1();<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; color: blue; font-family: 新宋体;\">static</span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;<span style=\"color: blue;\">int</span>&nbsp;iTest2 = 3;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">system(\"pause\");<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">return</span>&nbsp;0;<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">}<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">我们通过上面的例子查看<span lang=\"EN-US\">this</span>的地址，我们定义<span lang=\"EN-US\">static</span>对象的目的就是为了用<span lang=\"EN-US\">this</span>指针的地址和<span lang=\"EN-US\">static</span>变量的地址进行对比，看一看<span lang=\"EN-US\">this</span>指针到底分配到哪里？<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">注意我们在这里不能直接使用<span lang=\"EN-US\">&amp;this</span>获得<span lang=\"EN-US\">this</span>的指针，如果我们这样定义会提示<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><font size=\"3\"><strong><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">Error C2102&nbsp;</span></strong><strong><span lang=\"EN-US\" style=\"color: red;\"><font face=\"Times New Roman\">“</font></span></strong><strong><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">&amp;</span></strong><strong><span lang=\"EN-US\" style=\"color: red;\"><font face=\"Times New Roman\">”</font></span></strong><strong><span style=\"color: red; font-family: 新宋体;\">要求一个<span lang=\"EN-US\">L</span>值<span lang=\"EN-US\"><o:p></o:p></span></span></strong></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><strong><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></strong><span style=\"font-family: 新宋体;\">通过上面至少我们知道，<span lang=\"EN-US\">this</span>不是一个个人定义的变量，只是在运行时刻有效。所以这时如果直接对<span lang=\"EN-US\">this</span>取地址，在编译时刻无法通过，提示如上错误。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">既然我们在程序中无法通过<span lang=\"EN-US\">&amp;this</span>取得<span lang=\"EN-US\">this</span>的地址。那么我们有什么办法取得<span lang=\"EN-US\">this</span>的地址？我们上面已经提到<span lang=\"EN-US\">this</span>是在运行时刻有效，我们就以据这点查找<span lang=\"EN-US\">this</span>的地址。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">为了在取得<span lang=\"EN-US\">this</span>的地址，我们使用<span lang=\"EN-US\">VC7.0</span>下的命令窗口，在命令窗口中我们使用命令<span lang=\"EN-US\">eval</span>，通过这个命令我们可以取得<span lang=\"EN-US\">this</span>的地址。我们还是在上面的程序中设置断点<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><font size=\"3\"><v:shapetype id=\"_x0000_t75\" stroked=\"f\" filled=\"f\" path=\"m@4@5l@4@11@9@11@9@5xe\" o:preferrelative=\"t\" o:spt=\"75\" coordsize=\"21600,21600\"><v:stroke joinstyle=\"miter\"></v:stroke><v:formulas><v:f eqn=\"if lineDrawn pixelLineWidth 0\"></v:f><v:f eqn=\"sum @0 1 0\"></v:f><v:f eqn=\"sum 0 0 @1\"></v:f><v:f eqn=\"prod @2 1 2\"></v:f><v:f eqn=\"prod @3 21600 pixelWidth\"></v:f><v:f eqn=\"prod @3 21600 pixelHeight\"></v:f><v:f eqn=\"sum @0 0 1\"></v:f><v:f eqn=\"prod @6 1 2\"></v:f><v:f eqn=\"prod @7 21600 pixelWidth\"></v:f><v:f eqn=\"sum @8 21600 0\"></v:f><v:f eqn=\"prod @7 21600 pixelHeight\"></v:f><v:f eqn=\"sum @10 21600 0\"></v:f></v:formulas><v:path o:connecttype=\"rect\" gradientshapeok=\"t\" o:extrusionok=\"f\"></v:path><o:lock aspectratio=\"t\" v:ext=\"edit\"></o:lock></v:shapetype><v:shape id=\"_x0000_i1025\" type=\"#_x0000_t75\" style=\"width: 350.25pt; height: 236.25pt;\"><v:imagedata o:title=\"\" src=\"file:///C:/DOCUME~1/ADMINI~1/LOCALS~1/Temp/msohtml1/01/clip_image001.png\"></v:imagedata></v:shape><o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><o:p><font size=\"3\">&nbsp;<img alt=\"\" src=\"quiver-image-url/2A2C5CDB707B34805E17733F38A5F416.jpg\" style=\"border: none;\" width=\"350\" height=\"236\"></font></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">在<span lang=\"EN-US\">debug</span>下，我们运行上面的程序，并进入断点后，进行取址操作。<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&gt;eval &amp;iTest<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0044afa0 iTest<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&gt;eval &amp;iTest1<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0044afa4 iTest1<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&gt;eval &amp;this//&nbsp;</span><span style=\"font-size: 9pt; font-family: 新宋体;\">注意只有我们进入<span lang=\"EN-US\">Fun1</span>（）函数体内才能取得<span lang=\"EN-US\">&amp;this</span>的值<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0012fdf0 \"</span><span style=\"font-size: 9pt; font-family: 新宋体;\">玄<span lang=\"EN-US\">_\"<o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&gt;eval &amp;iTest2<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0044afa8 iTest2<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\"><o:p><font size=\"3\">&nbsp;</font></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">通过对比我们可以看出<span lang=\"EN-US\">static</span>变量<span lang=\"EN-US\">iTest,iTest1,iTest2</span>存放在全局变量区域，而<span lang=\"EN-US\">&amp;this</span>（</font></span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0012fdf0</span><span style=\"font-family: 新宋体;\"><font size=\"3\">）的地址比<span lang=\"EN-US\">&amp;iTest</span>（</font></span><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0044afa0</span><span style=\"font-family: 新宋体;\"><font size=\"3\">）地址还要底，而<span lang=\"EN-US\">static</span>变量存放在单独全局<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">区域，并且这个区域是从底地址到高地址递增的。所以通过上面的对比至少我们可以肯定一点<span lang=\"EN-US\">this</span>指针的创建要比<span lang=\"EN-US\">static</span>变量（或者全局变量）早。那么更比创建<span lang=\"EN-US\">A a</span>；对象时调用<span lang=\"EN-US\">A</span>的构造函数早，只是创建<span lang=\"EN-US\">a</span>对象后，<span lang=\"EN-US\">this</span>指向<span lang=\"EN-US\">a</span>对象；<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">当我们创建两个<span lang=\"EN-US\">A</span>类对象时，会发现<span lang=\"EN-US\">this</span>指针的地址是相同的，但是<span lang=\"EN-US\">this</span>指针指向对象不同。当然不同了，如果相同。<span lang=\"EN-US\">A a</span>，<span lang=\"EN-US\">b</span>；那么<span lang=\"EN-US\">a</span>，<span lang=\"EN-US\">b</span>对象也就相同了，这种方式肯定是不对的。结论就是同一个类创建多个对象时，多个对象的<span lang=\"EN-US\">this</span>指针是同一个指针。也就是说在单进程单线程中<span lang=\"EN-US\">this</span>对象在放入<span lang=\"EN-US\">CPU</span>寄存器中时都是同一个地址，只是指向不同的对象而已。上面的测试是在<span lang=\"EN-US\">DEBUG</span>状态下的测试结果。<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">那么在<span lang=\"EN-US\">Release</span>是什么样？要多亏<span lang=\"EN-US\">VC7.0</span>支持<span lang=\"EN-US\">Release</span>下的断点，我们在<span lang=\"EN-US\">Release</span>下，启动调试。这时需要在<span lang=\"EN-US\">Release</span>状态下设置，优化状态为<strong>禁用<span lang=\"EN-US\">(/Od)</span></strong><span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">&gt;eval &amp;this CXX0069:&nbsp;</span><span style=\"color: red; font-family: 新宋体;\">错误<span lang=\"EN-US\">:&nbsp;</span>变量需要堆栈帧<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">&gt;eval this CXX0069:&nbsp;</span><span style=\"color: red; font-family: 新宋体;\">错误<span lang=\"EN-US\">:&nbsp;</span>变量需要堆栈帧<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">&gt;eval *this CXX0069:&nbsp;</span><span style=\"color: red; font-family: 新宋体;\">错误<span lang=\"EN-US\">:&nbsp;</span>变量需要堆栈帧<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><o:p><font size=\"3\">&nbsp;</font></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">在<span lang=\"EN-US\">Release</span>状态下<span lang=\"EN-US\">&amp;this</span>，<span lang=\"EN-US\">this</span>，<span lang=\"EN-US\">*this</span>不存在了，提示是变量需要堆栈帧，说明此时的<span lang=\"EN-US\">this</span>指针不存在了。难到<span lang=\"EN-US\">this</span>指针只是在<span lang=\"EN-US\">debug</span>模式下有，在<span lang=\"EN-US\">Release</span>模式下没有？而<span lang=\"EN-US\">C</span>＋＋语言特性中并没有说<span lang=\"EN-US\">this</span>指针在调试状态下有而在<span lang=\"EN-US\">Release</span>模式下没有啊？只是强调<span lang=\"EN-US\">this</span>指针作为一种隐含参数传递。也就是在正确（请这样理解）的程序中<span lang=\"EN-US\">this</span>应该是不存在的，至少可以肯定的是说在内存中不存在<span lang=\"EN-US\">this</span>指针。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">我们使用<span lang=\"EN-US\">C</span>＋＋的时候知道有一种变量定义方式，也不存放到内存，而是直接放到寄存器中。我想你已经猜到了就是<span lang=\"EN-US\">register</span>类型变量，下面我们测试<span lang=\"EN-US\">register</span>类型变量是否和<span lang=\"EN-US\">this</span>指针是一样的结果。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: 新宋体;\">在程序中定义：<span lang=\"EN-US\">register int iRegData;<o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;Debug</span><span style=\"font-family: 新宋体;\">模式下<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><font size=\"3\">&gt;eval iRegData<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><font size=\"3\">5<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><font size=\"3\">&gt;eval &amp;iRegData<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">0x0012fec4//&nbsp;</span><span style=\"color: red; font-family: 新宋体;\">注意这个地址，看看是否和<span lang=\"EN-US\">&gt;eval &amp;this//&nbsp;</span>注意只有我们进入<span lang=\"EN-US\">Fun1</span>（）函数体内才能取得<span lang=\"EN-US\">&amp;this</span>的值<span lang=\"EN-US\">0x0012fdf0 \"</span>玄<span lang=\"EN-US\">_\"</span>在地址上很接近啊！一个是<span lang=\"EN-US\">0x0012fec4</span>，另一个是<span lang=\"EN-US\">0x0012fdf0</span>。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span lang=\"EN-US\" style=\"font-family: 新宋体;\">Release</span><span style=\"font-family: 新宋体;\">模式下<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><font size=\"3\">&gt;eval iRegData<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><font size=\"3\">5<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><font size=\"3\">&gt;eval &amp;iRegData<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\"><font size=\"3\">0x0012fee0<o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-size: 9pt; font-family: 新宋体;\">通过上可以知道在<span lang=\"EN-US\">debug</span>和<span lang=\"EN-US\">Release</span>模式下</span><font size=\"3\"><span lang=\"EN-US\" style=\"color: red; font-family: 新宋体;\">iRegData</span><span style=\"font-family: 新宋体;\">都没有直接放入寄存器，而是在内存中开辟了内存空间，至于如何可以在运行时候看出<span lang=\"EN-US\">register</span>变量是放到寄存器，而不是内存中，我还不得而知，所以哪位高人知道，麻烦告诉我一声。看来<span lang=\"EN-US\">this</span>指针也不是<span lang=\"EN-US\">register</span>类型的，或者我现在的能力还不能确定<span lang=\"EN-US\">this</span>是<span lang=\"EN-US\">register</span>。后来才知道<span lang=\"EN-US\">register</span>对编译器只是一个提示，编译器可以执行也可以不执行，就像<span lang=\"EN-US\">inline</span>一样。但是至少我们可以使用<span lang=\"EN-US\">__inline</span>宏，可以确保函数被<span lang=\"EN-US\">inline</span>，但是<span lang=\"EN-US\">register</span>？有没有这种策略，我现在还不得而知。<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">补充：定义变量类型有四中分别是<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">1</span><span style=\"font-family: 新宋体;\">：<span lang=\"EN-US\">Auto:</span>非<span lang=\"EN-US\">static</span>，<span lang=\"EN-US\">const</span>类型变量，比如局部变量，<span lang=\"EN-US\">int i</span>；<span lang=\"EN-US\">char c</span>等。都是<span lang=\"EN-US\">auto int i</span>；<span lang=\"EN-US\">auto char c</span>；<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">2</span><span style=\"font-family: 新宋体;\">：<span lang=\"EN-US\">static</span>：静态变量，<span lang=\"EN-US\">static int i</span>，<span lang=\"EN-US\">static char c</span>；<span lang=\"EN-US\" style=\"color: red;\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">3</span><span style=\"font-family: 新宋体;\">：<span lang=\"EN-US\">const</span>：常量变量，值不可修改。<span lang=\"EN-US\">Const int i</span>，<span lang=\"EN-US\">static char c</span>；<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><font size=\"3\"><span lang=\"EN-US\" style=\"font-family: 新宋体;\">4</span><span style=\"font-family: 新宋体;\">：<span lang=\"EN-US\">register</span>：内存变量，编译器把此值直接放入寄存器。<span lang=\"EN-US\">Register int i</span>；<span lang=\"EN-US\">register char c</span>；<span lang=\"EN-US\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><span style=\"font-family: 新宋体;\"><font size=\"3\">上面讨论我们都是从类中变量进行讨论的，但是无法确定<span lang=\"EN-US\">this</span>到底是什么？那么我们继续从类中的函数开始讨论<span lang=\"EN-US\">this</span>。并且我们也将逐渐深入编译状态下。<span lang=\"EN-US\"><o:p></o:p></span></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><font size=\"3\"><span style=\"font-family: 新宋体;\">开始的使用已经举了例子，类内函数在解释函数时，把<span lang=\"EN-US\">this</span>指针作为函数的第一个参数进行传递。</span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">但是，当高级语言被编译成计算机可以识别的机器码时，有一个问题就凸现出来：在</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">CPU</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">中，计算机没有办法知道一个函数调用需要多少个、什么样的参数，也没有硬件可以保存这些参数（你讲看到</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">是一个例外）。也就是说，计算机不知道怎么给这个函数传递参数，传递参数的工作必须由函数调用者和函数本身来协调。为此，计算机提供了一种被称为栈的数据结构来支持参数传递。</span></span></font><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><font size=\"3\">&nbsp;&nbsp;&nbsp;&nbsp;</font></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\"><font size=\"3\">栈是一种先进后出的数据结构，栈有一个存储区、一个栈顶指针。栈顶指针指向堆栈中第一个可用的数据项（被称为栈顶）。用户可以在栈顶上方向栈中加入数据，这个操作</font></span></span><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">被称为压栈</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">(Push)</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">，压栈以后，栈顶自动变成新加入数据项的位置，栈顶指针也随之修</span></span></font><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">改。用户也可以从堆栈中取走栈顶，称为弹出栈</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">(pop)</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">，弹出栈后，栈顶下的一个元素变</span></span></font><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">成栈顶，栈顶指针随之修改。</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt; text-indent: 21pt;\"><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">函数调用时，调用者依次把参数压栈，然后调用函数，函数被调用以后，在堆栈中取得数据，并进行计算。函数计算结束以后，或者调用者、或者函数本身修改堆栈，使堆栈恢复原装。在参数传递中，有两个很重要的问题必须得到明确说明：当参数个数多于一个时，按照什么顺序把参数压入堆栈函数调用后，由谁来把堆栈恢复原装在高级语言中，通过函数调用约定来说明这两个问题。常见的调用约定有：</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt 21pt;\"><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><font size=\"3\">stdcall</font></span></span><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><font size=\"3\"><span class=\"tpccontent\">cdecl</span><br><span class=\"tpccontent\">fastcall</span><br><span class=\"tpccontent\">thiscall</span><br><span class=\"tpccontent\">naked call</span><o:p></o:p></font></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span style=\"font-family: 宋体;\">原来函数调用约定也有这么多啊，看这都有点晕了呵呵。因为这篇文章讲的是</span><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span><span style=\"font-family: 宋体;\">指针，所以在这里我们主要讨论</span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">thiscall</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">。</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thiscall</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">是唯一一个不能明确指明的函数修饰，因为</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">thiscall</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">不是关键字（所以不要在</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">C</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">＋＋关键字中找了）。它是</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">C++</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">类成员函数缺省的调用约定。由于成员函数调用有一个</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">指针，因此必须特殊处理，</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">thiscall</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">意味着：参数从右向左入栈</span></span><span style=\"font-family: 宋体;\">，<span class=\"tpccontent\">如果参数个数确定，</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">指针通过</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">ecx</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">传递给被调用者；如果参数个数不确定，</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">指针在所有参数压栈后被压入堆栈。对参数个数不定的，调用者清理堆栈，否则函数自己清理堆栈为了说明这个调用约定，定义如下类和使用代码：</span></span></font><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><br><font size=\"3\"><span class=\"tpccontent\">class A</span><br><span class=\"tpccontent\">{</span><br><span class=\"tpccontent\">public:</span><br><span class=\"tpccontent\">int function1(int a,int b);</span><br><span class=\"tpccontent\">int function2(int a,...);//&nbsp;</span></font></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">定义</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">VA</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">（可变）函数</span></span></font><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><font size=\"3\"><span class=\"tpccontent\">};</span><br><span class=\"tpccontent\">int A::function1 (int a,int b)</span><br><span class=\"tpccontent\">{</span><br><span class=\"tpccontent\">return a+b;</span><br><span class=\"tpccontent\">}</span><br><br><span class=\"tpccontent\">int A::function2(int a,...)</span><br><span class=\"tpccontent\">{</span><br><span class=\"tpccontent\">va_list ap;</span><br><span class=\"tpccontent\">va_start(ap,a);</span><br><span class=\"tpccontent\">int i;</span><br><span class=\"tpccontent\">int result = 0;</span><br><span class=\"tpccontent\">for(i = 0 i &lt; a i ++)</span><br><span class=\"tpccontent\">{</span><br><span class=\"tpccontent\">result += va_arg(ap,int);</span><br><span class=\"tpccontent\">}</span><br><span class=\"tpccontent\">return result;</span><br><span class=\"tpccontent\">}</span><br><span class=\"tpccontent\">void callee()</span><br><span class=\"tpccontent\">{</span><br><span class=\"tpccontent\">A a;</span><br><span class=\"tpccontent\">a.function1 (1,2);</span><br><span class=\"tpccontent\">a.function2(3,1,2,3);</span><br><span class=\"tpccontent\">}</span><br><span class=\"tpccontent\">callee</span></font></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\"><font size=\"3\">函数被翻译成汇编后就变成：</font></span></span><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><span class=\"tpccontent\"><font size=\"3\">//</font></span></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">函数</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">function1</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">调用</span></span></font><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><font size=\"3\"><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">0401C</span></st1:chmetcnv><span class=\"tpccontent\">1D push 2</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><st1:chmetcnv w:st=\"on\" unitname=\"F\" sourcevalue=\"1\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">1F</span></st1:chmetcnv><span class=\"tpccontent\">&nbsp;push 1</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">21 lea ecx,[ebp-8]</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">24 call function1 //&nbsp;</span></font></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">注意，这里</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">没有被入栈，而是通过</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">ECX</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">传递</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">指针</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-size: 9pt; font-family: 新宋体;\">此时寄存器的各值如下<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EAX =&nbsp;<span style=\"color: red;\">00000003</span>&nbsp;EBX = 7FFDF000 ECX =&nbsp;<span style=\"color: red;\">0012EE43</span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EDX = 00000001 ESI = 00000000 EDI = 0012EE48<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EIP =&nbsp;<st1:chmetcnv w:st=\"on\" unitname=\"a\" sourcevalue=\"41707\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span style=\"color: red;\">0041707A</span></st1:chmetcnv>&nbsp;ESP = 0012ED70 EBP = 0012EE48<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EFL =&nbsp;<span style=\"color: red;\">00000206<o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-size: 9pt; font-family: 新宋体;\">察看<span lang=\"EN-US\">this</span>指针<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&gt;eval this<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0012ee43//&nbsp;</span><span style=\"font-size: 9pt; font-family: 新宋体;\">看看这个值是否和<span lang=\"EN-US\">ECX</span>相同</span><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><span class=\"tpccontent\"><font size=\"3\">//</font></span></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">函数</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">function2</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">调用</span></span></font><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><font size=\"3\"><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">29 push 3</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">2B push 2</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">2D push 1</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><st1:chmetcnv w:st=\"on\" unitname=\"F\" sourcevalue=\"2\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">2F</span></st1:chmetcnv><span class=\"tpccontent\">&nbsp;push 3</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">31 lea eax,[ebp-8] //&nbsp;</span></font></span><font size=\"3\"><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">这里引入</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">指针，并把</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\">this</span></span><span class=\"tpccontent\"><span style=\"font-family: 宋体;\">指针放入栈内</span></span><span class=\"tpccontent\"><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><o:p></o:p></span></span></font></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EAX =&nbsp;<span style=\"color: red;\">00000006</span>&nbsp;EBX = 7FFDF000 ECX =&nbsp;<span style=\"color: red;\">0012ED70</span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EDX =&nbsp;<span style=\"color: red;\">00000006</span>&nbsp;ESI = 00000000 EDI = 0012EE48<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EIP =&nbsp;<span style=\"color: red;\">0041708E</span>&nbsp;ESP = 0012ED70 EBP = 0012EE48<o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">EFL =&nbsp;<span style=\"color: red;\">00000212</span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-size: 9pt; font-family: 新宋体;\">察看<span lang=\"EN-US\">this</span>指针<span lang=\"EN-US\"><o:p></o:p></span></span></p><p class=\"MsoNormal\" align=\"left\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">&gt;eval this<o:p></o:p></span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt; font-family: 新宋体;\">0x0012ee43//&nbsp;</span><span style=\"font-size: 9pt; font-family: 新宋体;\">看看这个值是否和<span lang=\"EN-US\">ECX</span>相同</span><span lang=\"EN-US\" style=\"font-family: Tahoma;\"><br><font size=\"3\"><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">34 push eax</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><span class=\"tpccontent\">35 call function2</span><br><st1:chmetcnv w:st=\"on\" unitname=\"C\" sourcevalue=\"401\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">00401C</span></st1:chmetcnv><st1:chmetcnv w:st=\"on\" unitname=\"a\" sourcevalue=\"3\" hasspace=\"False\" negative=\"False\" numbertype=\"1\" tcsc=\"0\"><span class=\"tpccontent\">3A</span></st1:chmetcnv><span class=\"tpccontent\">&nbsp;add esp,14h</span></font></span><strong><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></strong></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p><font face=\"Times New Roman\">&nbsp;</font></o:p></span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-size: 12pt; font-family: 宋体;\">到现在，我们对</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">得了解还说不上深入了解。简单得说</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">就是指向对象自身的一个指针，讨论这么多其实就是想了解</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">在反编译阶段是如何传递运行得。也许就</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">的了解我们就可以基于以上讨论已经足够了。但是</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">的应用并不简单的就是这些内容，比如在</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">ATL</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">中，就有专门函数用来保存回复</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">指针的策略；我们在重载</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">operator=</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">也需要通过</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">this</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">判断赋值等号两边对象，是否指向同一个对象。</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p><font face=\"Times New Roman\">&nbsp;</font></o:p></span></p><p><font size=\"3\"><font face=\"宋体\"><strong>关于指针</strong>：指针和其它变量（<span lang=\"EN-US\">int</span>，<span lang=\"EN-US\">char</span>等）一样，在声明后会在内存中申请内存空间，存储在在程序的堆栈上，大小一般都是一个机器字的长度（比如在<span lang=\"EN-US\">32</span>位机上是<span lang=\"EN-US\">4</span>个字节）。简单的说指针是指向内存中地址的变量，可以是数据的地址也可以是函数的地址。<span style=\"font-family: ËÎÌå;\">一句话：指针是一种用于储存“另外一个变量的地址”的变量。或者拆成两句：指针是一个变量，它的值是另外一个变量的地址。<span lang=\"EN-US\"><o:p></o:p></span></span></font></font></p><p><strong><span lang=\"EN-US\"><o:p><font face=\"宋体\" size=\"3\">&nbsp;</font></o:p></span></strong></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><strong><span style=\"font-size: 12pt; font-family: 宋体;\">参考资料</span></strong><strong><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></strong></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-size: 12pt; font-family: 宋体;\">孙晓涛等《</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">Windows</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">高级编程》西北工业大学出版社（</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">1997</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">年</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><font face=\"Times New Roman\">10</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">月</span><span style=\"font-size: 12pt;\"><font face=\"Times New Roman\">&nbsp;</font></span><span style=\"font-size: 12pt; font-family: 宋体;\">西安）</span><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p></o:p></span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span style=\"font-family: 宋体;\">逸学堂《关于</span><span lang=\"EN-US\">this</span><span style=\"font-family: 宋体;\">指针的深入探讨》</span><span lang=\"EN-US\">CSDN<o:p></o:p></span></font></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><font size=\"3\"><span style=\"font-family: 宋体;\">《</span><span lang=\"EN-US\">C</span><span style=\"font-family: 宋体;\">＋＋编程思想》</span><span lang=\"EN-US\"><o:p></o:p></span></font></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><span lang=\"EN-US\" style=\"font-size: 9pt;\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"margin: 0cm 0cm 0pt;\"><strong><span lang=\"EN-US\" style=\"font-size: 12pt;\"><o:p><font face=\"Times New Roman\">&nbsp;</font></o:p></span></strong></p></div><div id=\"bdshare\" class=\"bdshare_t bds_tools get-codes-bdshare\" style=\"z-index: 999999; padding-bottom: 2px; font-size: 12px; float: right; zoom: 1; color: rgb(51, 51, 51); font-family: Arial, Console, Verdana, 'Courier New'; line-height: normal;\"><a class=\"bds_qzone\" title=\"分享到QQ空间\" href=\"http://blog.csdn.net/ugg/article/details/606396#\" style=\"color: rgb(51, 102, 153); text-decoration: none; display: block; font-family: 宋体, Arial; height: 16px; float: left; cursor: pointer; padding-top: 6px; padding-bottom: 3px; padding-left: 22px; background-image: url(http://bdimg.share.baidu.com/static/images/is.png?cdnversion=20131219); background-position: 0px -75px !important; background-repeat: no-repeat no-repeat;\"></a><a class=\"bds_tsina\" title=\"分享到新浪微博\" href=\"http://blog.csdn.net/ugg/article/details/606396#\" style=\"color: rgb(51, 102, 153); text-decoration: none; display: block; font-family: 宋体, Arial; height: 16px; float: left; cursor: pointer; padding-top: 6px; padding-bottom: 3px; padding-left: 22px; background-image: url(http://bdimg.share.baidu.com/static/images/is.png?cdnversion=20131219); background-position: 0px -115px !important; background-repeat: no-repeat no-repeat;\"></a><a class=\"bds_tqq\" title=\"分享到腾讯微博\" href=\"http://blog.csdn.net/ugg/article/details/606396#\" style=\"color: rgb(51, 102, 153); text-decoration: none; display: block; font-family: 宋体, Arial; height: 16px; float: left; cursor: pointer; padding-top: 6px; padding-bottom: 3px; padding-left: 22px; background-image: url(http://bdimg.share.baidu.com/static/images/is.png?cdnversion=20131219); background-position: 0px -235px !important; background-repeat: no-repeat no-repeat;\"></a><a class=\"bds_renren\" title=\"分享到人人网\" href=\"http://blog.csdn.net/ugg/article/details/606396#\" style=\"color: rgb(51, 102, 153); text-decoration: none; display: block; font-family: 宋体, Arial; height: 16px; float: left; cursor: pointer; padding-top: 6px; padding-bottom: 3px; padding-left: 22px; background-image: url(http://bdimg.share.baidu.com/static/images/is.png?cdnversion=20131219); background-position: 0px -195px !important; background-repeat: no-repeat no-repeat;\"></a><a class=\"bds_t163\" title=\"分享到网易微博\" href=\"http://blog.csdn.net/ugg/article/details/606396#\" style=\"color: rgb(51, 102, 153); text-decoration: none; display: block; font-family: 宋体, Arial; height: 16px; float: left; cursor: pointer; padding-top: 6px; padding-bottom: 3px; padding-left: 22px; background-image: url(http://bdimg.share.baidu.com/static/images/is.png?cdnversion=20131219); background-position: 0px -715px !important; background-repeat: no-repeat no-repeat;\"></a><span class=\"bds_more\" style=\"display: block; font-family: 宋体, Arial; height: 16px; float: left; cursor: pointer; padding-top: 6px; padding-bottom: 3px; padding-left: 22px; background-image: url(http://bdimg.share.baidu.com/static/images/is.png?cdnversion=20131219) !important; background-position: 0px 5px !important; background-repeat: no-repeat no-repeat !important;\">更多</span><a class=\"shareCount\" href=\"http://blog.csdn.net/ugg/article/details/606396#\" title=\"累计分享0次\" style=\"color: rgb(69, 69, 69); text-decoration: none; display: block; height: 16px; float: left; cursor: pointer; padding: 0px 0px 0px 5px; margin: 5px 0px 0px; text-align: center; width: 37px; overflow: hidden; line-height: 16px; font-family: 宋体 !important; background-image: url(http://bdimg.share.baidu.com/static/images/sc.png?cdnversion=20120720) !important; background-position: 0px -30px !important; background-repeat: no-repeat no-repeat !important;\">0</a><div><br></div></div><div class=\"article_next_prev\" style=\"margin-top: 30px; color: rgb(102, 102, 102); font-size: 12px; line-height: 24px; font-family: Arial, Helvetica, sans-serif;\"></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span>"
    }
  ]
}
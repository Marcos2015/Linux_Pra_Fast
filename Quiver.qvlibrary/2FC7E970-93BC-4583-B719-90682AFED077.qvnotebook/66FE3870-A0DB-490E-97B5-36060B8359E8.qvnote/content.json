{
  "title": "c++算术运算和位运算中类型转换和类型提升规则和方法",
  "cells": [
    {
      "type": "text",
      "data": "<ol class=\"dp-cpp\" start=\"1\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><li class=\"alt\">&lt;pre&nbsp;<span class=\"keyword\">class</span>=<span class=\"string\">\"html\"</span>&nbsp;name=<span class=\"string\">\"code\"</span>&gt;#include&nbsp;&lt;iostream&gt;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"keyword\">using</span>&nbsp;<span class=\"keyword\">namespace</span>&nbsp;std;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"keyword\">void</span>&nbsp;main()&nbsp;&nbsp;</li><li class=\"\">{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/************************************************************************/</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/*&nbsp;结论：</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memory中存储的是补码，是根据存入的具体数据的值进行转换为二进制</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后的形式，如果超过该数据类型范围则不知道存的形式是什么了，这个</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;应该是编译器相关的，对越界数的处理方式；（无论存入的时候是用什</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;么进制表示的，在这里注意+/-单目运算符的作用）</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\"></span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论要做什么运算都要先看这个数存入内存是什么样子的；</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\"></span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类型提升/截断的时候都是对内存中数据的操作，提升的时候就是需要</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进行扩位：对无符号数扩位的时候直接把扩出的位上补零即可(因为unsigned都是正数)；有符号</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数进行扩位，则进行符号位扩展(sign&nbsp;extension)如果是整数即原最高位</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是零则补零，如果是负数即原最高位是1则全补1;进行数据截断的时候是</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从低位开始数位数然后截断，这里注意我们使用的一般都是小端机(little&nbsp;Endian)</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类型强制转换其实也是对内存中存储的数据的一种呈现方式而已，如：内存</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中是8000的时候(即1000&nbsp;0000&nbsp;0000&nbsp;0000)，如果用unsigned&nbsp;short&nbsp;int则打印出</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;来的是2的15次方，如果用short&nbsp;int则打印出来是负2的16次方</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在进行算术运算和双目的位运算的时候如果操作数数据类型不一致，首先进</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;行数据&nbsp;Arithmetical&nbsp;Conversion类型提升(其实提升就是进行扩位，然后把扩位后的内存二进制代码强制转为某种数据类型之后进行打印)，然后&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;才开始运算</span>&nbsp;</li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;</li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在进行单目位运算的时候，首先进行整型提升，然后开始运算Integer&nbsp;Promotion*/</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/************************************************************************/</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//目的：计算机内部存储形式（无符号数、有符号正数、有符号负数、直接十六进制；及其</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//扩位后规则及其扩位后的存储形式）</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;<span class=\"datatypes\">char</span>&nbsp;uch1&nbsp;=&nbsp;0x80;&nbsp;<span class=\"comment\">//80</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;<span class=\"datatypes\">char</span>&nbsp;uch2&nbsp;=&nbsp;128;&nbsp;&nbsp;<span class=\"comment\">//80&nbsp;</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//注意+/-作为单目运算符的作用和意义，就是让存入内存的时候，最高位写为1</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//同时要注意各个数据类型的表示范围</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">char</span>&nbsp;sch1&nbsp;=&nbsp;-0x7f;&nbsp;<span class=\"comment\">//Memory中应该是81</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">char</span>&nbsp;sch2&nbsp;=&nbsp;0x80;&nbsp;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)sch1&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//-127</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)sch2&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//-128</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;usch3&nbsp;=&nbsp;0x7f;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;ushc4&nbsp;=&nbsp;0x80;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)usch3&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//127</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)ushc4&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//128</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">char</span>&nbsp;sch3&nbsp;=&nbsp;127;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">char</span>&nbsp;sch4&nbsp;=&nbsp;-128;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)sch3&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//127</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)sch4&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//-128</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;uch3&nbsp;=&nbsp;0;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;uch4&nbsp;=&nbsp;255;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)uch3&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//0</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>)uch4&nbsp;&lt;&lt;&nbsp;endl;<span class=\"comment\">//255</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">char</span>&nbsp;a&nbsp;=&nbsp;-0x80;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>&nbsp;b&nbsp;=&nbsp;0x7f80;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">short</span>&nbsp;<span class=\"datatypes\">int</span>&nbsp;result&nbsp;=&nbsp;a&amp;b;<span class=\"comment\">//0111&nbsp;1111&nbsp;1000&nbsp;0000</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;result&nbsp;&lt;&lt;endl;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\">}&lt;/pre&gt;&lt;br&gt;&nbsp;&nbsp;</li><li class=\"alt\">&lt;pre&gt;&lt;/pre&gt;&nbsp;&nbsp;</li><li class=\"\">&lt;pre&gt;&lt;/pre&gt;&nbsp;</li></ol>"
    }
  ]
}
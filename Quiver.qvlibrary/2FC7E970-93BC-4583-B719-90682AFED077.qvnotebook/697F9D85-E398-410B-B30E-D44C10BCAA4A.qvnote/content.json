{
  "title": "用struct和class关键字定义类的区别",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><div class=\"content-head clearfix\" style=\"zoom: 1; color: rgb(69, 69, 69); font-family: tahoma, helvetica, arial; font-size: 12px; line-height: normal;\"><h2 class=\"title content-title\" style=\"margin: 0px 0px 10px; padding: 0px; font-size: 20px; font-family: tahoma, helvetica, 'microsoft yahei', arial; color: rgb(58, 58, 58); font-weight: normal; float: left;\"><span style=\"font-family: tahoma, helvetica, arial; font-size: 14px;\">C++之父Bjarn Stroustrup对C++语言概括的第一条就是\"a betterC\"。struct这个关键字就来源于C。而在C++中，struct的含义已经和C中的struct不尽相同了。在C++中，用户定义类型，也就是class，拥有和内建类型一样的地位。这可以从C++中struct定义的类型在声明变量时不必再写出struct关键字看出。如&nbsp;</span></h2></div><div id=\"content\" class=\"content mod-cs-content text-content clearfix\" style=\"zoom: 1; width: 758px; overflow: hidden; line-height: 1.5; margin: 7px 0px 10px; color: rgb(69, 69, 69); font-family: tahoma, helvetica, arial;\"><p style=\"margin: 0px; padding: 0px;\">struct Foo {&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">// ...&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">};&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">Foo f;&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">在C++程序中，人们似乎更热衷于使用class，而几乎忽略了struct的存在。实际上，struct就是成员默认为public的class（在class中，成员默认为private）。事实上以下两端代码完全等价：&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">代码一：&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">struct Foo {&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">// ...&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">};&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">代码二：&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">class Foo {&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">public:&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">// ...&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">};&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">那么为什么要有struct的存在呢？首先的原因自然是保持对C的兼容。原先的C代码可以不必修改就成为合法的C++代码。第二个原因（个人愚见），是为了让struct来表示抽象的数据类型以及抽象接口，而与class所表示的类的概念相区别。&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">struct在C中的使用方式转移到C++以后仍然是非常重要，作为一组相关的数据而存在于一个struct，说明了他们在逻辑上是相互关联的数据，同时他们被保存在struct里而不是全局变量，也是对数据的一种管理。个人认为一种很朴素的用法要取代当前很热门的get-set用法。比如&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">class Foo {&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">int bar;&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">public:&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">int get_bar() { return bar; }&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">void set_bar(const int&amp; b) { bar = b; }&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">};</p><p style=\"margin: 0px; padding: 0px;\">这里Foo::bar是一个需要频繁存取的数据对象，它作为类Foo的私有成员存在，而通过公共接口存取。这是面向对象思想中数据封装的体现。而考虑一下这个Foo::bar是否有必要成为私有成员？没有，因为它就是一个数据，没有必要用私有类成员的思想来封装它，似乎可以看成是面向对象思想的过度滥用。等效的可以写成：&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">struct Foo {&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">int bar;&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">};&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">然后通过普通的赋值操作来完成。这样做似乎是回到了原始时代，但没有必要用的就不要用，否则还会影响效率。其次一个struct的应用就是来描述纯虚类，也就是后来Java语言中类似接口的东西：&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">struct Foo {&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">virtual void Bar1() = 0;&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">virtual void Bar2() = 0;&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">// ...&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">};&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">使用struct可以些许节省编译器的语法分析时间，而且能在语义上表达的更为清楚。&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">一般来讲，当一个类中有必要进行数据隐藏时，请用class声明，并将私有数据标记为private，公共接口标记为public；而当所有成员都有必要成为公有成员的时候，请用struct来声明它。</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">从语法上，class和struct做类型定义时只有两点区别：&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（一）默认继承权限。如果不明确指定，来自class的继承按照private继承处理，来自struct的继承按照public继承处理；&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（二）成员的默认访问权限。class的成员默认是private权限，struct默认是public权限。&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">除了这两点，class和struct基本就是一个东西。语法上没有任何其它区别。</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">不能因为学过C就总觉得连C++中struct和class都区别很大，下面列举的说明可能比较无聊，因为struct和class本来就是基本一样的东西，无需多说。但这些说明可能有助于澄清一些常见的关于struct和class的错误认识：&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（1）都可以有成员函数；包括各类构造函数，析构函数，重载的运算符，友元类，友元结构，友元函数，虚函数，纯虚函数，静态函数；&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（2）都可以有一大堆public/private/protected修饰符在里边；&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（3）虽然这种风格不再被提倡，但语法上二者都可以使用大括号的方式初始化：A a = {1, 2, 3};不管A是个struct还是个class，前提是这个类/结构足够简单(aggregat type)，比如所有的成员都是public的，所有的成员都是简单类型，没有显式声明的构造函数。&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（4）都可以进行复杂的继承甚至多重继承，一个struct可以继承自一个class，反之亦可；一个struct可以同时继承5个class和5个struct，虽然这样做不太好。&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（5）如果说class的设计需要注意OO的原则和风格，那么没任何理由说设计struct就不需要注意。&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">（6）再次说明，以上所有说法都是指在C++语言中，至于在C里的情况，C里是根本没有“class”，而C的struct从根本上也只是个包装数据的语法机制。&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">最后，作为语言的两个关键字，除去定义类型时有上述区别之外，另外还有一点点：“class”这个关键字还用于定义模板参数，就像“typename”。但关键字“struct”不用于定义模板参数。</p></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span>"
    }
  ]
}
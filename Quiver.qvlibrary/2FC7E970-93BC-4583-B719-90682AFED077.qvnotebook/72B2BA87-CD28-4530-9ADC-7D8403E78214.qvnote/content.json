{
  "title": "C++中的this指针",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><div class=\"brief bgF8F8F8\"><h1><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">一个对象的成员函数其实就是一般的全局函数，只是编译器给它隐含加了一个指向该对象的const指针，这就是this指针。下面让我们一起来了解一下this指针吧!</span><br></h1></div><div class=\"content bgF8F8F8 f14\"><div id=\"content\"><p style=\"font-family: Times; font-size: medium; line-height: normal;\"></p><p style=\"font-family: Times; font-size: medium; line-height: normal;\"><strong>this</strong>&nbsp;<strong>指针</strong>是一个隐含于每一个类的成员函数中的特殊指针（包括析构函数和构造函数），它用于指向正在被成员函数操作的对象。不过，在一般的程序设计中不直接用它的，this是一个指针变量，因此在成员函数中，可以使用<strong>*</strong>this来表示正在调用该函数的对象。</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\"><strong>1. this指针的用处:</strong></p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">一个对象的this指针并不是对象本身的一部分，不会影响sizeof(对象)的结果。this作用域是在类内部，当在类的非静态成员函数中访问类的非静态成员的时候，编译器会自动将对象本身的地址作为一个隐含参数传递给函数。也就是说，即使你没有写上this指针，编译器在编译的时候也是加上this的，它作为非静态成员函数的隐含形参，对各成员的访问均通过this进行。</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">例如，调用date.SetMonth(9) &lt;===&gt; SetMonth(&amp;date, 9)，this帮助完成了这一转换 .</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\"><strong>2. this指针的使用:<br></strong></p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">一种情况就是，在类的非静态成员函数中返回类对象本身的时候，直接使用 return *this；另外一种情况是当参数与成员变量名相同时，如this-&gt;n = n （不能写成n = n）。</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\"><strong>3. this指针程序示例:<br></strong></p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">this指针存在于类的成员函数中,指向被调用函数所在的类实例的地址。</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">根据以下程序来说明this指针</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\"></p><pre style=\"line-height: normal;\"><ol class=\"dp-cpp\"><li class=\"alt\"><span class=\"preprocessor\">#include&lt;iostream.h&gt;&nbsp; </span>&nbsp;</li><li><span class=\"keyword\">class</span>&nbsp;Point&nbsp; &nbsp;</li><li class=\"alt\">{&nbsp; &nbsp;</li><li><span class=\"datatypes\">int</span>&nbsp;x,&nbsp;y;&nbsp; &nbsp;</li><li class=\"alt\"><span class=\"keyword\">public</span>:&nbsp; &nbsp;</li><li>Point(<span class=\"datatypes\">int</span>&nbsp;a,&nbsp;<span class=\"datatypes\">int</span>&nbsp;b)&nbsp;{&nbsp;x=a;&nbsp;y=b;}&nbsp; &nbsp;</li><li class=\"alt\"><span class=\"keyword\">void</span>&nbsp;MovePoint(&nbsp;<span class=\"datatypes\">int</span>&nbsp;a,&nbsp;<span class=\"datatypes\">int</span>&nbsp;b){&nbsp;x+=a;&nbsp;y+=b;}&nbsp; &nbsp;</li><li><span class=\"keyword\">void</span>&nbsp;print(){&nbsp;cout&lt;&lt;<span class=\"string\">\"x=\"</span>&lt;&lt;x&lt;&lt;<span class=\"string\">\"y=\"</span>&lt;&lt;y&lt;&lt;endl;} &nbsp;</li><li class=\"alt\">};&nbsp; &nbsp;</li><li><span class=\"keyword\">void</span>&nbsp;main(&nbsp;)&nbsp; &nbsp;</li><li class=\"alt\">{&nbsp; &nbsp;</li><li>Point&nbsp;point1(&nbsp;10,10);&nbsp; &nbsp;</li><li class=\"alt\">point1.MovePoint(2,2);&nbsp; &nbsp;</li><li>point1.print(&nbsp;);&nbsp; &nbsp;</li><li class=\"alt\">}&nbsp;&nbsp;</li></ol></pre><p style=\"font-family: Times; font-size: medium; line-height: normal;\">当对象point1调用MovePoint(2,2)函数时，即将point1对象的地址传递给了this指针。</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">MovePoint函数的原型应该是 void MovePoint( Point *this, int a, int b);第一个参数是指向该类对象的一个指针，我们在定义成员函数时没看见是因为这个参数在类中是隐含的。这样point1的地址传递给了this，所以在MovePoint函数中便显式的写成：</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">void MovePoint(int a, int b) { this-&gt;x +=a; this-&gt; y+= b;}</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">即可以知道，point1调用该函数后，也就是point1的数据成员被调用并更新了值。</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">即该函数过程可写成 point1.x+= a; point1. y + = b;&nbsp;</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\"><strong>4. 关于this指针的一个经典回答:<br></strong></p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">当你进入一个房子后，</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">你可以看见桌子、椅子、地板等，</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">但是房子你是看不到全貌了。</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">对于一个类的实例来说，</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">你可以看到它的成员函数、成员变量，</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">但是实例本身呢？</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">this是一个指针，它时时刻刻指向你这个实例本身</p><p style=\"font-family: Times; font-size: medium; line-height: normal;\">通过上面的分析，我们可以了解到，this就是自己，自己就是this，每个对象都有一个指向自己的this指针，就因为这个this指针，才使得有不同的实例，要不一个类岂不是就像一个实例了？？</p><div><br></div></div></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span>"
    }
  ]
}
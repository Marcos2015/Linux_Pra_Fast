{
  "title": "c++中冒号（:）和双冒号（::）的用法",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"position: relative;\"><div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><div class=\"article_title\" style=\"margin: 5px 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei';\"><span class=\"ico ico_type_Repost\" style=\"display: inline-block; width: 19px; height: 19px; margin: 0px 2px 0px 0px; background-image: url(http://static.blog.csdn.net/images/ico_Repost.gif); vertical-align: middle; background-position: 0px 0px; background-repeat: no-repeat no-repeat;\"></span></div><div id=\"article_content\" class=\"article_content\" style=\"margin: 20px 0px 0px; line-height: 26px; font-family: Arial;\"><p style=\"margin: 0px; padding: 0px;\">转载于：<a href=\"http://fengqing888.blog.163.com/blog/static/3301141620100623933512/\">http://fengqing888.blog.163.com/blog/static/3301141620100623933512/</a></p><p style=\"margin: 0px; padding: 0px;\">1.冒号（:）用法<br><br>（1）表示机构内位域的定义（即该变量占几个bit空间）<br><br>typedef struct _XXX{<br><br>unsigned char a:4;<br><br>unsigned char c;<br><br>} ; XXX<br><br>（2）构造函数后面的冒号起分割作用，是类给成员变量赋值的方法，初始化列表，更适用于成员变量的常量const型。<br><br>struct _XXX{<br><br>_XXX() : y(0xc0) {}<br><br>};<br><br>（3） public:和private:后面的冒号，表示后面定义的所有成员都是公有或私有的，直到下一个\"public:”或\"private:”出现为止。\"private:\"为默认处理。<br><br>（4）类名冒号后面的是用来定义类的继承。<br><br>class 派生类名 : 继承方式 基类名<br><br>{<br><br>派生类的成员<br><br>};<br><br>继承方式：public、private和protected，默认处理是public。<br><br>2．双冒号（::）用法<br><br>（1）表示“域操作符”<br>例：声明了一个类A，类A里声明了一个成员函数void f()，但没有在类的声明里给出f的定义，那么在类外定义f时，&nbsp;<br>就要写成void A::f()，表示这个f()函数是类A的成员函数。<br><br>（2）直接用在全局函数前，表示是全局函数&nbsp;<br>例：在VC里，你可以在调用API 函数里，在API函数名前加：：<br><br>（3）表示引用成员函数及变量，作用域成员运算符<br><br>例：System::Math::Sqrt() 相当于System.Math.Sqrt()<br>——————————————————————————————————————<br><br>VC中如下<br><br>::是C++里的“作用域分解运算符”。比如声明了一个类A，类A里声明了一个成员函数voidf()，但没有在类的声明里给出f的定义，那么在类外定义f时，就要写成voidA::f()，表示这个f()函数是类A的成员函数。<br>　　:: 一般还有一种用法，就是直接用在全局函数前，表示是全局函数。当类的成员函数跟类外的一个全局函数同名时，考试,大提示在类内定义的时候，打此函数名默认调用的是本身的成员函数；如果要调用同名的全局函数时，就必须打上::以示区别。比如在VC里，你可以在调用API函数时，在API函数名前加::。（编辑：）</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">*********************************************************************************************</p><p style=\"margin: 0px; padding: 0px;\">*********************************************************************************************</p><p style=\"margin: 0px; padding: 0px;\">*********************************************************************************************</p><p style=\"margin: 0px; padding: 0px;\">这篇文章将总结C/C++中的冒号的用法。<br><br>1、位域定义<br>这个在前面关于位结构体的文章里说得够多的了，不再重复了。<br><br>2、类构造函数(Constructor）的初始化列表<br>先说下什么叫构造函数吧（是不是啰嗦了？C++的人应该都知道了吧，还是以防万一一下）。所谓构造函数，就是与类同名的函数，它与普通函数的区别在于，它没有返回类型。<br>在构造函数后面紧跟着冒号加初始化列表，各初始化变量之间以逗号(,)隔开。下面举个例子。<br>class myClass<br>{<br>public :<br>myClass();// 构造函数，无返回类型，可以有参数列表，这里省去<br>~myClass();// 析构函数<br>int a;<br>const int b;<br>}<br><br>myClass::myClass():a(1),b(1)// 初始化列表<br>{<br>}<br>上面的例子展示了冒号的这个用法，下面对这个用法进行几点说明：<br>1)初始化列表的作用相当于在构造函数内进行相应成员变量的赋值，但两者是有差别的。<br>在初始化列表中是对变量进行初始化，而在构造函数内是进行赋值操作。两都的差别在对于像const类型数据的操作上表现得尤为明显。我们知道，const类型的变量必须在定义时进行初始化，而不能对const型的变量进行赋值，因此const类型的成员变量只能（而且必须）在初始化列表中进行初始化，即下面的代码将会出错：<br>myClass::myClass（）<br>{<br>a = 1;// 没错，效果相当于在初始化列表中进行初始化<br>b = 1;// 出错，const变量不能进行赋值操作；<br>}<br>2）初始化的顺序与成员变量声名的顺序相同。<br>先看一下下面的程序：<br>myClass::myClass():b(1),a(b)<br>{<br>}<br>这样的执行结果a,b各是多少呢？b=1,a=1?不是，b=1而a是个随机数。这一点是相当重要的哦，一般在初始化列表中进行初始化时，初始化的顺序应与声明的顺序保持一致，防止出现不必要的错误。<br>3）对于继承的类来说，在初始化列表中也可以进行基类的初始化，初始化的顺序是先基类初始化，然后再根据该类自己的变量的声明顺序进行初始化。<br><br>3、声明基类。<br>假设我们重新定义一个类，继承自myClass类。定义方式如下：<br>class derivedClass : public myClass<br>{<br>// 略去<br>}<br>这里的冒号起到的就是声名基类的作用，在基类类名前面可以加public/private/protected等标签，用于标识继承的类型，也可以省略，省略的话，用class定义的类默认为private，用struct定义的类默认为public，至于具体各个标签有什么区别这里就不说了。<br>与初始化列表一样的，这里也可以声名多个基类，各基类之间用逗号(,)隔开。<br><br>4、条件语句(? :)<br>与?构成条件语句，作用相当于if else，如下；<br>int a,b,c;<br>a=3;<br>b=2;<br>c=a&gt;b?a:b;// 如果a&gt;b成立，则反a赋给c，否则把b赋给c<br>条件语句的结构为：<br>条件表达式?表达式1:表达式2<br>当条件表达式为true时，表达式的值为表达式1的值，否则为表达式2的值。<br>几点说明：<br>1）?:可以嵌套，但不推荐使用（难懂），下面的表达式你能看懂啥意思不？<br>int max = i&gt;j ? i&gt;k ? i : k : j&gt;k ? j : k;<br>脑袋大了吧，呵呵。<br>2）?:具有很低的优先级，这个要注意哦，下面的程序执行结果是啥呢？<br>int i = 3;<br>int j = 2;<br>cout &lt;&lt; i&gt;j?i:j;// 出错，&lt;&lt;比&gt;具有更高的优先级，执行顺序为 ((cout&lt;&lt;i)&gt;j)?i:j,相当于是比较cout&lt;&lt;i与j的大小，然后根据比较结果决定表达式值为i或j，这显然要出错的，cout&lt;&lt;i的值是cout，不能跟整型数j进行比较。<br>cout &lt;&lt; (i&gt;j)?i:j;//输出1或0，相当于(cout&lt;&lt;(i&gt;j))作为判决条件，来决定表达式的值为i或j，而cout&lt;&lt;(i&gt;j)，i&gt;j则输出1否则0，然后再将(cout&lt;&lt;(i&gt;j))作为？：的条件，如果cout正确执行则为1（true），否则为0（false），以此决定表达式值为i或j<br>cout &lt;&lt;(i&gt;j?i:j);//i&gt;j则输出i，否则输出j，表达式值为true如果cout正确执行，否则为false<br>更多的关于优先级的问题就不说了。<br><br>5、语句标签<br>通常跟goto配合使用，如：<br>step1: a = f1();<br>....<br>goto step1;<br>这种作法也不是很推荐，原因在于它破坏了语句的顺序执行，这样的代价大家应该清楚吧。不过存在即为合理嘛，既然它还存在，肯定还是有它的用处有它的好处的，比如说，多层嵌套的退出（会比break continue直观一点吧），也可以避免重复代码之类之类的<br><br>6、switch语句中case后。<br>这个不说了，要是不会的话，我也没话可说了。<br><br>7、汇编指令模板<br>这个我也不懂，不班门弄斧了，可以参考一下：<a href=\"http://developer.e800.com.cn/articles/2006/43/1144846933898_1.html\">http://developer.e800.com.cn/articles/2006/43/1144846933898_1.html</a><br>改天学习一下。</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><p style=\"margin: 0px; padding: 0px;\"></p><p style=\"margin: 0px; padding: 0px;\">*********************************************************************************************</p><p style=\"margin: 0px; padding: 0px;\">*********************************************************************************************</p><p style=\"margin: 0px; padding: 0px;\">*********************************************************************************************</p>1、&nbsp;<br>作用域符号::的前面一般是类名称，后面一般是该类的成员名称，C++为例避免不同的类有名称相同的成员而采用作用域的方式进行区分<br>如：A,B表示两个类，在A,B中都有成员member。那么<br>A::member就表示类A中的成员member<br>B::member就表示类B中的成员member&nbsp;<br><br><br><br>2、&nbsp;<br>全局作用域符号：当全局变量在局部函数中与其中某个变量重名，那么就可以用::来区分如：&nbsp;<br><br>char zhou; //全局变量&nbsp;<br><br>void sleep（）&nbsp;<br><br>｛&nbsp;<br><br>char zhou; //局部变量&nbsp;<br><br>char(局部变量) = char(局部变量) *char(局部变量) ;&nbsp;<br><br>::char(全局变量) =::char(全局变量) *char(局部变量);&nbsp;<br><br>｝&nbsp;<br><br><br>3、&nbsp;<br>::是C++里的“作用域分解运算符”。比如声明了一个类A，类A里声明了一个成员函数voidf()，但没有在类的声明里给出f的定义，那么在类外定义f时，就要写成voidA::f()，表示这个f()函数是类A的成员函数。例如<br><p style=\"margin: 0px; padding: 0px;\"></p><p style=\"margin: 0px; padding: 0px;\">&nbsp;</p><div class=\"dp-highlighter bg_cpp\" style=\"font-family: Consolas, 'Courier New', Courier, mono, serif; font-size: 12px; background-color: rgb(231, 229, 220); width: 936.53125px; overflow: auto; padding-top: 1px; margin: 18px 0px !important;\"><div class=\"bar\" style=\"padding-left: 45px;\"><div class=\"tools\" style=\"padding: 3px 8px 10px 10px; font-size: 9px; line-height: normal; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; color: silver; background-color: rgb(248, 248, 248); border-left-width: 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108);\"><b>[cpp]</b>&nbsp;<a href=\"http://blog.csdn.net/zimingjushi/article/details/6549390#\" class=\"ViewSource\" title=\"view plain\" style=\"color: rgb(160, 160, 160); text-decoration: none; background-image: url(http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/images/default/ico_plain.gif); border: none; padding: 1px; margin: 0px 10px 0px 0px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px; background-position: 0% 0%; background-repeat: no-repeat no-repeat;\">view plain</a><a href=\"http://blog.csdn.net/zimingjushi/article/details/6549390#\" class=\"CopyToClipboard\" title=\"copy\" style=\"color: rgb(160, 160, 160); text-decoration: none; background-image: url(http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/images/default/ico_copy.gif); border: none; padding: 1px; margin: 0px 10px 0px 0px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px; background-position: 0% 0%; background-repeat: no-repeat no-repeat;\">copy</a><div style=\"position: absolute; left: 469px; top: 5253px; width: 18px; height: 18px; z-index: 99;\"><embed id=\"ZeroClipboardMovie_1\" src=\"http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" width=\"18\" height=\"18\" name=\"ZeroClipboardMovie_1\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"id=1&amp;width=18&amp;height=18\" wmode=\"transparent\"></div></div></div><ol start=\"1\" class=\"dp-cpp\" style=\"padding: 0px; border: none; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin: 0px 0px 1px 45px !important;\"><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\"><span style=\"margin: 0px; padding: 0px; border: none;\">01&nbsp;&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">class</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;CA&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">02&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none;\">:&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">03&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;ca_var;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">04&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;add(</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;a,&nbsp;</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;b);&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">05&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;add(</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;a);&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">06&nbsp;&nbsp;};&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">07&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">08&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0);\">//那么在实现这个函数时，必须这样书写：&nbsp;&nbsp;</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">09&nbsp;&nbsp;<span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;CA::add(</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;a,&nbsp;</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;b)&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">10&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">11&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">return</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;a&nbsp;+&nbsp;b;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">12&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">14&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0);\">//另外，双冒号也常常用于在类变量内部作为当前类实例的元素进行表示，比如:&nbsp;&nbsp;</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">15&nbsp;&nbsp;<span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;CA::add(</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;a)&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">16&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">17&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">return</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;a&nbsp;+&nbsp;::ca_var; &nbsp; &nbsp;</span></span></li></ol></div><p></p></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span><div style=\"clear: both;\"></div></div>"
    }
  ]
}
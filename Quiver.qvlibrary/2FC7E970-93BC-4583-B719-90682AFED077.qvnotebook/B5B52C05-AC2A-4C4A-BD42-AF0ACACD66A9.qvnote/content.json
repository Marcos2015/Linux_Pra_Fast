{
  "title": "C++中各种数据成员及成员函数的定义及使用",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"position: relative;\"><div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><div class=\"articalTitle\" style=\"clear: both; line-height: 20px; padding-bottom: 10px; color: rgb(50, 62, 50); font-family: Verdana, 宋体, sans-serif; font-size: 12px;\"><span style=\"background-color: rgb(255, 204, 0);\"><h2 id=\"t_5c5bc9070100xmuk\" class=\"titName SG_txta\" style=\"margin: 0px; padding: 0px; border: 0px; list-style: none; color: rgb(117, 76, 39); font-size: 18px; font-family: 微软雅黑, 黑体; font-weight: 300; display: inline;\">C++中各种数据成员及成员函数的定义及使用</h2>&nbsp;</span><a class=\"SG_aBtn SG_aBtn_ico SG_turn\" action-type=\"reblog\" action-data=\"{srcBlog:1, blogId:'5c5bc9070100xmuk'}\" style=\"cursor: pointer; padding: 0px 0px 0px 3px; overflow: hidden; white-space: nowrap; display: inline-block; margin-right: 6px; background-image: url(http://simg.sinajs.cn/blog7newtpl/image/4/4_8/images/sg_newsp.png); position: relative; letter-spacing: 5px; width: 86px; zoom: 1; background-position: 0px 0px;\"><cite style=\"font-style: normal; line-height: 23px; padding: 0px 20px 0px 32px; height: 23px; min-width: 1px; overflow-x: visible; background-image: url(http://simg.sinajs.cn/blog7newtpl/image/4/4_8/images/sg_newsp.png); width: 34px; background-color: rgb(255, 204, 0); display: inline-block !important; background-position: 100% -28px; background-repeat: no-repeat no-repeat;\"><span class=\"arrow\" style=\"font-size: 7px; position: absolute; right: 5px; top: 2px; display: inline !important;\">▼</span></cite></a></div><div class=\"articalTag\" id=\"sina_keyword_ad_area\" style=\"width: 690px; clear: both; word-break: break-all; line-height: 20px; color: rgb(50, 62, 50); font-family: Verdana, 宋体, sans-serif; font-size: 12px;\"></div><div id=\"sina_keyword_ad_area2\" class=\"articalContent  \" style=\"width: 690px; clear: both; padding-top: 18px; line-height: 21px; padding-bottom: 30px; word-wrap: normal; word-break: normal; overflow: hidden; font-family: simsun; color: rgb(50, 62, 50);\"><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">1.类是<strong>自定义的数据类型</strong>．类与应用程序不同，类的功能虽然独立,但不能独立启动,就象汽车零件那样.</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">2.Class 是一种数据类型, 其变量为对象.对象包含有member variables(<strong>成员变量</strong>)和member functions(<strong>成员函数</strong>).</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong style=\"background-color: rgb(255, 204, 0);\">class Date{<br>&nbsp;<wbr>&nbsp;int year, month, day;<br>public:<br>&nbsp;<wbr>&nbsp;void set(int y,int m,int d);&nbsp;<wbr>&nbsp;// 赋值操作<br>&nbsp;<wbr>&nbsp;bool isLeapYear();&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;// 判断闰年<br>&nbsp;<wbr>&nbsp;void print();&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;// 输出日期<br>};</strong></font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">3.在类(class)中 , 成员函数及成员变量会分为两大类 : public members (<strong>公开成员</strong>)、private members (<strong>私有成员</strong>)<br>1.)&nbsp;<strong>public</strong>&nbsp;members :被定义为public members 的成员函数及成员变量 , 可在<strong>任何的函数中被使用</strong>&nbsp;.包括main函数,及其它非成员函数.</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">2.)&nbsp;<strong>private</strong>&nbsp;members :被定义为private members 的成员函数及成员变量 ,&nbsp;<strong>只能在成员函数中被使用</strong>&nbsp;.</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">4.<strong>成员函数</strong>在<strong>类外部定义</strong>时，在函数名称前<strong>应加上</strong>日期<strong>类名前缀</strong>Date和命名空间<strong>引导符“::”，</strong>它表示着自己属于某一个名空间(类)，与普通函数相区别。</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><strong>void Date::set(int y,int m,int d)&nbsp;<wbr>&nbsp;{&nbsp;<wbr>&nbsp;<wbr>&nbsp;year=y;&nbsp;<wbr>&nbsp;month=m; &nbsp;<wbr>day=d;&nbsp;<wbr>&nbsp;}</strong></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">成员函数可以在类内,也可以在类外定义,若在<strong>类内定义</strong>,则默认为<strong>内联函数（inline</strong>）</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">5.对象是拥有操作的实体，是由类创建的</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">6.<strong>访问</strong>成员函数的方式</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">&nbsp;<wbr><strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">（1）对象方式&nbsp;<wbr>&nbsp;<wbr>&nbsp;Date d;&nbsp;<wbr>&nbsp;<wbr>&nbsp;&nbsp;<wbr>d.set(2011,12,5);</font></strong></span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">&nbsp;<wbr>（2）对象<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">指针方式<br></font></strong>&nbsp;<wbr>&nbsp;<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">Date* dp = new Date;<br>&nbsp;<wbr>&nbsp;dp-&gt;set(2011,12,5);<br>&nbsp;<wbr>&nbsp;// …<br>&nbsp;<wbr>&nbsp;delete dp;</font></strong></span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">7.成员函数的操作，如果<strong>只对对象进行读操作</strong>，则该成员函数可以设计为<strong>常对象成员函数</strong>，好处是让使用者一目了然的知道该成员函数<strong>不会改变对象值，</strong>同时让类的实现者更方便地调试。</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong>常成员函数</strong>的<strong>声明和定义</strong>在形式上必须一致，即在函数形参列表的<strong>右括号后面加上<font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">const</font></strong>。如</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">&nbsp;<wbr>class Date{<br>&nbsp;<wbr>pubilc:<br>&nbsp;<wbr>void set(int y,int m,int d);<br>&nbsp;<wbr><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong>void print() const;<br></strong></font>…}</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">&nbsp;<wbr>inline&nbsp;<font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong>void Date::print() const<br></strong></font>{<br>cout&lt;&lt;setfill('0');<br>&nbsp;<wbr>&nbsp;cout&lt;&lt;setw(4)&lt;&lt;year&lt;&lt;'-'&lt;&lt;setw(2)&lt;&lt;month&lt;&lt;'-'&lt;&lt;setw(2)&lt;&lt;day&lt;&lt;'\\n';<br>&nbsp;<wbr>&nbsp;cout&lt;&lt;setfill(' ');<br>}</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">8.常成员函数&nbsp;<wbr>&nbsp;对捆绑的对象,&nbsp;<strong>不允许写操作<br></strong>函数的常量参数&nbsp;<wbr>&nbsp;对传递的参数, 不允许写操作<br>例如:<br>&nbsp;<wbr>&nbsp;<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">bool Date::comp(const Date&amp; a) const</font></strong></font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">{<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;year = 2005; // error: 常成员函数捆绑的对象<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;a.year = 2003;&nbsp;<wbr>&nbsp;//&nbsp;<font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong>error</strong></font>: 常量对象<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;return year==a.year &amp;&amp;<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;month==a.month &amp;&amp;<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;day==a.day;<br>&nbsp;<wbr>&nbsp;}</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">9.一个整型变量的<strong>前增量操作</strong>的结果与变量值是一样的，而且前增量操作的结果是左值，操作可以连贯，而<strong>后增量操作</strong>的结果是增量之前的变量值，它是<strong>临时变量</strong>，当表达式计算工作完成后，该临时变量随即消失，所以变量最终值与后增量结果是错位的，</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">如： int a=1,b=1,c =1,d=1;<br><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong>&nbsp;<wbr>(++a)++;&nbsp;<wbr>&nbsp;//a结果为3<br>&nbsp;<wbr>&nbsp;(b++)++;//结果b=2，(b++)的结果是临时变量，在其加1随后又抛弃<br>&nbsp;<wbr>++(++c);//结果c=3<br>&nbsp;<wbr>++(d++);//结果d=2，与b相似<br></strong></font><font color=\"#000000\" style=\"word-wrap: normal; word-break: normal;\">10.C++将<strong>struct</strong>纳入了类机制中，struct也可以包含成员函数，<strong>与class的区别</strong>在于<strong>关键字不同</strong>，<strong>默认的访问控制符不同，struct默认访问控制符为public。</strong></font></font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">11.类的<strong>静态数据成员</strong>，保证<strong>每个类只有一个实体</strong>。<strong>每个对象不再有它的副本</strong>。如：</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">#include&lt;iostream&gt;<br>using namespace std;<br>//-------------------------------------<br>class Student{<br>&nbsp;<wbr>&nbsp;<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">static int number;<br></font></strong>&nbsp;<wbr>&nbsp;string name;<br>public:<br>&nbsp;<wbr>&nbsp;void set(string str)</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">{<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;name = str;<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;++number;<br>&nbsp;<wbr>&nbsp;}<br>&nbsp;<wbr>&nbsp;void print()</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">{</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">cout&lt;&lt;name&lt;&lt;\" -&gt; students are \"&lt;&lt;number&lt;&lt;\" numbers\\n\";</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">}<br>};</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">int Student::number = 0;&nbsp;<wbr>&nbsp;//静态数据成员在类外分配空间和初始化<br></font></strong>//-------------------------------------<br>void fn()</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">{<br>&nbsp;<wbr>&nbsp;Student s1;<br>&nbsp;<wbr>&nbsp;s1.set(\"Jenny\");<br>&nbsp;<wbr>&nbsp;Student s2;<br>&nbsp;<wbr>&nbsp;s2.set(\"Randy\");<br>&nbsp;<wbr>&nbsp;s1.print();<br>}</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">int main()</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">{<br>&nbsp;<wbr>&nbsp;Student s;<br>&nbsp;<wbr>&nbsp;s.set(\"Smith\");<br>&nbsp;<wbr>&nbsp;fn();<br>&nbsp;<wbr>&nbsp;s.print();</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">system(\"pause\");</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">return 0;<br>}</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">程序执行结果：Jenny-&gt;students are 3numbers</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;Smith-&gt;students are 3numbers</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">12.<strong>静态成员函数</strong>一般设计为公有的,以<strong>访问私有静态数据成员</strong>为目的.调用方式是以类名加域操作符::后跟静态成员函数．如：</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><font color=\"#000000\" style=\"word-wrap: normal; word-break: normal;\">class Student{<br>&nbsp;<wbr>&nbsp;<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">static int num;&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;// 静态私有成员<br></font></strong>&nbsp;<wbr>&nbsp;string name;<br>&nbsp;<wbr>&nbsp;//...<br>public:<br>&nbsp;<wbr>&nbsp;// ...<br>&nbsp;<wbr></font></font>&nbsp;<font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><strong>static void showNum()</strong></font></span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">{<br>　　cout&lt;&lt;num&lt;&lt;“\\n”;&nbsp;<wbr>&nbsp;<wbr>&nbsp;// 访问静态私有成员<br>}<br>};<br><strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">int Student::num = 0; // 静态数据成员初始化<br></font></strong>int main()</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">{<br>&nbsp;<wbr>&nbsp;Student s;<br>&nbsp;<wbr>&nbsp;s.showNum();&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;// 可行，但非标准<br>&nbsp;<wbr>&nbsp;<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">Student::showNum(); // 静态成员函数调用<br></font></strong>}</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">13.静态成员函数的<strong>定义在类外边</strong>时，类名前应该<strong>免去static</strong>，只在声明时必要。<br>静态成员函数<strong>不能访问</strong>本类中<strong>非静态</strong>的数据成员。但<strong>可以访问传入对象的私有成员</strong>。</font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">void showNum(<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">Student &amp;s</font></strong>)</span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><span style=\"background-color: rgb(255, 204, 0);\">{<br>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;cout&lt;&lt;name&lt;&lt;“\\n”;&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;//&nbsp;<font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">错 访问私有成员<br></font>　<strong><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\">cout&lt;&lt;s.name&lt;&lt;“\\n”;&nbsp;<wbr>&nbsp;<wbr>&nbsp;// 访问给定对象的私有成员<br></font></strong>　}<br></span></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><font color=\"#ED1C24\" style=\"word-wrap: normal; word-break: normal;\"><font color=\"#000000\" style=\"word-wrap: normal; word-break: normal;\"><br><span style=\"color: rgb(128, 0, 128);\">﻿</span><br><br></font><br>&nbsp;<wbr></font></p><p style=\"margin: 0px 0px 5px; padding: 0px; border: 0px; list-style: none; word-wrap: normal; word-break: normal;\"><br></p></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span></div>"
    }
  ]
}
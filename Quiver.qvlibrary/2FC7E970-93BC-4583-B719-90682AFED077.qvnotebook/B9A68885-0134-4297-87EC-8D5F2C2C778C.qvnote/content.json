{
  "title": "C++字符串长度",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">字符串的长度通常是指字符串中包含字符的数目，但有的时候人们需要的是字符串所占字节的数目。常见的获取字符串长度的方法包括如下几种。</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>1.使用sizeof获取字符串长度</strong></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">sizeof的含义很明确，它用以获取字符数组的字节数（当然包括结束符\\0）。对于ANSI字符串和UNICODE字符串，形式如下：</div><pre style=\"color: rgb(0, 0, 0); font-size: 14px;\"><li><strong>sizeof</strong>(cs)/<strong>sizeof</strong>(<strong>char</strong>) &nbsp;\n</li><li><strong>sizeof</strong>(ws)/<strong>sizeof</strong>(<strong>wchar_t</strong>)&nbsp;<span id=\"more-305\"></span>\n</li></pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">可以采用类似的方式，获取到其字符的数目。如果遇到MBCS，如”中文ABC”，很显然，这种办法就无法奏效了，因为sizeof()并不知道哪个char是半个字符。</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>2.使用strlen()获取字符串长度</strong></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">strlen()及wcslen()是标准C++定义的函数，它们分别获取ASCII字符串及宽字符串的长度，如：</div><pre style=\"color: rgb(0, 0, 0); font-size: 14px;\"><li><strong>size_t</strong>&nbsp;strlen(&nbsp;<strong>const&nbsp;char</strong>&nbsp;*string&nbsp;); &nbsp;\n</li><li><strong>size_t</strong>&nbsp;wcslen(&nbsp;<strong>const&nbsp;wchar_t</strong>&nbsp;*string&nbsp;);&nbsp;\n</li></pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">strlen()与wcslen()采取\\0作为字符串的结束符，并返回不包括\\0在内的字符数目。</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>3.使用CString::GetLength()获取字符串长度</strong></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">CStringT继承于CSimpleStringT类，该类具有函数：</div><pre style=\"color: rgb(0, 0, 0); font-size: 14px;\"><li><strong>int</strong>&nbsp;GetLength(&nbsp;)&nbsp;<strong>const&nbsp;throw</strong>(&nbsp;);&nbsp;\n</li></pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">GetLength()返回字符而非字节的数目。比如：CStringW中，”中文ABC”的GetLength()会返回5，而非10。那么 对于MBCS呢？同样，它也只能将一个字节当做一个字符，CStringA表示的”中文ABC”的GetLength()则会返回7。</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>4.使用std::string::size()获取字符串长度</strong></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">basic_string同样具有获取大小的函数：</div><pre style=\"color: rgb(0, 0, 0); font-size: 14px;\"><li>size_type&nbsp;length(&nbsp;)&nbsp;<strong>const</strong>; &nbsp;\n</li><li>size_type&nbsp;size(&nbsp;)&nbsp;<strong>const</strong>;&nbsp;\n</li></pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">length()和size()的功能完全一样，它们仅仅返回字符而非字节的个数。如果遇到MCBS，它的表现和CStringA::GetLength()一样。</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><strong>5.使用_bstr_t::length()获取字符串长度</strong></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">_bstr_t类的length()方法也许是获取字符数目的最佳方案，严格意义来讲，_bstr_t还称不上一个完善的字符串类，它主要提供了对BSTR类型的封装，基本上没几个字符串操作的函数。不过，_bstr_t 提供了length()函数：</div><pre style=\"color: rgb(0, 0, 0); font-size: 14px;\"><li>unsigned&nbsp;<strong>int</strong>&nbsp;length&nbsp;(&nbsp;)&nbsp;<strong>const&nbsp;throw</strong>(&nbsp;);&nbsp;&nbsp;\n</li></pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">该函数返回字符的数目。值得称道的是，对于MBCS字符串，它会返回真正的字符数目。</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">现在动手</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">编写如下程序，体验获取字符串长度的各种方法。</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">【程序 4-8】各种获取字符串长度的方法</div><pre style=\"color: rgb(0, 0, 0); font-size: 14px;\"><li>01&nbsp;&nbsp;#include&nbsp;\"stdafx.h\"&nbsp;\n</li><li>02&nbsp;&nbsp;#include&nbsp;\"string\"&nbsp;\n</li><li>03&nbsp;&nbsp;#include&nbsp;\"comutil.h\"&nbsp;\n</li><li>04&nbsp;&nbsp;#pragma&nbsp;comment(&nbsp;lib,&nbsp;\"comsuppw.lib\"&nbsp;) &nbsp;\n</li><li>05&nbsp;&nbsp; &nbsp;\n</li><li>06&nbsp;&nbsp;<strong>using&nbsp;namespace</strong>&nbsp;std; &nbsp;\n</li><li>07&nbsp;&nbsp; &nbsp;\n</li><li>08&nbsp;&nbsp;<strong>int</strong>&nbsp;main() &nbsp;\n</li><li>09&nbsp;&nbsp;{ &nbsp;\n</li><li>10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>char</strong>&nbsp;s1[]&nbsp;=&nbsp;\"中文ABC\"; &nbsp;\n</li><li>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>wchar_t</strong>&nbsp;s2[]&nbsp;=&nbsp;L\"中文ABC\"; &nbsp;\n</li><li>12&nbsp;&nbsp; &nbsp;\n</li><li>13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用sizeof获取字符串长度 &nbsp;\n</li><li>14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"sizeof&nbsp;s1:&nbsp;%d\\r\\n\",&nbsp;<strong>sizeof</strong>(s1)); &nbsp;\n</li><li>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"sizeof&nbsp;s2:&nbsp;%d\\r\\n\",&nbsp;<strong>sizeof</strong>(s2)); &nbsp;\n</li><li>16&nbsp;&nbsp; &nbsp;\n</li><li>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用strlen获取字符串长度 &nbsp;\n</li><li>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"strlen(s1):&nbsp;%d\\r\\n\",&nbsp;strlen(s1)); &nbsp;\n</li><li>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"wcslen(s2):&nbsp;%d\\r\\n\",&nbsp;wcslen(s2)); &nbsp;\n</li><li>20&nbsp;&nbsp; &nbsp;\n</li><li>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用CString::GetLength()获取字符串长度 &nbsp;\n</li><li>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CStringA&nbsp;sa&nbsp;=&nbsp;s1; &nbsp;\n</li><li>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CStringW&nbsp;sw&nbsp;=&nbsp;s2; &nbsp;\n</li><li>24&nbsp;&nbsp; &nbsp;\n</li><li>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"sa.GetLength():&nbsp;%d\\r\\n\",&nbsp;sa.GetLength()); &nbsp;\n</li><li>26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"sw.GetLength():&nbsp;%d\\r\\n\",&nbsp;sw.GetLength()); &nbsp;\n</li><li>27&nbsp;&nbsp; &nbsp;\n</li><li>28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用string::size()获取字符串长度 &nbsp;\n</li><li>29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;ss1&nbsp;=&nbsp;s1; &nbsp;\n</li><li>30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wstring&nbsp;ss2&nbsp;=&nbsp;s2; &nbsp;\n</li><li>31&nbsp;&nbsp; &nbsp;\n</li><li>32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"ss1.size():&nbsp;%d\\r\\n\",&nbsp;ss1.size()); &nbsp;\n</li><li>33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"ss2.size():&nbsp;%d\\r\\n\",&nbsp;ss2.size()); &nbsp;\n</li><li>34&nbsp;&nbsp; &nbsp;\n</li><li>35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用_bstr_t::length()获取字符串长度 &nbsp;\n</li><li>36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_bstr_t&nbsp;bs1(s1); &nbsp;\n</li><li>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_bstr_t&nbsp;bs2(s2); &nbsp;\n</li><li>38&nbsp;&nbsp; &nbsp;\n</li><li>39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"bs1.length():&nbsp;%d\\r\\n\",&nbsp;bs1.length()); &nbsp;\n</li><li>40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"bs2.length():&nbsp;%d\\r\\n\",&nbsp;bs2.length()); &nbsp;\n</li><li>41&nbsp;&nbsp; &nbsp;\n</li><li>42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>return</strong>&nbsp;0;\n</li><li>43&nbsp;}&nbsp;\n</li></pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">输出结果:</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">sizeof&nbsp;&nbsp; s1:&nbsp; 8</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">sizeof&nbsp;&nbsp; s2:&nbsp; 12</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">strlen(s1):&nbsp;&nbsp;7</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">wcslen(s2):&nbsp;&nbsp;5</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">sa.GetLength():&nbsp; 7</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">sw.GetLength():&nbsp; 5</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">ss1.size():&nbsp; 7</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">ss2.size():&nbsp; 5</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">bs1.length():&nbsp; 5</div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">bs2.length():&nbsp; 5</div>"
    }
  ]
}
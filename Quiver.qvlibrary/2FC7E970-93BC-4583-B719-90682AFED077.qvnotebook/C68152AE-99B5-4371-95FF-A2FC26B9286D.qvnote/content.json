{
  "title": "C++进阶 - 内存管理",
  "cells": [
    {
      "type": "text",
      "data": "<div id=\"article_content\" class=\"article_content tracking-ad\" data-mod=\"popu_307\" data-dsm=\"post\" style=\"margin: 20px 0px 0px; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; font-stretch: normal; font-size: 14px; line-height: 26px; font-family: Arial; color: rgb(0, 0, 0); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><div class=\"markdown_views\" style=\"font-family: &quot;microsoft yahei&quot;; font-size: 15px; color: rgb(63, 63, 63);\"><h3 id=\"内存分配方式\" style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; line-height: 1.3em; font-size: 1.73em;\">内存分配方式</h3><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\">静态存储区分配&nbsp;<br style=\"box-sizing: border-box;\">内存在编译的时候就已经分配好了，这块内存在程序的整个运行期间都存在。</li><li style=\"box-sizing: border-box;\">栈内存&nbsp;<br style=\"box-sizing: border-box;\">函数的局部变量在执行时的存储单元，函数退出时，由于栈平衡 这些内存全部释放。</li><li style=\"box-sizing: border-box;\">堆内存&nbsp;<br style=\"box-sizing: border-box;\">用new/delete分配的内存，内存的生存期由我们自己决定</li><li style=\"box-sizing: border-box;\">自由存储区&nbsp;<br style=\"box-sizing: border-box;\">使用malloc进行分配，使用free进行回收。和堆类似。</li><li style=\"box-sizing: border-box;\">常量存储区&nbsp;<br style=\"box-sizing: border-box;\">这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</li></ul></blockquote><hr style=\"box-sizing: border-box; margin-top: 2em; margin-bottom: 2em; border-top-width: 1px; border-top-style: solid; border-top-color: rgba(128, 128, 128, 0.0980392);\"><h3 id=\"指针与数组的区别\" style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; line-height: 1.3em; font-size: 1.73em;\"><a name=\"t1\" target=\"_blank\" style=\"color: rgb(79, 161, 219); box-sizing: border-box;\"></a>指针与数组的区别</h3><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">以字符串为例比较指针与数组的区别</p><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\">对内容的修改&nbsp;<br style=\"box-sizing: border-box;\">先看下面的代码</li></ul></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-preprocessor\" style=\"color: rgb(68, 68, 68); box-sizing: border-box;\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">using</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">namespace</span> <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">std</span>;\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> str[] = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"hello\"</span>;\n    str[<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">2</span>] = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">'x'</span>;\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; str &lt;&lt; endl;\n\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> *p = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"hello\"</span>;\n    p[<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">2</span>] = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">'x'</span>;\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; p &lt;&lt; endl;\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">看上去并没什么毛病（编译器也是这么认为的），然后运行一把，程序打印出hexlo，然后就挂掉了。。。&nbsp;<br style=\"box-sizing: border-box;\">数组名对应着一块内存，其地址，容量是固定的，只有数组的内容可以改变；指针可以指向任意类型的内存块。p[2]=‘X’; 看起来是没有错，不过他在试图修改程序常量字符串的值！！！这个是不被允许的！</p><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\">内容的复制与比较</li></ul></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-preprocessor\" style=\"color: rgb(68, 68, 68); box-sizing: border-box;\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">using</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">namespace</span> <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">std</span>;\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> str[] = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"hello\"</span>;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> strs[<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">6</span>]{<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>};\n    <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//strs = str;  </span>\n    strcpy_s(strs, str);\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; strs &lt;&lt; endl;\n\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> * p = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"www.breeziness.cn\"</span>;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> *ps = NULL;\n    ps = p;   <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//仅仅是把p指向的地址赋给了ps</span>\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; ps &lt;&lt; endl;\n\n    <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//把字符串的值赋给p_s</span>\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> * p_s = <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">new</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span>[<span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">strlen</span>(p)+<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">1</span>];\n    strcpy_s(p_s,<span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">strlen</span>(p)+<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">1</span>, p);\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; p_s &lt;&lt; endl;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">delete</span> p_s;\n    p_s = NULL;\n\n    <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//比较大小的时候也不可以直接用==  </span>\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">if</span> (<span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">strcmp</span>(str,strs)==<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>)\n    {\n        <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"相等\"</span> &lt;&lt; endl;\n    }\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">15</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">16</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">17</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">18</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">19</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">20</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">21</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">22</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">23</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">24</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">25</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">26</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">27</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">28</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">29</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">30</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\">内存容量的计算&nbsp;<br style=\"box-sizing: border-box;\">sizeof 可以计算数组的容量，但是要注意数组作为参数进行传递时，函数参数中保存的是数组的首地址，是一个指针变量。所以数组作为参数时sizeof计算的仅仅是平台的指针长度。</li></ul></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-preprocessor\" style=\"color: rgb(68, 68, 68); box-sizing: border-box;\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">using</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">namespace</span> <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">std</span>;\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> func(<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> a[])\n{\n    size_t len = <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">sizeof</span> a;\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; len &lt;&lt; endl;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> a[<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">10</span>]{<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>};\n    size_t len = <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">sizeof</span> a;\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; len &lt;&lt; endl;\n    func(a);\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">15</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">16</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">17</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">数组作为参数传递时传递的仅仅是首地址，从反汇编代码中也不难看出。仅将首地址压栈。&nbsp;<br style=\"box-sizing: border-box;\"><img src=\"quiver-image-url/4479E2A76590FBA866E4A91734AE7FE1.png\" alt=\"这里写图片描述\" title=\"\" style=\"border: none; box-sizing: border-box;\" width=\"439\" height=\"257\"></p><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">sizeof 指针的话，自然就是平台的指针长度。而不是指针指向的内存容量。C/C++是没法知道指向内存的大小的。获取字符串的长度，使用strlen( );</p></blockquote><hr style=\"box-sizing: border-box; margin-top: 2em; margin-bottom: 2em; border-top-width: 1px; border-top-style: solid; border-top-color: rgba(128, 128, 128, 0.0980392);\"><h3 id=\"指针参数传递内存\" style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; line-height: 1.3em; font-size: 1.73em;\"><a name=\"t2\" target=\"_blank\" style=\"color: rgb(79, 161, 219); box-sizing: border-box;\"></a>指针参数传递内存</h3><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">指针作为参数时，通常是需要修改指针所指向的变量的值。&nbsp;<br style=\"box-sizing: border-box;\">那么如果用该指针申请动态内存呢？&nbsp;<br style=\"box-sizing: border-box;\">看如下代码</p></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-preprocessor\" style=\"color: rgb(68, 68, 68); box-sizing: border-box;\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">using</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">namespace</span> <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">std</span>;\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> func(<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> *p)\n{\n    p = <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">new</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span>[<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">10</span>];\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}\n\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> funcs(<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> **p)\n{\n    *p = <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">new</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> [<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">10</span>];\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}\n\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> *p = NULL;\n\n    func(p);\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">if</span> (p==NULL)\n    {\n        <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"申请失败\"</span> &lt;&lt; endl;\n    }\n\n\n    funcs(&amp;p);\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">if</span> (p==NULL)\n    {\n        <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"申请失败\"</span> &lt;&lt; endl;\n    }\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">else</span>\n    {\n        <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"申请成功\"</span> &lt;&lt; endl;\n    }\n\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">15</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">16</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">17</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">18</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">19</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">20</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">21</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">22</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">23</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">24</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">25</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">26</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">27</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">28</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">29</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">30</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">31</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">32</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">33</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">34</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">35</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">36</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">37</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">38</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">不要指望用传递进来的指针去申请动态内存！！！&nbsp;<br style=\"box-sizing: border-box;\">可以在逻辑上仔细推敲一下&nbsp;<br style=\"box-sizing: border-box;\">修改普通变量的值传指针&nbsp;<br style=\"box-sizing: border-box;\">修该指针变量的值就应该传二级指针！为指针动态申请内存就是在修改指针的值，so传二级指针</p><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">二级指针如果过于深奥，那么如果要在函数中申请动态内存，可以使用返回值。</p></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> * funs_i()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> * p = <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">new</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span>[<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">10</span>];\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> p;\n}\n\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> *p = funs_i();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">if</span> (p!=NULL)\n    {\n        <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"成功\"</span> &lt;&lt; endl;\n    }\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">15</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">16</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">注意：这里返回的是堆上的指针，而不是栈上的！&nbsp;<br style=\"box-sizing: border-box;\">返回栈上的指针将会是一个不发预料的灾难！因为该内存在函数结束时就已经消亡了</p></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> * funs_1()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span>* p = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"xxxx\"</span>;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> p;\n}\n\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> * funs_2()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> v = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">'c'</span>;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> &amp;v;   <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//编译器警告</span>\n}\n\n\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n    <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//返回的是常量存储区的只读内存</span>\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> *p = funs_1();\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; p &lt;&lt; endl;\n    <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//返回了栈内存，程序出现问题</span>\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> *pp = funs_2();\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; pp &lt;&lt; endl;\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">15</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">16</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">17</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">18</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">19</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">20</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">21</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">22</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">23</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">24</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">可能会觉得很奇怪，为什么p返回的是常量区中的地址，p本身不也在栈内存中？这里要注意，C++ 不管是参数，还是返回值，其实都是副本。func_1（） 返回的是p指向的地址的副本，也就是那个字符串常量的地址。并不是返回p自己的地址。如果像体验一把返回p的地址，可以看看下面的代码（编译器会警告）</p></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cs has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span> ** funs_1()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">char</span>* p = <span class=\"hljs-string\" style=\"color: rgb(0, 136, 0); box-sizing: border-box;\">\"xxxx\"</span>;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> &amp;p;  <span class=\"hljs-comment\" style=\"color: rgb(136, 0, 0); box-sizing: border-box;\">//警告</span>\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li></ul></pre><hr style=\"box-sizing: border-box; margin-top: 2em; margin-bottom: 2em; border-top-width: 1px; border-top-style: solid; border-top-color: rgba(128, 128, 128, 0.0980392);\"><h3 id=\"动态内存的释放-野指针-内存泄漏\" style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; line-height: 1.3em; font-size: 1.73em;\"><a name=\"t3\" target=\"_blank\" style=\"color: rgb(79, 161, 219); box-sizing: border-box;\"></a>动态内存的释放 | 野指针 | 内存泄漏</h3><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">野指针不是NULL指针，而是指向‘垃圾’内存的指针。一般不会用错空指针，因为if语句就可以判断，但是野指针是没法判断的，所以很危险。&nbsp;<br style=\"box-sizing: border-box;\">野指针的成因有两种：</p><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\"><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">指针变量没有初始化，任何指针变量在刚刚被创建时是不会被自动成为NULL指针，他的缺省值是随机的。</p></li><li style=\"box-sizing: border-box;\"><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">指针被 free / delete之后没有被设置为空。如果程序太大，自己都可能搞不清楚是不是合法的指针。注意：free/delete仅仅是释放内存，并不会过问指针有没有置为NULL的事。</p></li><li style=\"box-sizing: border-box;\"><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">指针操作超越了变量的作用范围,如下代码</p></li></ul></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-preprocessor\" style=\"color: rgb(68, 68, 68); box-sizing: border-box;\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">using</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">namespace</span> <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">std</span>;\n\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> func(<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> **p)\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> a = <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n    *p = &amp;a;\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> **p = NULL;\n    func(p);\n    <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">cout</span> &lt;&lt; p &lt;&lt; endl;\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">15</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">16</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">17</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">程序直接GG</p><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">接下来说说动态内存的释放问题&nbsp;<br style=\"box-sizing: border-box;\">先看看如下代码：</p></blockquote><pre class=\"prettyprint\" name=\"code\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: 'Source Code Pro', monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 0px solid rgb(136, 136, 136); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><code class=\"hljs cpp has-numbering\" style=\"display: block; color: inherit; box-sizing: border-box; font-family: 'Source Code Pro', monospace; font-size: inherit; white-space: pre; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; word-wrap: normal;\"><span class=\"hljs-preprocessor\" style=\"color: rgb(68, 68, 68); box-sizing: border-box;\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">using</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">namespace</span> <span class=\"hljs-built_in\" style=\"color: rgb(102, 0, 102); box-sizing: border-box;\">std</span>;\n\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">void</span> func()\n{\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> *p = <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">new</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span>[<span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">100</span>];\n\n}\n<span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">int</span> main()\n{\n\n    func();\n\n    getchar();\n    <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 136); box-sizing: border-box;\">return</span> <span class=\"hljs-number\" style=\"color: rgb(0, 102, 102); box-sizing: border-box;\">0</span>;\n}</code><ul class=\"pre-numbering\" style=\"box-sizing: border-box; position: absolute; width: 50px; background-color: rgb(238, 238, 238); top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right: 1px solid rgb(221, 221, 221); list-style: none; text-align: right;\"><li style=\"box-sizing: border-box; padding: 0px 5px;\">1</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">2</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">3</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">4</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">5</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">6</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">7</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">8</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">9</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">10</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">11</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">12</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">13</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">14</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">15</li><li style=\"box-sizing: border-box; padding: 0px 5px;\">16</li></ul></pre><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">函数中申请的这块内存释放了没？&nbsp;<br style=\"box-sizing: border-box;\">答案是没有。有人可能会想到，在函数退出时p指针变量已经消亡了，为什内存没有释放？其实道理很简单。变量就是个容器。容器是没有，并不代表申请的东西也没了！所以要注意指针的以下特征：</p><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\">指针消亡了，不代表它指向的内存会被自动释放（内存泄漏）</li><li style=\"box-sizing: border-box;\">内存被释放了，不代表指针会消亡或者成为NULL指针（野指针）</li></ul><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">so 为了愉快的写代码，一定要记得两件事：</p><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\">看好你的内存，别把他弄丢了。</li><li style=\"box-sizing: border-box;\">内存被释放后指针及时置为NULL;</li></ul></blockquote><hr style=\"box-sizing: border-box; margin-top: 2em; margin-bottom: 2em; border-top-width: 1px; border-top-style: solid; border-top-color: rgba(128, 128, 128, 0.0980392);\"><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">这篇文章有点长，最后还是在理理思路</p><ul style=\"box-sizing: border-box;\"><li style=\"box-sizing: border-box;\">指针 与 内存 并不可以直接画等号。</li><li style=\"box-sizing: border-box;\">指针本质上只是变量，不过他的作用是来管理内存！</li><li style=\"box-sizing: border-box;\">指针仅仅是对内存的一个索引，内存不管发生什么事（比如释放），指针都没法得知，必须手动去改变指针（比如在释放内存后置空指针）。</li><li style=\"box-sizing: border-box;\">当指针没有指向具体的内存或者内存已经无效时要及时置空。</li></ul></blockquote><hr style=\"box-sizing: border-box; margin-top: 2em; margin-bottom: 2em; border-top-width: 1px; border-top-style: solid; border-top-color: rgba(128, 128, 128, 0.0980392);\"><blockquote style=\"box-sizing: border-box; margin-bottom: 1.1em; padding: 15px 20px; border-left-width: 10px; border-left-color: rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-top-left-radius: 0px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 0px;\"><p style=\"margin: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">我的个人网站&nbsp;<a href=\"http://www.breeziness.cn/\" target=\"_blank\" style=\"color: rgb(79, 161, 219); text-decoration: none; box-sizing: border-box;\">http://www.breeziness.cn/</a>&nbsp;<br style=\"box-sizing: border-box;\">我的CSDN&nbsp;<a href=\"http://blog.csdn.net/qq_33775402\" target=\"_blank\" style=\"color: rgb(79, 161, 219); text-decoration: none; box-sizing: border-box;\">http://blog.csdn.net/qq_33775402</a></p></blockquote><p style=\"margin: 0px 0px 1.1em; padding: 0px; box-sizing: border-box;\">转载请注明出处 小风code www.breeziness.cn</p></div></div><div class=\"bdsharebuttonbox tracking-ad bdshare-button-style0-16\" data-mod=\"popu_172\" data-bd-bind=\"1505829361445\" style=\"zoom: 1; color: rgb(0, 0, 0); font-family: Arial, Console, Verdana, 'Courier New'; font-size: 12px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255); float: right;\"><a href=\"http://blog.csdn.net/qq_33775402/article/details/75252291#\" class=\"bds_more\" data-cmd=\"more\" target=\"_blank\" style=\"color: rgb(51, 51, 51); text-decoration: none; float: left; padding-left: 17px; line-height: 16px; height: 16px; cursor: pointer; margin: 6px 6px 6px 0px; background-image: url(http://bdimg.share.baidu.com/static/api/img/share/icons_0_16.png?v=d754dcc0.png) !important; background-position: 0px 0px !important; background-repeat: no-repeat no-repeat;\"></a><a href=\"http://blog.csdn.net/qq_33775402/article/details/75252291#\" class=\"bds_qzone\" data-cmd=\"qzone\" title=\"分享到QQ空间\" target=\"_blank\" style=\"color: rgb(202, 0, 0); text-decoration: none; float: left; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/img/share/icons_0_16.png?v=91362611.png); cursor: pointer; margin: 6px 6px 6px 0px; background-position: 0px -52px !important; background-repeat: no-repeat no-repeat;\"></a><a href=\"http://blog.csdn.net/qq_33775402/article/details/75252291#\" class=\"bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\" target=\"_blank\" style=\"color: rgb(202, 0, 0); text-decoration: none; float: left; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/img/share/icons_0_16.png?v=91362611.png); cursor: pointer; margin: 6px 6px 6px 0px; background-position: 0px -104px !important; background-repeat: no-repeat no-repeat;\"></a><a href=\"http://blog.csdn.net/qq_33775402/article/details/75252291#\" class=\"bds_tqq\" data-cmd=\"tqq\" title=\"分享到腾讯微博\" target=\"_blank\" style=\"color: rgb(202, 0, 0); text-decoration: none; float: left; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/img/share/icons_0_16.png?v=91362611.png); cursor: pointer; margin: 6px 6px 6px 0px; background-position: 0px -260px !important; background-repeat: no-repeat no-repeat;\"></a><a href=\"http://blog.csdn.net/qq_33775402/article/details/75252291#\" class=\"bds_renren\" data-cmd=\"renren\" title=\"分享到人人网\" target=\"_blank\" style=\"color: rgb(202, 0, 0); text-decoration: none; float: left; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/img/share/icons_0_16.png?v=91362611.png); cursor: pointer; margin: 6px 6px 6px 0px; background-position: 0px -208px !important; background-repeat: no-repeat no-repeat;\"></a><a href=\"http://blog.csdn.net/qq_33775402/article/details/75252291#\" class=\"bds_weixin\" data-cmd=\"weixin\" title=\"分享到微信\" target=\"_blank\" style=\"color: rgb(202, 0, 0); text-decoration: none; float: left; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/img/share/icons_0_16.png?v=91362611.png); cursor: pointer; margin: 6px 6px 6px 0px; background-position: 0px -1612px !important; background-repeat: no-repeat no-repeat;\"></a></div><div id=\"digg\" articleid=\"75252291\" style=\"clear: both; width: 182px; margin: 0px auto; padding: 30px 0px 15px; text-align: center; color: rgb(0, 0, 0); font-family: Arial, Console, Verdana, 'Courier New'; font-size: 12px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><dl id=\"btnDigg\" class=\"digg digg_disable\" style=\"display: inline-block; float: left; width: 72px; height: 72px; overflow: hidden; margin: 0px 2px; background-color: rgb(153, 153, 153); color: rgb(255, 255, 255); cursor: pointer; background-position: initial initial; background-repeat: initial initial;\"></dl></div>"
    }
  ]
}
{
  "title": "c++中冒号（:）和双冒号（::）的用法",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">1.冒号（:）用法</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">（1）表示机构内位域的定义（即该变量占几个bit空间）</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">typedef struct _XXX{</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned char a:4;</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned char c;</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">} ; XXX</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">（2）构造函数后面的冒号起分割作用，是类给成员变量赋值的方法，初始化列表，更适用于成员变量的常量const型。</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">struct _XXX{</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _XXX() : y(0xc0) {}</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">};</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">（3） public:和private:后面的冒号，表示后面定义的所有成员都是公有或私有的，直到下一个\"public:”或\"private:”出现为止。\"private:\"为默认处理。</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">（4）类名冒号后面的是用来定义类的继承。</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">class 派生类名 : 继承方式 基类名</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">{</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">&nbsp;&nbsp;&nbsp; 派生类的成员</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">};</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">继承方式：public、private和protected，默认处理是public。</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">2．双冒号（::）用法</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">（1）表示“域操作符”<br style=\"box-sizing: border-box;\">例：声明了一个类A，类A里声明了一个成员函数void f()，但没有在类的声明里给出f的定义，那么在类外定义f时，<br style=\"box-sizing: border-box;\">就要写成void A::f()，表示这个f()函数是类A的成员函数。</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">（2）直接用在全局函数前，表示是全局函数<br style=\"box-sizing: border-box;\">例：在VC里，你可以在调用API 函数里，在API函数名前加：：</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">（3）表示引用成员函数及变量，作用域成员运算符</p><p style=\"box-sizing: border-box; margin: 0px 0px 1.6em; color: rgb(102, 102, 102); letter-spacing: 0.05em; font-family: Roboto, Helvetica, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 16px;\">例：System::Math::Sqrt() 相当于System.Math.Sqrt()</p>"
    }
  ]
}
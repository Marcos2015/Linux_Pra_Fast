{
  "title": "IO多路复用之poll总结",
  "cells": [
    {
      "type": "text",
      "data": "<h1 class=\"postTitle\" style=\"color: rgb(0, 0, 0); font-family: Arial;\"><strong style=\"color: rgb(0, 0, 0); font-size: 14px;\">1、基本知识</strong><br></h1><div id=\"cnblogs_post_body\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><p>　　poll的机制与select类似，与select在本质上没有多大差别，管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是poll没有最大文件描述符数量的限制。poll和select同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</p><p><strong>2、poll函数</strong></p><p>　　函数格式如下所示：</p><div class=\"cnblogs_code\"><pre># include &lt;poll.h&gt;\n<span style=\"color: rgb(0, 0, 255);\">int</span> poll ( <span style=\"color: rgb(0, 0, 255);\">struct</span> pollfd * fds, unsigned <span style=\"color: rgb(0, 0, 255);\">int</span> nfds, <span style=\"color: rgb(0, 0, 255);\">int</span> timeout);</pre></div><p>pollfd结构体定义如下：</p><p><strong>struct&nbsp;pollfd&nbsp;{</strong></p><p><strong>int&nbsp;fd;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;文件描述符&nbsp;*/</strong><br><strong>short&nbsp;events;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;等待的事件&nbsp;*/</strong><br><strong>short&nbsp;revents;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;实际发生了的事件&nbsp;*/</strong><br><strong>}&nbsp;;&nbsp;</strong></p><p>　　每一个pollfd结构体指定了一个被监视的文件描述符，可以传递多个结构体，指示poll()监视多个文件描述符。每个结构体的events 域是监视该文件描述符的事件掩码，由用户来设置这个域。revents域是文件描述符的操作结果事件掩码，内核在调用返回时设置这个域。events域中 请求的任何事件都可能在revents域中返回。合法的事件如下：</p><p>　　POLLIN&nbsp;　　　　　　　　有数据可读。</p><p>　　POLLRDNORM&nbsp;　　　　 &nbsp;有普通数据可读。</p><p>　　POLLRDBAND　　　　　&nbsp;有优先数据可读。</p><p>　　POLLPRI　　　　　　　　&nbsp;有紧迫数据可读。</p><p>　　POLLOUT　　　　　　 &nbsp; &nbsp; &nbsp;写数据不会导致阻塞。</p><p>　　POLLWRNORM　　　　　 &nbsp;写普通数据不会导致阻塞。</p><p>　　POLLWRBAND　　　　　 &nbsp;&nbsp;写优先数据不会导致阻塞。</p><p>　　POLLMSGSIGPOLL&nbsp;　　　　消息可用。</p><p>　　此外，revents域中还可能返回下列事件：<br>　　POLLER　　 &nbsp;&nbsp;指定的文件描述符发生错误。</p><p>　　POLLHUP　　&nbsp;指定的文件描述符挂起事件。</p><p>　　POLLNVAL　　指定的文件描述符非法。</p><p>这些事件在events域中无意义，因为它们在合适的时候总是会从revents中返回。</p><p>　　使用poll()和select()不一样，你不需要显式地请求异常情况报告。<br>　　POLLIN&nbsp;|&nbsp;POLLPRI等价于 select()的读事件，POLLOUT&nbsp;|POLLWRBAND等价于select()的写事件。POLLIN等价于 POLLRDNORM&nbsp;|POLLRDBAND，而POLLOUT则等价于POLLWRNORM。例如，要同时监视一个文件描述符是否可读和可写，我们可 以设置&nbsp;events为POLLIN&nbsp;|POLLOUT。在poll返回时，我们可以检查revents中的标志，对应于文件描述符请求的events结 构体。如果POLLIN事件被设置，则文件描述符可以被读取而不阻塞。如果POLLOUT被设置，则文件描述符可以写入而不导致阻塞。这些标志并不是互斥 的：它们可能被同时设置，表示这个文件描述符的读取和写入操作都会正常返回而不阻塞。</p><p>　　timeout参数指定等待的毫秒数，无论I/O是否准备好，poll都会返回。timeout指定为负数值表示无限超时，使poll()一直 挂起直到一个指定事件发生；timeout为0指示poll调用立即返回并列出准备好I/O的文件描述符，但并不等待其它的事件。这种情况 下，poll()就像它的名字那样，一旦选举出来，立即返回。</p><p><br>　　返回值和错误代码<br>　　成功时，poll()返回结构体中revents域不为0的文件描述符个数；如果在超时前没有任何事件发生，poll()返回0；失败时，poll()返回-1，并设置errno为下列值之一：<br>　　EBADF　　 &nbsp; &nbsp; &nbsp;&nbsp;一个或多个结构体中指定的文件描述符无效。</p><p>　　EFAULTfds　　&nbsp;指针指向的地址超出进程的地址空间。</p><p>　　EINTR　　　　 &nbsp;请求的事件之前产生一个信号，调用可以重新发起。</p><p>　　EINVALnfds　　参数超出PLIMIT_NOFILE值。</p><p>　　ENOMEM　　 &nbsp; &nbsp;&nbsp;可用内存不足，无法完成请求。</p><p><strong>3、测出程序</strong></p><p>　　编写一个echo server程序，功能是客户端向服务器发送信息，服务器接收输出并原样发送回给客户端，客户端接收到输出到终端。</p><p>　　服务器端程序如下：</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div><pre><span style=\"color: rgb(0, 128, 128);\">  1</span> #include &lt;stdio.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  2</span> #include &lt;stdlib.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  3</span> #include &lt;<span style=\"color: rgb(0, 0, 255);\">string</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  4</span> #include &lt;errno.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  5</span> \n<span style=\"color: rgb(0, 128, 128);\">  6</span> #include &lt;netinet/<span style=\"color: rgb(0, 0, 255);\">in</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  7</span> #include &lt;sys/socket.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  8</span> #include &lt;poll.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  9</span> #include &lt;unistd.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 10</span> #include &lt;sys/types.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 11</span> \n<span style=\"color: rgb(0, 128, 128);\"> 12</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> IPADDRESS   \"127.0.0.1\"\n<span style=\"color: rgb(0, 128, 128);\"> 13</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> PORT        8787\n<span style=\"color: rgb(0, 128, 128);\"> 14</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> MAXLINE     1024\n<span style=\"color: rgb(0, 128, 128);\"> 15</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> LISTENQ     5\n<span style=\"color: rgb(0, 128, 128);\"> 16</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> OPEN_MAX    1000\n<span style=\"color: rgb(0, 128, 128);\"> 17</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> INFTIM      -1\n<span style=\"color: rgb(0, 128, 128);\"> 18</span> \n<span style=\"color: rgb(0, 128, 128);\"> 19</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">函数声明\n</span><span style=\"color: rgb(0, 128, 128);\"> 20</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">创建套接字并进行绑定</span>\n<span style=\"color: rgb(0, 128, 128);\"> 21</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">int</span> socket_bind(<span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">char</span>* ip,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> port);\n</span><span style=\"color: rgb(0, 128, 128);\"> 22</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">IO多路复用poll</span>\n<span style=\"color: rgb(0, 128, 128);\"> 23</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_poll(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> listenfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 24</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">处理多个连接</span>\n<span style=\"color: rgb(0, 128, 128);\"> 25</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_connection(<span style=\"color: rgb(0, 0, 255);\">struct</span> pollfd *connfds,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> num);\n</span><span style=\"color: rgb(0, 128, 128);\"> 26</span> \n<span style=\"color: rgb(0, 128, 128);\"> 27</span> <span style=\"color: rgb(0, 0, 255);\">int</span> main(<span style=\"color: rgb(0, 0, 255);\">int</span> argc,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">argv[])\n</span><span style=\"color: rgb(0, 128, 128);\"> 28</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 29</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">  listenfd,connfd,sockfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 30</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> sockaddr_in cliaddr;\n</span><span style=\"color: rgb(0, 128, 128);\"> 31</span> <span style=\"color: rgb(0, 0, 0);\">    socklen_t cliaddrlen;\n</span><span style=\"color: rgb(0, 128, 128);\"> 32</span>     listenfd =<span style=\"color: rgb(0, 0, 0);\"> socket_bind(IPADDRESS,PORT);\n</span><span style=\"color: rgb(0, 128, 128);\"> 33</span> <span style=\"color: rgb(0, 0, 0);\">    listen(listenfd,LISTENQ);\n</span><span style=\"color: rgb(0, 128, 128);\"> 34</span> <span style=\"color: rgb(0, 0, 0);\">    do_poll(listenfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 35</span>     <span style=\"color: rgb(0, 0, 255);\">return</span> <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\"> 36</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 37</span> \n<span style=\"color: rgb(0, 128, 128);\"> 38</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">int</span> socket_bind(<span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">char</span>* ip,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> port)\n</span><span style=\"color: rgb(0, 128, 128);\"> 39</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 40</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">  listenfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 41</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> sockaddr_in servaddr;\n</span><span style=\"color: rgb(0, 128, 128);\"> 42</span>     listenfd = socket(AF_INET,SOCK_STREAM,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 43</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (listenfd == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 44</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 45</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">socket error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 46</span>         exit(<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 47</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 48</span>     bzero(&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span><span style=\"color: rgb(0, 0, 0);\">(servaddr));\n</span><span style=\"color: rgb(0, 128, 128);\"> 49</span>     servaddr.sin_family =<span style=\"color: rgb(0, 0, 0);\"> AF_INET;\n</span><span style=\"color: rgb(0, 128, 128);\"> 50</span>     inet_pton(AF_INET,ip,&amp;<span style=\"color: rgb(0, 0, 0);\">servaddr.sin_addr);\n</span><span style=\"color: rgb(0, 128, 128);\"> 51</span>     servaddr.sin_port =<span style=\"color: rgb(0, 0, 0);\"> htons(port);\n</span><span style=\"color: rgb(0, 128, 128);\"> 52</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (bind(listenfd,(<span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr*)&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span>(servaddr)) == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 53</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 54</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">bind error: </span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 55</span>         exit(<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 56</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 57</span>     <span style=\"color: rgb(0, 0, 255);\">return</span><span style=\"color: rgb(0, 0, 0);\"> listenfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 58</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 59</span> \n<span style=\"color: rgb(0, 128, 128);\"> 60</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_poll(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> listenfd)\n</span><span style=\"color: rgb(0, 128, 128);\"> 61</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 62</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">  connfd,sockfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 63</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> sockaddr_in cliaddr;\n</span><span style=\"color: rgb(0, 128, 128);\"> 64</span> <span style=\"color: rgb(0, 0, 0);\">    socklen_t cliaddrlen;\n</span><span style=\"color: rgb(0, 128, 128);\"> 65</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> pollfd clientfds[OPEN_MAX];\n</span><span style=\"color: rgb(0, 128, 128);\"> 66</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> maxi;\n</span><span style=\"color: rgb(0, 128, 128);\"> 67</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> i;\n</span><span style=\"color: rgb(0, 128, 128);\"> 68</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> nready;\n</span><span style=\"color: rgb(0, 128, 128);\"> 69</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">添加监听描述符</span>\n<span style=\"color: rgb(0, 128, 128);\"> 70</span>     clientfds[<span style=\"color: rgb(128, 0, 128);\">0</span>].fd =<span style=\"color: rgb(0, 0, 0);\"> listenfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 71</span>     clientfds[<span style=\"color: rgb(128, 0, 128);\">0</span>].events =<span style=\"color: rgb(0, 0, 0);\"> POLLIN;\n</span><span style=\"color: rgb(0, 128, 128);\"> 72</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">初始化客户连接描述符</span>\n<span style=\"color: rgb(0, 128, 128);\"> 73</span>     <span style=\"color: rgb(0, 0, 255);\">for</span> (i = <span style=\"color: rgb(128, 0, 128);\">1</span>;i &lt; OPEN_MAX;i++<span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 74</span>         clientfds[i].fd = -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\"> 75</span>     maxi = <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\"> 76</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">循环处理</span>\n<span style=\"color: rgb(0, 128, 128);\"> 77</span>     <span style=\"color: rgb(0, 0, 255);\">for</span><span style=\"color: rgb(0, 0, 0);\"> ( ; ; )\n</span><span style=\"color: rgb(0, 128, 128);\"> 78</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 79</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">获取可用描述符的个数</span>\n<span style=\"color: rgb(0, 128, 128);\"> 80</span>         nready = poll(clientfds,maxi+<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">,INFTIM);\n</span><span style=\"color: rgb(0, 128, 128);\"> 81</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (nready == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 82</span> <span style=\"color: rgb(0, 0, 0);\">        {\n</span><span style=\"color: rgb(0, 128, 128);\"> 83</span>             perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">poll error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 84</span>             exit(<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 85</span> <span style=\"color: rgb(0, 0, 0);\">        }\n</span><span style=\"color: rgb(0, 128, 128);\"> 86</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">测试监听描述符是否准备好</span>\n<span style=\"color: rgb(0, 128, 128);\"> 87</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (clientfds[<span style=\"color: rgb(128, 0, 128);\">0</span>].revents &amp;<span style=\"color: rgb(0, 0, 0);\"> POLLIN)\n</span><span style=\"color: rgb(0, 128, 128);\"> 88</span> <span style=\"color: rgb(0, 0, 0);\">        {\n</span><span style=\"color: rgb(0, 128, 128);\"> 89</span>             cliaddrlen = <span style=\"color: rgb(0, 0, 255);\">sizeof</span><span style=\"color: rgb(0, 0, 0);\">(cliaddr);\n</span><span style=\"color: rgb(0, 128, 128);\"> 90</span>             <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">接受新的连接</span>\n<span style=\"color: rgb(0, 128, 128);\"> 91</span>             <span style=\"color: rgb(0, 0, 255);\">if</span> ((connfd = accept(listenfd,(<span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr*)&amp;cliaddr,&amp;cliaddrlen)) == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 92</span> <span style=\"color: rgb(0, 0, 0);\">            {\n</span><span style=\"color: rgb(0, 128, 128);\"> 93</span>                 <span style=\"color: rgb(0, 0, 255);\">if</span> (errno ==<span style=\"color: rgb(0, 0, 0);\"> EINTR)\n</span><span style=\"color: rgb(0, 128, 128);\"> 94</span>                     <span style=\"color: rgb(0, 0, 255);\">continue</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\"> 95</span>                 <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\"> 96</span> <span style=\"color: rgb(0, 0, 0);\">                {\n</span><span style=\"color: rgb(0, 128, 128);\"> 97</span>                    perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">accept error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 98</span>                    exit(<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 99</span> <span style=\"color: rgb(0, 0, 0);\">                }\n</span><span style=\"color: rgb(0, 128, 128);\">100</span> <span style=\"color: rgb(0, 0, 0);\">            }\n</span><span style=\"color: rgb(0, 128, 128);\">101</span>             fprintf(stdout,<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">accept a new client: %s:%d\\n</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">, inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);\n</span><span style=\"color: rgb(0, 128, 128);\">102</span>             <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">将新的连接描述符添加到数组中</span>\n<span style=\"color: rgb(0, 128, 128);\">103</span>             <span style=\"color: rgb(0, 0, 255);\">for</span> (i = <span style=\"color: rgb(128, 0, 128);\">1</span>;i &lt; OPEN_MAX;i++<span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">104</span> <span style=\"color: rgb(0, 0, 0);\">            {\n</span><span style=\"color: rgb(0, 128, 128);\">105</span>                 <span style=\"color: rgb(0, 0, 255);\">if</span> (clientfds[i].fd &lt; <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">106</span> <span style=\"color: rgb(0, 0, 0);\">                {\n</span><span style=\"color: rgb(0, 128, 128);\">107</span>                     clientfds[i].fd =<span style=\"color: rgb(0, 0, 0);\"> connfd;\n</span><span style=\"color: rgb(0, 128, 128);\">108</span>                     <span style=\"color: rgb(0, 0, 255);\">break</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\">109</span> <span style=\"color: rgb(0, 0, 0);\">                }\n</span><span style=\"color: rgb(0, 128, 128);\">110</span> <span style=\"color: rgb(0, 0, 0);\">            }\n</span><span style=\"color: rgb(0, 128, 128);\">111</span>             <span style=\"color: rgb(0, 0, 255);\">if</span> (i ==<span style=\"color: rgb(0, 0, 0);\"> OPEN_MAX)\n</span><span style=\"color: rgb(0, 128, 128);\">112</span> <span style=\"color: rgb(0, 0, 0);\">            {\n</span><span style=\"color: rgb(0, 128, 128);\">113</span>                 fprintf(stderr,<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">too many clients.\\n</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">114</span>                 exit(<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">115</span> <span style=\"color: rgb(0, 0, 0);\">            }\n</span><span style=\"color: rgb(0, 128, 128);\">116</span>             <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">将新的描述符添加到读描述符集合中</span>\n<span style=\"color: rgb(0, 128, 128);\">117</span>             clientfds[i].events =<span style=\"color: rgb(0, 0, 0);\"> POLLIN;\n</span><span style=\"color: rgb(0, 128, 128);\">118</span>             <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">记录客户连接套接字的个数</span>\n<span style=\"color: rgb(0, 128, 128);\">119</span>             maxi = (i &gt; maxi ?<span style=\"color: rgb(0, 0, 0);\"> i : maxi);\n</span><span style=\"color: rgb(0, 128, 128);\">120</span>             <span style=\"color: rgb(0, 0, 255);\">if</span> (--nready &lt;= <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">121</span>                 <span style=\"color: rgb(0, 0, 255);\">continue</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\">122</span> <span style=\"color: rgb(0, 0, 0);\">        }\n</span><span style=\"color: rgb(0, 128, 128);\">123</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">处理客户连接</span>\n<span style=\"color: rgb(0, 128, 128);\">124</span> <span style=\"color: rgb(0, 0, 0);\">        handle_connection(clientfds,maxi);\n</span><span style=\"color: rgb(0, 128, 128);\">125</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">126</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">127</span> \n<span style=\"color: rgb(0, 128, 128);\">128</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_connection(<span style=\"color: rgb(0, 0, 255);\">struct</span> pollfd *connfds,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> num)\n</span><span style=\"color: rgb(0, 128, 128);\">129</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">130</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> i,n;\n</span><span style=\"color: rgb(0, 128, 128);\">131</span>     <span style=\"color: rgb(0, 0, 255);\">char</span><span style=\"color: rgb(0, 0, 0);\"> buf[MAXLINE];\n</span><span style=\"color: rgb(0, 128, 128);\">132</span>     memset(buf,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">,MAXLINE);\n</span><span style=\"color: rgb(0, 128, 128);\">133</span>     <span style=\"color: rgb(0, 0, 255);\">for</span> (i = <span style=\"color: rgb(128, 0, 128);\">1</span>;i &lt;= num;i++<span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">134</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">135</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (connfds[i].fd &lt; <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">136</span>             <span style=\"color: rgb(0, 0, 255);\">continue</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\">137</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">测试客户描述符是否准备好</span>\n<span style=\"color: rgb(0, 128, 128);\">138</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (connfds[i].revents &amp;<span style=\"color: rgb(0, 0, 0);\"> POLLIN)\n</span><span style=\"color: rgb(0, 128, 128);\">139</span> <span style=\"color: rgb(0, 0, 0);\">        {\n</span><span style=\"color: rgb(0, 128, 128);\">140</span>             <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">接收客户端发送的信息</span>\n<span style=\"color: rgb(0, 128, 128);\">141</span>             n =<span style=\"color: rgb(0, 0, 0);\"> read(connfds[i].fd,buf,MAXLINE);\n</span><span style=\"color: rgb(0, 128, 128);\">142</span>             <span style=\"color: rgb(0, 0, 255);\">if</span> (n == <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">143</span> <span style=\"color: rgb(0, 0, 0);\">            {\n</span><span style=\"color: rgb(0, 128, 128);\">144</span> <span style=\"color: rgb(0, 0, 0);\">                close(connfds[i].fd);\n</span><span style=\"color: rgb(0, 128, 128);\">145</span>                 connfds[i].fd = -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\">146</span>                 <span style=\"color: rgb(0, 0, 255);\">continue</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\">147</span> <span style=\"color: rgb(0, 0, 0);\">            }\n</span><span style=\"color: rgb(0, 128, 128);\">148</span>            <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\"> printf(\"read msg is: \");</span>\n<span style=\"color: rgb(0, 128, 128);\">149</span> <span style=\"color: rgb(0, 0, 0);\">            write(STDOUT_FILENO,buf,n);\n</span><span style=\"color: rgb(0, 128, 128);\">150</span>             <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">向客户端发送buf</span>\n<span style=\"color: rgb(0, 128, 128);\">151</span> <span style=\"color: rgb(0, 0, 0);\">            write(connfds[i].fd,buf,n);\n</span><span style=\"color: rgb(0, 128, 128);\">152</span> <span style=\"color: rgb(0, 0, 0);\">        }\n</span><span style=\"color: rgb(0, 128, 128);\">153</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">154</span> }</pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div></div><p>客户端代码如下所示：</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div><pre><span style=\"color: rgb(0, 128, 128);\"> 1</span> #include &lt;netinet/<span style=\"color: rgb(0, 0, 255);\">in</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 2</span> #include &lt;sys/socket.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 3</span> #include &lt;stdio.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 4</span> #include &lt;<span style=\"color: rgb(0, 0, 255);\">string</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 5</span> #include &lt;stdlib.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 6</span> #include &lt;poll.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 7</span> #include &lt;time.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 8</span> #include &lt;unistd.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 9</span> #include &lt;sys/types.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">10</span> \n<span style=\"color: rgb(0, 128, 128);\">11</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> MAXLINE     1024\n<span style=\"color: rgb(0, 128, 128);\">12</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> IPADDRESS   \"127.0.0.1\"\n<span style=\"color: rgb(0, 128, 128);\">13</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> SERV_PORT   8787\n<span style=\"color: rgb(0, 128, 128);\">14</span> \n<span style=\"color: rgb(0, 128, 128);\">15</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> max(a,b) (a &gt; b) ? a : b\n<span style=\"color: rgb(0, 128, 128);\">16</span> \n<span style=\"color: rgb(0, 128, 128);\">17</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_connection(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> sockfd);\n</span><span style=\"color: rgb(0, 128, 128);\">18</span> \n<span style=\"color: rgb(0, 128, 128);\">19</span> <span style=\"color: rgb(0, 0, 255);\">int</span> main(<span style=\"color: rgb(0, 0, 255);\">int</span> argc,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">argv[])\n</span><span style=\"color: rgb(0, 128, 128);\">20</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">21</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">                 sockfd;\n</span><span style=\"color: rgb(0, 128, 128);\">22</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> sockaddr_in  servaddr;\n</span><span style=\"color: rgb(0, 128, 128);\">23</span>     sockfd = socket(AF_INET,SOCK_STREAM,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">24</span>     bzero(&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span><span style=\"color: rgb(0, 0, 0);\">(servaddr));\n</span><span style=\"color: rgb(0, 128, 128);\">25</span>     servaddr.sin_family =<span style=\"color: rgb(0, 0, 0);\"> AF_INET;\n</span><span style=\"color: rgb(0, 128, 128);\">26</span>     servaddr.sin_port =<span style=\"color: rgb(0, 0, 0);\"> htons(SERV_PORT);\n</span><span style=\"color: rgb(0, 128, 128);\">27</span>     inet_pton(AF_INET,IPADDRESS,&amp;<span style=\"color: rgb(0, 0, 0);\">servaddr.sin_addr);\n</span><span style=\"color: rgb(0, 128, 128);\">28</span>     connect(sockfd,(<span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr*)&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span><span style=\"color: rgb(0, 0, 0);\">(servaddr));\n</span><span style=\"color: rgb(0, 128, 128);\">29</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">处理连接描述符</span>\n<span style=\"color: rgb(0, 128, 128);\">30</span> <span style=\"color: rgb(0, 0, 0);\">    handle_connection(sockfd);\n</span><span style=\"color: rgb(0, 128, 128);\">31</span>     <span style=\"color: rgb(0, 0, 255);\">return</span> <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\">32</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">33</span> \n<span style=\"color: rgb(0, 128, 128);\">34</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_connection(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> sockfd)\n</span><span style=\"color: rgb(0, 128, 128);\">35</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">36</span>     <span style=\"color: rgb(0, 0, 255);\">char</span><span style=\"color: rgb(0, 0, 0);\">    sendline[MAXLINE],recvline[MAXLINE];\n</span><span style=\"color: rgb(0, 128, 128);\">37</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">     maxfdp,stdineof;\n</span><span style=\"color: rgb(0, 128, 128);\">38</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span> pollfd pfds[<span style=\"color: rgb(128, 0, 128);\">2</span><span style=\"color: rgb(0, 0, 0);\">];\n</span><span style=\"color: rgb(0, 128, 128);\">39</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> n;\n</span><span style=\"color: rgb(0, 128, 128);\">40</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">添加连接描述符</span>\n<span style=\"color: rgb(0, 128, 128);\">41</span>     pfds[<span style=\"color: rgb(128, 0, 128);\">0</span>].fd =<span style=\"color: rgb(0, 0, 0);\"> sockfd;\n</span><span style=\"color: rgb(0, 128, 128);\">42</span>     pfds[<span style=\"color: rgb(128, 0, 128);\">0</span>].events =<span style=\"color: rgb(0, 0, 0);\"> POLLIN;\n</span><span style=\"color: rgb(0, 128, 128);\">43</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">添加标准输入描述符</span>\n<span style=\"color: rgb(0, 128, 128);\">44</span>     pfds[<span style=\"color: rgb(128, 0, 128);\">1</span>].fd =<span style=\"color: rgb(0, 0, 0);\"> STDIN_FILENO;\n</span><span style=\"color: rgb(0, 128, 128);\">45</span>     pfds[<span style=\"color: rgb(128, 0, 128);\">1</span>].events =<span style=\"color: rgb(0, 0, 0);\"> POLLIN;\n</span><span style=\"color: rgb(0, 128, 128);\">46</span>     <span style=\"color: rgb(0, 0, 255);\">for</span><span style=\"color: rgb(0, 0, 0);\"> (; ;)\n</span><span style=\"color: rgb(0, 128, 128);\">47</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">48</span>         poll(pfds,<span style=\"color: rgb(128, 0, 128);\">2</span>,-<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">49</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (pfds[<span style=\"color: rgb(128, 0, 128);\">0</span>].revents &amp;<span style=\"color: rgb(0, 0, 0);\"> POLLIN)\n</span><span style=\"color: rgb(0, 128, 128);\">50</span> <span style=\"color: rgb(0, 0, 0);\">        {\n</span><span style=\"color: rgb(0, 128, 128);\">51</span>             n =<span style=\"color: rgb(0, 0, 0);\"> read(sockfd,recvline,MAXLINE);\n</span><span style=\"color: rgb(0, 128, 128);\">52</span>             <span style=\"color: rgb(0, 0, 255);\">if</span> (n == <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">53</span> <span style=\"color: rgb(0, 0, 0);\">            {\n</span><span style=\"color: rgb(0, 128, 128);\">54</span>                     fprintf(stderr,<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">client: server is closed.\\n</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">55</span> <span style=\"color: rgb(0, 0, 0);\">                    close(sockfd);\n</span><span style=\"color: rgb(0, 128, 128);\">56</span> <span style=\"color: rgb(0, 0, 0);\">            }\n</span><span style=\"color: rgb(0, 128, 128);\">57</span> <span style=\"color: rgb(0, 0, 0);\">            write(STDOUT_FILENO,recvline,n);\n</span><span style=\"color: rgb(0, 128, 128);\">58</span> <span style=\"color: rgb(0, 0, 0);\">        }\n</span><span style=\"color: rgb(0, 128, 128);\">59</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">测试标准输入是否准备好</span>\n<span style=\"color: rgb(0, 128, 128);\">60</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (pfds[<span style=\"color: rgb(128, 0, 128);\">1</span>].revents &amp;<span style=\"color: rgb(0, 0, 0);\"> POLLIN)\n</span><span style=\"color: rgb(0, 128, 128);\">61</span> <span style=\"color: rgb(0, 0, 0);\">        {\n</span><span style=\"color: rgb(0, 128, 128);\">62</span>             n =<span style=\"color: rgb(0, 0, 0);\"> read(STDIN_FILENO,sendline,MAXLINE);\n</span><span style=\"color: rgb(0, 128, 128);\">63</span>             <span style=\"color: rgb(0, 0, 255);\">if</span> (n  == <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">64</span> <span style=\"color: rgb(0, 0, 0);\">            {\n</span><span style=\"color: rgb(0, 128, 128);\">65</span> <span style=\"color: rgb(0, 0, 0);\">                shutdown(sockfd,SHUT_WR);\n</span><span style=\"color: rgb(0, 128, 128);\">66</span>         <span style=\"color: rgb(0, 0, 255);\">continue</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\">67</span> <span style=\"color: rgb(0, 0, 0);\">            }\n</span><span style=\"color: rgb(0, 128, 128);\">68</span> <span style=\"color: rgb(0, 0, 0);\">            write(sockfd,sendline,n);\n</span><span style=\"color: rgb(0, 128, 128);\">69</span> <span style=\"color: rgb(0, 0, 0);\">        }\n</span><span style=\"color: rgb(0, 128, 128);\">70</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">71</span> }</pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div></div><p><strong>4、程序测试结果</strong></p><p><img src=\"quiver-image-url/BBC1E80EDFAB5149778C994956132B98.png\" alt=\"\" width=\"361\" height=\"87\"></p><p><img src=\"quiver-image-url/D11B7A366F71EC7F3A2641DCEE19DDCB.png\" alt=\"\" width=\"363\" height=\"44\"></p><p><img src=\"quiver-image-url/39B95D3024DA03EB2EC5AA2BF3FD92FB.png\" alt=\"\" width=\"353\" height=\"75\"></p><p><strong>5、参考资料</strong></p><p><a href=\"http://blog.endlesscode.com/2010/03/27/select-poll-epoll-intro/\">http://blog.endlesscode.com/2010/03/27/select-poll-epoll-intro/</a></p><p><a href=\"http://hi.baidu.com/xzf20082004/item/622fb01a1018c7f5746a846f\">http://hi.baidu.com/xzf20082004/item/622fb01a1018c7f5746a846f</a></p></div>"
    }
  ]
}
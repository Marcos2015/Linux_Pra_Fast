{
  "title": "解决Mac下GDB提示签名错误",
  "cells": [
    {
      "type": "text",
      "data": "<br><div class=\"article_manage\" style=\"font-family: Arial; padding: 5px 0px; color: rgb(153, 153, 153); font-size: 12px; line-height: 24px; text-align: right;\"></div><div id=\"article_content\" class=\"article_content\" style=\"font-family: Arial; font-size: 14px; margin: 20px 0px 0px; line-height: 26px; color: rgb(51, 51, 51);\"><p class=\"p2\">原文作者：<a target=\"_blank\" href=\"file:///Users/liyunliu/Desktop/docs/linux%20c/blog.csdn.net/powerlly\" style=\"color: rgb(51, 102, 153); text-decoration: none;\">Power</a>&nbsp;转载请保留此链接。</p><p class=\"p3\"><strong>安装GDB</strong></p><p class=\"p2\">新的Mac下有gcc、g++，但是没有gdb</p><p class=\"p2\">有人说安装XCode就有，但是我真没有</p><p class=\"p2\">通过Homebrew安装，没有的执行安装brew命令</p><p class=\"p4\">ruby -e \"$(curl -fsSLk&nbsp;<a href=\"https://raw.github.com/Homebrew/homebrew/go/install\">https://raw.github.com/Homebrew/homebrew/go/install</a>)\"</p><p class=\"p2\">然后安装gdb</p><p class=\"p4\">brew install&nbsp;<a href=\"https://raw.github.com/Homebrew/homebrew-dupes/master/gdb.rb\">https://raw.github.com/Homebrew/homebrew-dupes/master/gdb.rb</a></p><p class=\"p2\">或者</p><p class=\"p4\">brew install homebrew/dupes/gdb</p><p class=\"p2\">我用的后者。</p><p class=\"p3\"><strong>签名问题</strong></p><p class=\"p2\">安装好gdb，写个hello gdb！</p><p class=\"p4\">// hello.cpp</p><p class=\"p4\">#include &lt;iostream&gt;</p><p class=\"p5\"><br></p><p class=\"p4\">using namespace std;</p><p class=\"p5\"><br></p><p class=\"p4\">int main( int argc, char **argv)</p><p class=\"p4\">{</p><p class=\"p4\">&nbsp; &nbsp; cout &lt;&lt; \"Hello gdb!\" &lt;&lt; endl;</p><p class=\"p4\">&nbsp; &nbsp; return 0;</p><p class=\"p4\">}</p><p class=\"p2\">编译链接</p><p class=\"p4\">&gt;g++ -g -o hello hello.cpp</p><p class=\"p2\">启动调试</p><p class=\"p4\">&gt;gdb hello</p><p class=\"p5\"><br></p><p class=\"p4\">&gt;run</p><p class=\"p4\">Starting program: /Users/username/ws/hello&nbsp;</p><p class=\"p4\">Unable to find Mach task port for process-id 358: (os/kern) failure (0x5).</p><p class=\"p4\">(please check gdb is codesigned - see taskgated(8))</p><p class=\"p2\">提示以上gdb签名错误。</p><p class=\"p3\"><strong>原因</strong></p><p class=\"p2\">Darwin kernel出于安全考虑，在没有特殊授权的情况下不允许gdb调试任何程序，因为可以调试就掌握了进程的控制权。不过如果是root用户就没有这个问题，不过谁愿意用root来调试程序呢。</p><p class=\"p3\"><strong>解决</strong></p><p class=\"p2\">一个常用的解决方法就是给gdb授予系统完全信任的代码签名权利，以对其他进程。</p><p class=\"p2\">首先，需要创建一个系统代码签名信任证书：</p><ol class=\"ol1\"><li class=\"li6\">启动“钥匙串访问”应用(/Applications/Utilities/Keychain Access.app)</li><li class=\"li6\">打开菜单：钥匙串访问－》证书助理－》创建证书...</li><li class=\"li6\">输入证书名称，如：gdb-cert；</li><li class=\"li6\">选择身份类型：自签名根证书 （Identity Type to Self Signed Root）</li><li class=\"li6\">选择证书类型：代码签名 （Certificate Type to Code Signing）</li><li class=\"li6\">勾选：让我覆盖这些默认签名 （select the Let me override defaults）</li><li class=\"li6\">一路继续，直到选择存放证书地址，选择：系统</li><li class=\"li6\">这样证书就创建好了，还要设置证书自定义信任</li><li class=\"li6\">右键刚才创建的 gdb-cert 证书，选择“显示简介” （Get Info）</li><li class=\"li6\">点击“信任”，会显示可以自定义的信任选项</li><li class=\"li6\">“代码签名”选择“总是信任” （Code Signing to Always Trust）</li></ol><p class=\"p2\">其次，将证书授予gdb，<span style=\"color: rgb(255, 0, 0);\">终端</span>下执行命令</p><p class=\"p4\">codesign -s gdb-cert /path to gdb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style=\"color: rgb(128, 0, 128);\">&nbsp;eg:&nbsp;&nbsp;codesign -s gdb-cert /usr/local/bin/gdb</span></p><p class=\"p2\">注意，需要先退出“钥匙串访问”应用，或者重启下系统</p><p class=\"p2\">查看/path to gdb，执行命令</p><p class=\"p4\">which gdb</p><p class=\"p4\"><span style=\"color: rgb(128, 0, 128);\">eg:</span></p><p class=\"p4\"><span style=\"color: rgb(128, 0, 128);\">➜ &nbsp;~ &nbsp;which gdb</span></p><p class=\"p4\"><span style=\"color: rgb(128, 0, 128);\">/usr/local/bin/gdb</span></p><p class=\"p2\">好了，以上就给gdb授予了系统信任的代码签名证书，可以正常使用gdb了</p><p class=\"p2\">原文作者：<a target=\"_blank\" href=\"file:///Users/liyunliu/Desktop/docs/linux%20c/blog.csdn.net/powerlly\" style=\"color: rgb(51, 102, 153); text-decoration: none;\">Power</a>&nbsp;转载请保留此链接。</p></div>"
    }
  ]
}
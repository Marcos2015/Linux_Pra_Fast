{
  "title": "iOS 开发者旅途中的指南针 - LLDB 调试技术",
  "cells": [
    {
      "type": "text",
      "data": "<br><small class=\"entry-meta\" style=\"box-sizing: border-box; outline: none; font-size: 0.8em; margin-top: 0.5em; color: rgb(144, 144, 144); font-family: 'Lantinghei SC', Helvetica, Arial, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', sans-serif;\"><div class=\"action\" style=\"box-sizing: border-box; outline: none; cursor: pointer; display: inline-block; transition: color 0.3s, opacity 0.3s; padding-right: 1em;\">阅读 879</div><div class=\"action\" style=\"box-sizing: border-box; outline: none; cursor: pointer; display: inline-block; transition: color 0.3s, opacity 0.3s; padding-right: 1em;\">收藏 37</div><a href=\"http://swiftcafe.io/2015/09/05/lldb-debug\" target=\"_blank\" class=\"action entry-original-url\" style=\"box-sizing: border-box; outline: none; color: rgb(144, 144, 144); text-decoration: none; transition: color 0.3s, opacity 0.3s; cursor: pointer; display: inline-block; padding-right: 0px;\">原文 swiftcafe.io</a></small><div class=\"entry-content\" style=\"font-size: 14px; box-sizing: border-box; outline: none; color: rgb(85, 85, 85); line-height: 1.5em; overflow-x: hidden; margin-top: 1.5em; font-family: 'Lantinghei SC', Helvetica, Arial, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', sans-serif;\"><div style=\"box-sizing: border-box; outline: none;\"><div style=\"box-sizing: border-box; outline: none;\"><p style=\"box-sizing: border-box; outline: none;\">今天给大家介绍的内容，无关乎任何功能性开发技术，但又对开发的效率影响至深，这就是调试技术。</p><p style=\"box-sizing: border-box; outline: none;\">何为调试呢，比如我们用&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">print</code>&nbsp;函数在指定位置进行输出，来定位某些节点的变量内的取值：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">let result = parseJSON(\"[1,2,3]\");\nprint(result);\n\nresult = parseJSON(\"error\");\nprint(result);</code></pre><p style=\"box-sizing: border-box; outline: none;\">相信我们大家看到类似这样的代码都不会陌生，估计为开发者朋友都会或多或少的用这样的方式对程序进行调试。</p><p style=\"box-sizing: border-box; outline: none;\">这种方式有它的方便之处，就是我们不需要太多思考，需要跟踪某些地方的时候，直接输出就可以得到调试信息了。但这样做也有它的弊端，就是我们每次这样调试，都要反复的编译，运行，然后写进新的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">print</code>&nbsp;语句，再继续编译，运行。反复的编译，运行会比较消耗时间。并且我们再调试完之后，很容易会忘记将调试语句删除，导致很多输出语句遗留再代码中，随着项目的长期进展后，这样会对项目后期的调试造成很多干扰。</p><p style=\"box-sizing: border-box; outline: none;\">而且，当我们想再次调试这段区域的时候，我们不得不再次写上这些输出语句。而有时对于稍微复杂一些的调试场景，<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">print</code>&nbsp;输出这样的方式，往往还不能太好的应对。</p><a style=\"box-sizing: border-box; outline: none; color: rgb(0, 127, 255); transition: color 0.3s;\"></a><p style=\"box-sizing: border-box; outline: none;\">那么有什么办法能解决这些麻烦呢，那就是<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">调试技术</span>，调试器几乎在大多数现代的开发环境中都会有，所以，iOS 开发也不例外，Xcode 环境为我们提供的对应调试工具就是&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">LLDB</span>。</p><h3 style=\"box-sizing: border-box; outline: none; color: rgb(51, 51, 51);\">初识 LLDB</h3><p style=\"box-sizing: border-box; outline: none;\">LLDB 就是 XCode 为我们提供的调试工具。那么说了这么多，到底什么是调试工具呢？ 也许说调试器你可能会感到比较陌生，但说到断点，相信你就会听着比较耳熟了。我们还以刚才我们提到的代码为例：</p><p style=\"box-sizing: border-box; outline: none;\"><img src=\"http://gold.xitu.io/images/loading.png\" alt=\"断点\" data-src=\"http://swiftcafe.io/images/lldb/lldb_1.png\" style=\"box-sizing: border-box; outline: none; border: 0px;\"></p><p style=\"box-sizing: border-box; outline: none;\">我们在第 23 行左边点击了一下，就创建了一个断点，这时我们再运行这个应用的时候，程序运行到这里就会被断点拦截：</p><p style=\"box-sizing: border-box; outline: none;\"><img src=\"http://swiftcafe.io/images/lldb/lldb_2.png\" alt=\"断点\" style=\"box-sizing: border-box; outline: none; border: 0px;\"></p><p style=\"box-sizing: border-box; outline: none;\">并且在 Xcode 的命令行区域，显示了 (lldb) 提示符。</p><h3 style=\"box-sizing: border-box; outline: none; color: rgb(51, 51, 51);\">基本调试操作</h3><p style=\"box-sizing: border-box; outline: none;\">我们回到最初的问题，如果不使用 print 输出，我们怎么能得到 result 的值呢，这就是我们要讨论的断点调试机制了，我们先看一下 XCode 底部调试区域的几个按钮：</p><p style=\"box-sizing: border-box; outline: none;\"><img src=\"http://swiftcafe.io/images/lldb/lldb_3.png\" alt=\"\" style=\"box-sizing: border-box; outline: none; border: 0px;\"></p><ul style=\"box-sizing: border-box; outline: none; padding-left: 1.5em;\"><li style=\"box-sizing: border-box; outline: none;\">第一个按钮是继续的意思，会让程序从断点处恢复，继续往下运行，我们点了这个按钮后，应用就会恢复正常运行状态。</li><li style=\"box-sizing: border-box; outline: none;\">第二个按钮是(Step Over),单步执行的意思，每点这个按钮一次，程序就会从我们断点开始的地方，向下执行一步。</li><li style=\"box-sizing: border-box; outline: none;\">第三个按钮是 (Step In)，进入执行的意思，简单来说就是如果我们当前的断点在一个函数调用上，把么断点会继续进入这个函数的内部进行调试。</li><li style=\"box-sizing: border-box; outline: none;\">第四个按钮是(Step Out),跳出的意思, 就是如果我们当前再一个函数中，它会跳出当前的函数，回到函数的调用处。</li></ul><p style=\"box-sizing: border-box; outline: none;\">恩。。你说了这么多,完全听不懂啊</p><p style=\"box-sizing: border-box; outline: none;\">没关系，我们一一道来，还是回到我们最初的需求，我们的断点现在停在给&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;变量赋值的这条语句中，断点所在位置的语句是还没有被执行的，所以我们需要点一下&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Step Over</span>&nbsp;按钮(也就是我们刚才列出的四个按钮的第二个)，让程序执行一行代码。</p><p style=\"box-sizing: border-box; outline: none;\">执行完这行代码后，我们的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;变量就被赋值完成了。那么问题来了，我们怎么得到&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;变量中得内容呢？</p><p style=\"box-sizing: border-box; outline: none;\">还记得我们的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;命令行么，我们使用一个叫做&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">po</code>&nbsp;的命令，就可以取到这个变量：</p><p style=\"box-sizing: border-box; outline: none;\">现在，我们使用&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;命令达到了和&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">print</code>&nbsp;语句同样的效果，得到了&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;变量的取值。那么问题又来了，这样做有什么好处呢，怎么感觉比直接使用&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">print</code>&nbsp;输出更麻烦了呢？</p><p style=\"box-sizing: border-box; outline: none;\">下面我就来告诉大家原因。</p><h3 style=\"box-sizing: border-box; outline: none; color: rgb(51, 51, 51);\">LLDB 探索之旅</h3><p style=\"box-sizing: border-box; outline: none;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;为我们提供了很多方便使用的命令，我们再&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;命令行中，输入&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">help</code>&nbsp;命令即可看到这些命令的帮助信息：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">Debugger commands:\n\n  apropos           -- Find a list of debugger commands related to a particular\n                       word/subject.\n  breakpoint        -- A set of commands for operating on breakpoints. Also see\n                       _regexp-break.\n  command           -- A set of commands for managing or customizing the\n                       debugger commands.\n  disassemble       -- Disassemble bytes in the current function, or elsewhere\n                       in the executable program as specified by the user.\n  expression        -- Evaluate an expression (ObjC++ or Swift) in the current\n                       program context, using user defined variables and\n                       variables currently in scope.\n  frame             -- A set of commands for operating on the current thread's\n                       frames.\n\n  ...............</code></pre><p style=\"box-sizing: border-box; outline: none;\">这里我们看到了 LLDB 命令的列表，要想获得某个命令更详细的帮助，我们开可以输入&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">help 命令名</code>, 比如我们输入&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">help expression</code>:</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">help expression\n     Evaluate an expression (ObjC++ or Swift) in the current program context,\n     using user defined variables and variables currently in scope.  This\n     command takes 'raw' input (no need to quote stuff).\n\nSyntax: expression &lt;cmd-options&gt; -- &lt;expr&gt;\n\nCommand Options Usage:\n  expression [-AFLORTg] [-f &lt;format&gt;] [-G &lt;gdb-format&gt;] [-l &lt;language&gt;] [-a &lt;boolean&gt;] [-i &lt;boolean&gt;] [-t &lt;unsigned-integer&gt;] [-u &lt;boolean&gt;] [-v[&lt;description-verbosity&gt;]] [-d &lt;none&gt;] [-S &lt;boolean&gt;] [-D &lt;count&gt;] [-P &lt;count&gt;] [-Y[&lt;count&gt;]] [-V &lt;boolean&gt;] -- &lt;expr&gt;\n  expression [-AFLORTg] [-l &lt;language&gt;] [-a &lt;boolean&gt;] [-i &lt;boolean&gt;] [-t &lt;unsigned-integer&gt;] [-u &lt;boolean&gt;] [-d &lt;none&gt;] [-S &lt;boolean&gt;] [-D &lt;count&gt;] [-P &lt;count&gt;] [-Y[&lt;count&gt;]] [-V &lt;boolean&gt;] -- &lt;expr&gt;</code></pre><p style=\"box-sizing: border-box; outline: none;\">就得到了关于&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">expression</code>&nbsp;命令的介绍。</p><p style=\"box-sizing: border-box; outline: none;\">基本情况就说这么多，那么咱们就来实践一下，体验一下&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;的强大之处。</p><p style=\"box-sizing: border-box; outline: none;\">我们来看一个更强大的命令&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">expression</code>, 我们来看一下它的描述：</p><blockquote style=\"box-sizing: border-box; outline: none; border-left-width: 2px; border-left-color: rgb(0, 127, 255); padding: 0.2em 1em; color: rgb(51, 51, 51); background-color: rgba(241, 241, 241, 0.701961);\"><p style=\"box-sizing: border-box; outline: none; margin: 0.5em 0px;\">Evaluate an expression (ObjC++ or Swift) in the current program context,<br style=\"box-sizing: border-box; outline: none;\">using user defined variables and variables currently in scope. This<br style=\"box-sizing: border-box; outline: none;\">command takes ‘raw’ input (no need to quote stuff).</p></blockquote><p style=\"box-sizing: border-box; outline: none;\">翻译一下哈，意思就是在当前程序环境中，执行任何的表达式，并且可以定义和操作已存在的变量。</p><p style=\"box-sizing: border-box; outline: none;\">怎么样，让我说的更具体吧，有了&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;我们不但可以在断点处输出某个变量的值，我们还可以修改甚至重新定义某些变量的值。</p><p style=\"box-sizing: border-box; outline: none;\">咱们开始吧，将我们刚才的程序做一下修改：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">var result = parseJSON(\"[1,2,3]\");\n\nif result?.count == 0 {\n\n    print(\"No Data\");\n\n}else{\n\n    print(result);\n\n}</code></pre><p style=\"box-sizing: border-box; outline: none;\">我们这里对&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;变量进行了判断，并进行了分别的输出。下面我们以让将断点设置到第一个语句上，然后运行程序。再断点处我们用&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">po</code>&nbsp;命令来打印出&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;的值。</p><p style=\"box-sizing: border-box; outline: none;\">这时候，<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;中的值，应该是解析后的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">JSON</code>&nbsp;数组。所以我们恢复程序执行后，接下来的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">if</code>&nbsp;判断会走第二个分支，输出&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;中的内容。</p><p style=\"box-sizing: border-box; outline: none;\">那么如果我们在刚才断点时候，运行这个命令呢：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">e result = []</code></pre><p style=\"box-sizing: border-box; outline: none;\">这里我们将&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;的值修改为一个空数组，然后我们继续程序，接着你会发现，下面的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">if</code>&nbsp;判断走了第一个分支，也就是说我们在断点处对变量进行的修改，是对全局程序生效的。</p><p style=\"box-sizing: border-box; outline: none;\">怎么样这个能力是我们之前的调试方法不能达到的吧~</p><blockquote style=\"box-sizing: border-box; outline: none; border-left-width: 2px; border-left-color: rgb(0, 127, 255); padding: 0.2em 1em; color: rgb(51, 51, 51); background-color: rgba(241, 241, 241, 0.701961);\"><p style=\"box-sizing: border-box; outline: none; margin: 0.5em 0px;\">我们上面的 e 命令是 expression 命令的缩写，详情可以参考 LLDB help 命令的帮助。</p></blockquote><h3 style=\"box-sizing: border-box; outline: none; color: rgb(51, 51, 51);\">控制流快捷命令</h3><p style=\"box-sizing: border-box; outline: none;\">我们继续探索，还记得前面我们提到的几个控制流按钮吗，也就是这张图片：</p><p style=\"box-sizing: border-box; outline: none;\"><img src=\"http://swiftcafe.io/images/lldb/lldb_3.png\" alt=\"\" style=\"box-sizing: border-box; outline: none; border: 0px;\"></p><p style=\"box-sizing: border-box; outline: none;\">在 LLDB 命令行中，对于每个流程控制按钮都有相应的命令。</p><ul style=\"box-sizing: border-box; outline: none; padding-left: 1.5em;\"><li style=\"box-sizing: border-box; outline: none;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">n</code>&nbsp;命令，代表&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Step Over</span>&nbsp;操作。</li><li style=\"box-sizing: border-box; outline: none;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">s</code>&nbsp;命令，代表&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Step Into</span>&nbsp;操作。</li><li style=\"box-sizing: border-box; outline: none;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">finish</code>&nbsp;命令，代表&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Step Out</span>&nbsp;操作。</li><li style=\"box-sizing: border-box; outline: none;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">c</code>&nbsp;命令，代表恢复程序执行操作。</li></ul><p style=\"box-sizing: border-box; outline: none;\">我们还是以这个程序为例，这次我们使用控制流命令来进行操作：</p><p style=\"box-sizing: border-box; outline: none;\"><img src=\"http://swiftcafe.io/images/lldb/lldb_5.png\" alt=\"\" style=\"box-sizing: border-box; outline: none; border: 0px;\"></p><p style=\"box-sizing: border-box; outline: none;\">我们运行这个程序，然后在断点检测到时，按照下面的顺序输入 LLDB 命令：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">s\nn\nn\nc\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">我们第一个输入的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">s</code>&nbsp;命令，会步入&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">parseJSON</code>&nbsp;函数的调用，然后断点就会进入&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">parseJSON</code>&nbsp;函数中。随后，我们又输入了&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">n</code>&nbsp;命令，由于&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">parseJSON</code>&nbsp;中只有一个&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">return</code>&nbsp;语句，那么控制流就会跳出&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">parseJSON</code>&nbsp;函数体，重新回到开始处。紧接着我们再次输入&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">n</code>&nbsp;命令，这时候程序就会将&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">parseJSON</code>&nbsp;的结果赋值给&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>。最后我们按下&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">c</code>&nbsp;命令，来恢复程序的执行。随后的 if 判断中就会按照相应的条件输出内容了。</p><p style=\"box-sizing: border-box; outline: none;\">怎么样，这样操作起来就比较方便了，我们不必用鼠标点来点去了，完全用键盘敲命令就可以完成控制流的操作了。</p><p style=\"box-sizing: border-box; outline: none;\">另外，除了这些，还有一个更加实用的控制流语句&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">thread return</code>。这个命令很有意思，它不但可以使当前的函数返回，而且还可以任意修改当前函数的返回值，而不管传进来的参数如何。比如我们有这样一个函数：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">func add(a:Int, b:Int) -&gt; Int {\n\n    return a + b;\n\n}</code></pre><p style=\"box-sizing: border-box; outline: none;\">如果断点进入这个函数体的时候，我们执行了&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">thread return 3</code>&nbsp;命令，那么不管这时候传进来的两个参数是什么，这个函数都会退出执行，并返回我们指定的值&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">3</code>。</p><p style=\"box-sizing: border-box; outline: none;\">恩。。 这点还是有些神奇的~</p><h3 style=\"box-sizing: border-box; outline: none; color: rgb(51, 51, 51);\">断点创建命令</h3><p style=\"box-sizing: border-box; outline: none;\">我们除了通过用鼠标在代码行的左边点击的方式创建断点以外，我们还可以使用 LLDB 来创建断点，比如要创建一个我们之前这样的断点：</p><p style=\"box-sizing: border-box; outline: none;\">我们可以输入这样一条命令：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) breakpoint set -f ViewController.swift -l 28\nBreakpoint 2: where = Example`Example.ViewController.viewDidLoad (Example.ViewController)() -&gt; () + 478 at ViewController.swift:29, address= 0x000000010f74f61e</code></pre><p style=\"box-sizing: border-box; outline: none;\">输入命令后，紧接着会有一行输出，告诉我们断点创建成功，并且显示了创建的新断点的位置等基本信息。</p><p style=\"box-sizing: border-box; outline: none;\">这个命令也有简写形式：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">b ViewController.swift:28\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">我们还可以将断点直接设置到函数上，假设我们有这样一个函数：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">func add(a:Int, b:Int) -&gt; Int {\n\n    return a + b;\n\n}</code></pre><p style=\"box-sizing: border-box; outline: none;\">我们还可以这样设置断点：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">b add\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">这样就将断点设置再了 add 函数调用的开始位置。</p><p style=\"box-sizing: border-box; outline: none;\">我们开可以设置符号断点,比如这样：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">b -[NSArray objectAtIndex:]\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">这个断点会将所有对于 NSArray 的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">objectAtIndex</code>&nbsp;方法的调用设置为断点。这里包括我们开发者对它的调用，以及系统框架内部对它的调用。符号断点对于调试是一个很好用的工具，它能够跟踪那些我们引用的系统库中的代码出现的问题。</p><p style=\"box-sizing: border-box; outline: none;\">我们还可以对已经创建的断点设置激发条件：</p><p style=\"box-sizing: border-box; outline: none;\">我们上面设置的条件表示，只有在&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">result</code>&nbsp;的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">count</code>&nbsp;属性等于 0 的时候，断点才会被激发。</p><p style=\"box-sizing: border-box; outline: none;\">是不是觉得&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;有点意思了呢。</p><p style=\"box-sizing: border-box; outline: none;\">刚才这一长串，给大家介绍了很多 LLDB 的基础内容，相信大家对 LLDB 已经有了一个整体的了解。</p><h3 style=\"box-sizing: border-box; outline: none; color: rgb(51, 51, 51);\">开始探险</h3><p style=\"box-sizing: border-box; outline: none;\">那么现在我们就来用&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">LLDB</code>&nbsp;完成一些更加有意思的事情吧。</p><p style=\"box-sizing: border-box; outline: none;\">我们首先创建一个示例项目:</p><p style=\"box-sizing: border-box; outline: none;\">项目类型选择&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Single View Application</span></p><p style=\"box-sizing: border-box; outline: none;\">然后点击&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Next</span>, 项目信息中的&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Language</span>&nbsp;选择&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Swift</span>:</p><p style=\"box-sizing: border-box; outline: none;\">点击&nbsp;<span style=\"color: rgb(51, 51, 51); box-sizing: border-box; outline: none; font-weight: 600;\">Next</span>&nbsp;然后出现项目存储位置的选择，选择一个你自己的存储位置。接下来我们在&nbsp;<span style=\"color: rgb(51, 51, 51); box-sizing: border-box; outline: none; font-weight: 600;\">Main.storyboard</span>&nbsp;中拖放一个 Button 放到右上角：</p><p style=\"box-sizing: border-box; outline: none;\">随后，我们按住&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">Option</code>&nbsp;键，然后点击&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">ViewController.swift</span>&nbsp;文件，可以在设计界面旁边打开辅助界面。打开后，我们按住&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">Control</code>&nbsp;键，然后将我们刚刚创建的按钮拖动到代码视图中：</p><p style=\"box-sizing: border-box; outline: none;\">然后松开鼠标按键，我们就会看到一个弹出菜单：</p><p style=\"box-sizing: border-box; outline: none;\">我们将&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Connection</span>&nbsp;的类型选择为&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Action</span>， Name 输入为&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">buttonClicked</code>，其他不用更改，然后点击&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600; color: rgb(51, 51, 51);\">Connect</span>&nbsp;按钮。这样就完成了按钮事件的创建。</p><p style=\"box-sizing: border-box; outline: none;\">接下来，我们运行应用，就可以看到这样的界面了：</p><p style=\"box-sizing: border-box; outline: none;\">一切就绪，现在就可以展开我们的 LLDB 大法啦~</p><p style=\"box-sizing: border-box; outline: none;\">其实我们还可以不通过断点的方式来打开 LLDB 命令行，在我们先将程序运行起来，然后我们看一下调试区域的按钮：</p><p style=\"box-sizing: border-box; outline: none;\">注意下，蓝色的断点开关按钮右边还有一个暂停按钮，我们只需要点这个暂停按钮，就可以进入 LLDB 命令行调试状态。因为 LLDB 在 Xcode 运行中是一直驻留在后台的，所以我们其实是可以在任何时间都可以启动 LLDB 命令行的。</p><p style=\"box-sizing: border-box; outline: none;\">打开 LLDB 命令行后，我们可以输入这个命令，打印出当前的视图层级（又学一招~）：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) po [[[UIApplication sharedApplication] keyWindow] recursiveDescription]\n&lt;UIWindow: 0x7ffcd2f0f1e0; frame = (0 0; 375 667); gestureRecognizers = &lt;NSArray: 0x7ffcd2f10170&gt;; layer = &lt;UIWindowLayer: 0x7ffcd2f0ea80&gt;&gt;\n   | &lt;UIView: 0x7ffcd2c6dc10; frame = (0 0; 375 667); autoresize = W+H; layer = &lt;CALayer: 0x7ffcd2c17f10&gt;&gt;\n   |    | &lt;UIButton: 0x7ffcd2c6dfc0; frame = (20 62; 78 30); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: 0x7ffcd2c6bc10&gt;&gt;\n   |    |    | &lt;UIButtonLabel: 0x7ffcd2f15af0; frame = (16 6; 46 18); text = 'Button'; opaque = NO; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x7ffcd2f16120&gt;&gt;\n   |    | &lt;_UILayoutGuide: 0x7ffcd2c6fae0; frame = (0 0; 0 20); hidden = YES; layer = &lt;CALayer: 0x7ffcd2c6faa0&gt;&gt;\n   |    | &lt;_UILayoutGuide: 0x7ffcd2c70740; frame = (0 667; 0 0); hidden = YES; layer = &lt;CALayer: 0x7ffcd2c6d3d0&gt;&gt;</code></pre><p style=\"box-sizing: border-box; outline: none;\">大家仔细看一下，每个视图的标识中，都有一个 16进制的字符串，代表这个视图的 ID，比如这个：</p><blockquote style=\"box-sizing: border-box; outline: none; border-left-width: 2px; border-left-color: rgb(0, 127, 255); padding: 0.2em 1em; color: rgb(51, 51, 51); background-color: rgba(241, 241, 241, 0.701961);\">UIView: 0x7ffcd2c6dc10</blockquote><p style=\"box-sizing: border-box; outline: none;\">这个 ID 的作用非常的强大，得到了这个 ID， 我们就可以通过这个命令来得到这个视图的引用了：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) e id $view = (id) 0x7fbd71432590\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">简单解释下，通过 expression命令(这里用缩写形式&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">e</code>)，我们用 View 的 ID 值取得了这个 View 引用，并将它保存到 $view 变量中。</p><p style=\"box-sizing: border-box; outline: none;\">我们得到了引用之后，就可以对这个视图进行很多的操作了，比如我们可以在运行时改变这个视图的背景色：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) e (void) [$view setBackgroundColor:[UIColor redColor]]</code></pre><p style=\"box-sizing: border-box; outline: none;\">当然，我们运行完这条命令，界面上不会马上反应出来，我们还需要调用这个命令刷新一下：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) e (void)[CATransaction flush]\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">这样，我们在看一下我们运行的程序，主界面的背景色变成红色了吧。</p><p style=\"box-sizing: border-box; outline: none;\">我们甚至还可以用它来找到某些控件上添加的事件，我们找到我们自己添加的 UIBUtton 的 ID：</p><blockquote style=\"box-sizing: border-box; outline: none; border-left-width: 2px; border-left-color: rgb(0, 127, 255); padding: 0.2em 1em; color: rgb(51, 51, 51); background-color: rgba(241, 241, 241, 0.701961);\"><p style=\"box-sizing: border-box; outline: none; margin: 0.5em 0px;\">UIButton: 0x7ffcd2c6dfc0</p></blockquote><p style=\"box-sizing: border-box; outline: none;\">然后运行下面的命令：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) e id $button = (id) 0x7ffcd2c6dfc0\n\n(lldb) po [$button  allTargets]\n{(\n    &lt;lldb.ViewController: 0x7feff2d67330&gt;\n)}</code></pre><p style=\"box-sizing: border-box; outline: none;\">我们得到 UIButton 的引用后，然后又输出了他的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">allTargets</code>&nbsp;属性，得到了这个 UIButton 所对应的事件&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">target</code>&nbsp;对象的地址，接下来我们再用刚刚得到的这个&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">target</code>&nbsp;地址获取它的&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">action</code>&nbsp;属性：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) po [$button actionsForTarget:(id)0x7feff2d67330 forControlEvent:0]\n&lt;__NSArrayM 0x7feff2c22350&gt;(\nbuttonClicked:\n)</code></pre><p style=\"box-sizing: border-box; outline: none;\">我们这样就得到了，这个按钮所对应的方法名了。那么接下来，我们可以在这个方法上设置断点，或者用 LLDB 的运行时能力替换这个方法的实现等等。总之，对于我们调试应用来说，LLDB 是一个非常强大而高效的工具。这里只介绍了它的冰山一角，关于更多的内容，大家可以使用&nbsp;<code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); padding-right: 0.5em; padding-left: 0.5em; margin-right: 0.2em; margin-left: 0.2em; word-break: break-word;\">help</code>&nbsp;命令，进行深入的研究。相信大家发挥聪明才智，能够发现更多它的强大之处。</p><h3 style=\"box-sizing: border-box; outline: none; color: rgb(51, 51, 51);\">一点点延展，关于 Chisel</h3><p style=\"box-sizing: border-box; outline: none;\">最后，再给大家延展一下。LLDB 本身的命令系统非常健壮，并且它还支持 Python 的脚本扩展，这样它又有了很不错的扩展性，我们可以根据自己的需要来扩展自己的脚本。</p><p style=\"box-sizing: border-box; outline: none;\"><a href=\"https://github.com/facebook/chisel\" target=\"_blank\" rel=\"external\" style=\"box-sizing: border-box; outline: none; color: rgb(0, 127, 255); text-decoration: none; transition: color 0.3s;\">Chisel</a>&nbsp;正是 LLDB 扩展的一个典型例子，这是由 Facebook 团队开发的一个开源的 LLDB 的 Python 扩展集合，它再 LLDB 命令的基础上，又为我们提供了更加方便的操作接口。</p><p style=\"box-sizing: border-box; outline: none;\">比如我们要打印当前的视图层级，如果用 LLDB 原生的命令，我们需要这样：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) po [[[UIApplication sharedApplication] keyWindow] recursiveDescription]\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">而 Chisel 为我们提供了更简洁的接口：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) pviews\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">同样的，这条用于刷新显示的命令：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) e (void)[CATransaction flush]\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">Chisel 也为我们提供了简便的接口：</p><pre style=\"box-sizing: border-box; outline: none; overflow: auto; font-family: monospace, monospace; font-size: 0.8em; background-color: rgba(0, 127, 255, 0.0470588); color: rgb(51, 51, 51); border: 1px solid rgba(0, 127, 255, 0.498039); line-height: 1.3em; padding: 0.5em 1em;\"><code style=\"box-sizing: border-box; outline: none; font-family: monospace, monospace; font-size: 1em;\">(lldb) caflush\n</code></pre><p style=\"box-sizing: border-box; outline: none;\">这里只给大家做一个简单的介绍，关于&nbsp;<a href=\"https://github.com/facebook/chisel\" target=\"_blank\" rel=\"external\" style=\"box-sizing: border-box; outline: none; color: rgb(0, 127, 255); text-decoration: none; transition: color 0.3s;\">Chisel</a>&nbsp;的更多内容，大家可以参看它的主页：<a href=\"https://github.com/facebook/chisel\" target=\"_blank\" rel=\"external\" style=\"box-sizing: border-box; outline: none; color: rgb(0, 127, 255); text-decoration: none; transition: color 0.3s;\">https://github.com/facebook/chisel</a></p><p style=\"box-sizing: border-box; outline: none;\">LLDB 自身完善的命令行系统，以及它的扩展能力，都成为提升我们开发效率的利器。正确的使用好调试工具，一定会帮助我们快速的解决更多的问题。</p><p style=\"box-sizing: border-box; outline: none;\">现在，通过 help 命令，来开始对 LLDB 命令行的探索吧，相信你能在这里发现更多的宝藏。</p><span style=\"box-sizing: border-box; outline: none;\">本站文章均为原创内容，如需转载请注明出处，谢谢。</span><div style=\"box-sizing: border-box; outline: none;\">如果觉得这篇内容阅读后让您有愉悦的感觉，也可以在这里<a href=\"\" style=\"box-sizing: border-box; outline: none; color: rgb(0, 127, 255); text-decoration: none; transition: color 0.3s;\">请我喝杯咖啡</a>~&nbsp;<br style=\"box-sizing: border-box; outline: none;\">如果还想看更多愉悦文章，还可来微信公众号&nbsp;<span style=\"box-sizing: border-box; outline: none; font-weight: 600;\">swift-cafe</span>&nbsp;发现更多。&nbsp;<br style=\"box-sizing: border-box; outline: none;\">您还可以 进行&nbsp;<a href=\"\" style=\"box-sizing: border-box; outline: none; color: rgb(0, 127, 255); text-decoration: none; transition: color 0.3s;\">RSS 订阅</a>，阅读更加方便。&nbsp;</div></div></div></div>"
    }
  ]
}
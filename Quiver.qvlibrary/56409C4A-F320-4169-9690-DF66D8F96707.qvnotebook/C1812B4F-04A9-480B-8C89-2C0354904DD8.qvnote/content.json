{
  "title": "Leveldb源码极简分析",
  "cells": [
    {
      "type": "text",
      "data": "<article class=\"post post-type-normal\" itemscope=\"\" itemtype=\"http://schema.org/Article\" style=\"opacity: 1; margin-top: 0px; color: rgb(85, 85, 85); font-family: Lato, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255); transform: translateY(0px);\"><div class=\"post-body\" itemprop=\"articleBody\" style=\"text-align: justify;\"><h1 id=\"LevelDB-Read-the-Fucking-Source-Code\" style=\"font-size: 24px; margin: 20px 0px 10px; padding: 0px; line-height: 1.5;\">LevelDB: Read the Fucking Source Code.</h1><h2 id=\"by-grakra\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 22px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#by-grakra\" class=\"headerlink\" title=\"by grakra\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>by grakra</h2><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><p style=\"margin: 0px 0px 25px;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">Code version: 1.19 3080a45 Increase leveldb version to 1.19.</code></p><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h2 id=\"Example\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 22px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Example\" class=\"headerlink\" title=\"Example\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Example</h2><h3 id=\"build-leveldb-library\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#build-leveldb-library\" class=\"headerlink\" title=\"build leveldb library\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>build leveldb library</h3><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">make -j 4 -B\n</code></pre></blockquote><h3 id=\"demo\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#demo\" class=\"headerlink\" title=\"demo\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>demo</h3><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">#include &lt;cassert&gt;\n#include &lt;iostream&gt;\nusing std::cerr;\nusing std::cout;\nusing std::endl;\n\n#include &lt;string&gt;\nusing std::string;\n\n#include &lt;algorithm&gt;\nusing std::transform;\n\n#include &lt;functional&gt;\nusing std::ptr_fun;\n\n#include &lt;cctype&gt;\n\n#include \"leveldb/db.h\"\n\nint main () {\n    leveldb::DB* db;\n    leveldb::Options options;\n    options.create_if_missing = true;\n    //options.error_if_exists = true;\n    leveldb::Status s = leveldb::DB::Open(options, \"/tmp/testdb\", &amp;db);\n    if (!s.ok()) {\n        cerr &lt;&lt; s.ToString() &lt;&lt;endl;\n        exit(1);\n    }\n\n    string key1=\"foobar\";\n\n    s = db-&gt;Put(leveldb::WriteOptions(), key1, \"1\");\n    cout &lt;&lt;\"stat:\"&lt;&lt;s.ToString()&lt;&lt;endl;\n\n    leveldb::ReadOptions options1;\n    options1.snapshot = db-&gt;GetSnapshot();\n    string value1;\n    s = db-&gt;Get(options1, key1, &amp;value1);\n    cout &lt;&lt;\"stat:\"&lt;&lt;s.ToString()&lt;&lt;endl;\n    cout &lt;&lt;\"value=\"&lt;&lt;value1&lt;&lt;endl;\n\n    s = db-&gt;Put(leveldb::WriteOptions(), key1, \"111\");\n    cout &lt;&lt;\"stat:\"&lt;&lt;s.ToString()&lt;&lt;endl;\n    value1.resize(0);\n    s = db-&gt;Get(leveldb::ReadOptions(), key1, &amp;value1);\n    cout &lt;&lt;\"stat:\"&lt;&lt;s.ToString()&lt;&lt;endl;\n    cout &lt;&lt;\"value=\"&lt;&lt;value1&lt;&lt;endl;\n\n    value1.resize(0);\n    s = db-&gt;Get(options1, key1, &amp;value1);\n    cout &lt;&lt;\"stat:\"&lt;&lt;s.ToString()&lt;&lt;endl;\n    cout &lt;&lt;\"value=\"&lt;&lt;value1&lt;&lt;endl;\n\n    if (db != nullptr ) {\n        delete db;\n    }\n    cout &lt;&lt;\"delete db\"&lt;&lt;endl;\n    return 0;\n}\n</code></pre></blockquote><h3 id=\"Build-Demo\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Build-Demo\" class=\"headerlink\" title=\"Build Demo\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Build Demo</h3><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">g++ -g -O0 -rdynamic -std=c++0x -static -L out-static -I include/ -o demo demo.cc  -lleveldb -lpthread\n</code></pre></blockquote><h2 id=\"Overview\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 22px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Overview\" class=\"headerlink\" title=\"Overview\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Overview</h2><h3 id=\"Features\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Features\" class=\"headerlink\" title=\"Features\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Features</h3><ol><li>KeyValue</li><li>Persistent</li><li>Embedded</li><li>Snapshot isolation</li><li>Thread-safety</li><li>Configurable</li><li>High-performance (<a href=\"https://github.com/google/leveldb\" target=\"_blank\" rel=\"external\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\">https://github.com/google/leveldb</a>)</li></ol><h3 id=\"Inventory-of-data-directory\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Inventory-of-data-directory\" class=\"headerlink\" title=\"Inventory of data directory\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Inventory of data directory</h3><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_localfs.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/A4271E5EA117AA5F1A6AEB6A71AD9895.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"356\" height=\"298\"></a></p><h3 id=\"Architecture\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Architecture\" class=\"headerlink\" title=\"Architecture\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Architecture</h3><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_lsm.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/8627F09C4F5F96203CCCD8CE5FCD8D21.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1760\" height=\"912\"></a></p><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h2 id=\"LSM-Log-Structured-Merge-tree\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 22px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#LSM-Log-Structured-Merge-tree\" class=\"headerlink\" title=\"LSM (Log-Structured Merge tree)\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>LSM (Log-Structured Merge tree)</h2><p style=\"margin: 0px 0px 25px;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">O’Neil P, Cheng E, Gawlick D, et al. The log-structured merge-tree (LSM-tree)[J]. Acta Informatica, 1996, 33(4): 351-385.</code></p><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h2 id=\"WAL-Write-Ahead-Logging\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 22px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#WAL-Write-Ahead-Logging\" class=\"headerlink\" title=\"WAL (Write-Ahead Logging)\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>WAL (Write-Ahead Logging)</h2><h3 id=\"sketch-of-WAL\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#sketch-of-WAL\" class=\"headerlink\" title=\"sketch of WAL\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>sketch of WAL</h3><p style=\"margin: 0px 0px 25px;\"><strong>WHY</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><ul><li style=\"list-style: circle;\">WAL is essential of standalone local storage systems.</li><li style=\"list-style: circle;\">standalone local storage system is substantialization of WAL.</li><li style=\"list-style: circle;\">WAL guarantees that committed data survive in power outages and process crashes.</li><li style=\"list-style: circle;\">WAL is key to ACIDity of transaction processing.</li><li style=\"list-style: circle;\">Data rate of sequential access is about three orders of magnitude higher than counterpart of random access.</li></ul></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>HOW</strong></p><p style=\"margin: 0px 0px 25px;\"><strong>Stonebraker</strong>&nbsp;says:</p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">1. Each modification to a database page should generate a log record, and the log record must be flushed to the log device before the database page is flushed.\n\n2. Database log records must be flushed in order; log record r cannot be flushed until all log records preceding r are flushed.\n\n3. Upon a transaction commit request, a commit log record must be flushed to the log device before the commit request returns successfully.\n\n------------------------ Architecture of a Database System\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong><a href=\"http://research.microsoft.com/pubs/66814/tr-2008-25.pdf\" target=\"_blank\" rel=\"external\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\">Lin, W., &amp; Yang, M. (2008). PacificA : Replication in Log-Based Distributed Storage Systems</a></strong><br><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/wal.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/C7A4114AAC70DDD38330D8071C106EFA.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"760\" height=\"410\"></a></p><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h3 id=\"WAL-in-LevelDB\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#WAL-in-LevelDB\" class=\"headerlink\" title=\"WAL in LevelDB\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>WAL in LevelDB</h3><h4 id=\"features\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#features\" class=\"headerlink\" title=\"features\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>features</strong></h4><ul><li style=\"list-style: circle;\">Log records separate from its payload.(<strong>abstraction</strong>)</li><li style=\"list-style: circle;\">Log writers/readers separate from underlying file operations.(<strong>portability</strong>)</li><li style=\"list-style: circle;\">WAL is used to make both db data and db metadata persistent.</li></ul><h4 id=\"log-format\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#log-format\" class=\"headerlink\" title=\"log format\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>log format</strong></h4><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_log.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/8ADDA383B816F8E68B56909D2F2C359E.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1187\" height=\"1212\"></a></p><ul><li style=\"list-style: circle;\">a log is AOF that consists of several blocks which are fixed-size except last one.</li><li style=\"list-style: circle;\">a block is a contiguous range that is composes of log record.</li><li style=\"list-style: circle;\">a blob being appended to the log may cross borders of blocks. a cross-border blob is segmented into one kFirstType records, zero or more kMiddleType records and one kLastType records.</li><li style=\"list-style: circle;\">a non-cross-border blob is kFullType.</li><li style=\"list-style: circle;\">if a block remains 7B, then a empty record is appended to the block.</li><li style=\"list-style: circle;\">if a block remains less than 7B, then a trailor (zero paddings) is appended.</li><li style=\"list-style: circle;\">kZeroType records are generated by RandomAccessFile that built upon mmap syscall.<strong>n/a</strong>.</li></ul><h4 id=\"implementation\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#implementation\" class=\"headerlink\" title=\"implementation\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>implementation</strong></h4><p style=\"margin: 0px 0px 25px;\"><strong>log format definition</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/dbformat.h\ndb/dbformat.cc\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>log::Reader</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_log_reader.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/9B88C98E3EA79D121ACFE79EF4ED0E13.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"425\" height=\"269\"></a></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/log_reader.h\ndb/log_reader.cc\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>log::Writer</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_log_writer.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/738739159E0A0ABF94BED7D941913962.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"334\" height=\"149\"></a></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/log_writer.h \ndb/log_writer.cc\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>underlying file operations</strong></p><table style=\"margin: 20px 0px; width: 699px; border: 1px solid rgb(221, 221, 221); table-layout: fixed;\"><thead><tr><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">Abstract class(include/leveldb/env.h)</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">Implementation(util/env_posix.cc)</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">usage</th></tr></thead><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>WritableFile</strong></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>PosixWritableFile</strong>(“w”, fwrite)</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">backbone of&nbsp;<strong>TableBuilder</strong>(writing SSTable)</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>AppendableFile</strong></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>PosixAppendableFile</strong>(“a”, fwrite)</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">backbone of Log::Writer</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>SequentialFile</strong></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>PosixSequentialFile(“r”, fread)</strong></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">backbone of&nbsp;<strong>Log::Reader</strong></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>RandomAccessFile</strong></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>PosixMmapReadableFile</strong>(O_RDONLY, mmap)</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">backbone of&nbsp;<strong>Table</strong>(reading SSTable), prefered if running on 64-bit platforms and the mmap slots(1000) are not hausted.</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>RandomAccessFile</strong></td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>PosixRandomAccessFile</strong>(O_RDONLY, pread)</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">backbone of&nbsp;<strong>Table</strong>(reading SSTable), used if mmap is not allowed.</td></tr></tbody></table><p style=\"margin: 0px 0px 25px;\"><strong>DB Data Manipulation</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><p style=\"margin: 0px 0px 25px;\"><strong>log record payload</strong><br><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_log_payload.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/BD518AD6AB27D2027E27A55893A18060.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1119\" height=\"598\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>commit log record</strong><br><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_log_commit.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/29AF9ADC68820ADF6FFD3E4A36E1E73F.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1112\" height=\"824\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>data/control flow</strong></p><ul><li style=\"list-style: circle;\"><strong>step1: invoke DB::{Put, Delete, Write} to manipulate db</strong></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    Status DB::Put(const WriteOptions&amp; opt, const Slice&amp; key, const Slice&amp; value) {\n      WriteBatch batch;\n      batch.Put(key, value);\n      return Write(opt, &amp;batch);\n    }\n\n    Status DB::Delete(const WriteOptions&amp; opt, const Slice&amp; key) {\n      WriteBatch batch;\n      batch.Delete(key);\n      return Write(opt, &amp;batch);\n    }\n</code></pre><ul><li style=\"list-style: circle;\"><strong>step2: convert operands and opcodes into WriteBatch and Write</strong></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    db/db_impl.cc-1193 Status DBImpl::Write(const WriteOptions&amp; options, WriteBatch* my_batch)\n</code></pre><ul><li style=\"list-style: circle;\"><strong>step3: a Writer object made of WriteBatch is pushed onto the back of the Writer queue.</strong></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    // db/db_impl.cc-1194 Write\n      Writer w(&amp;mutex_);\n      w.batch = my_batch;\n      w.sync = options.sync;\n      w.done = false;\n\n      MutexLock l(&amp;mutex_);\n      writers_.push_back(&amp;w);\n      while (!w.done &amp;&amp; &amp;w != writers_.front()) {\n        w.cv.Wait();\n      }\n      if (w.done) {\n        return w.status;\n      }\n</code></pre><ul><li style=\"list-style: circle;\"><strong>step4: invoke function MakeRoomForWrite to attempt to switch log</strong></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    db/db_impl.cc-1209 Write\n</code></pre><ol><li>slow down write speed,</li><li>switch log,</li><li>trigger background CompactMemTable task(minor compaction),</li><li>trigger background DoCompactionWork task(major compaction).</li></ol><ul><li style=\"list-style: circle;\"><strong>step5: invoke function BuildBatchGroup for group commit</strong></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    // db/db_impl.cc-1213 Write\n        WriteBatch* updates = BuildBatchGroup(&amp;last_writer);\n        WriteBatchInternal::SetSequence(updates, last_sequence + 1);\n        last_sequence += WriteBatchInternal::Count(updates);\n</code></pre><ul><li style=\"list-style: circle;\"><strong>step6: invoke function AddRecord to flush operation records to the log</strong></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    // db/db_impl.cc-1223 Write\n          status = log_-&gt;AddRecord(WriteBatchInternal::Contents(updates));\n          bool sync_error = false;\n          if (status.ok() &amp;&amp; options.sync) {\n            status = logfile_-&gt;Sync();\n            if (!status.ok()) {\n              sync_error = true;\n            }\n          }\n</code></pre><ul><li style=\"list-style: circle;\"><strong>step7: invoke funtion InsertInto to apply new operation records to MemTable</strong></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    // db/db_impl.cc-1232 Write\n            status = WriteBatchInternal::InsertInto(updates, mem_);\n</code></pre><ul><li style=\"list-style: circle;\"><strong>step8: return on success or failure</strong></li></ul></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>DB Metadata Manipulation</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><p style=\"margin: 0px 0px 25px;\"><strong>VersionSet records in-core metadata</strong></p><ul><li style=\"list-style: circle;\"><strong>next file number</strong>: monotonic increasing number for naming log, table and MANIFEST file.</li><li style=\"list-style: circle;\"><strong>log file number</strong>: specify current WAL that keeps db data operations.</li><li style=\"list-style: circle;\"><strong>previous log file number</strong>: previous log file corresponding to immutable MemTable.</li><li style=\"list-style: circle;\"><strong>last sequnence number</strong>: monotonic increasing number assigned to db operations, like timestamp, KeyValue with greater sequence number is newer then the counterpart with less sequence number.</li><li style=\"list-style: circle;\"><strong>compact pointers</strong>: the file from which the next compaction starts in each level.</li><li style=\"list-style: circle;\"><strong>current Version</strong>: keep files that each level owns.</li></ul><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_versionset.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/D179CFAD83836479DC114D5DBD40A7CD.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"268\" height=\"294\"></a><br><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_version.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/E4026595E1E1CA4EA1E4BEA516B9024A.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"226\" height=\"181\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>MANIFEST file is WAL log that stores metadata operation records</strong></p><p style=\"margin: 0px 0px 25px;\"><strong>CURRENT file stores filename of the current MANIFEST file</strong></p><p style=\"margin: 0px 0px 25px;\"><strong>Modify VersionSet</strong><br><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_manifest_commit.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/123EE117C4DB2C33A358BC1C857767BD.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1244\" height=\"549\"></a><br><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_manifest.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/07099EF6088E322408E86456E3828A13.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1434\" height=\"767\"></a></p></blockquote><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h2 id=\"DB-manipulation\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 22px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#DB-manipulation\" class=\"headerlink\" title=\"DB manipulation\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>DB manipulation</h2><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h3 id=\"1-Write\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#1-Write\" class=\"headerlink\" title=\"1.Write\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>1.Write</h3><p style=\"margin: 0px 0px 25px;\"><strong>key points</strong></p><ul><li style=\"list-style: circle;\"><strong>Put</strong>,&nbsp;<strong>Delete</strong>&nbsp;and&nbsp;<strong>Write</strong>&nbsp;invocations are canonicalized into uniform&nbsp;<strong>Write</strong>&nbsp;invocations.</li><li style=\"list-style: circle;\">operation records are appended to&nbsp;<strong>WAL log</strong>&nbsp;before they are applyed to&nbsp;<strong>MemTable</strong>.</li></ul><p style=\"margin: 0px 0px 25px;\">HOW to write WAL log is detailed in the previous sections, thus, only MemTable operations are depicted below.</p><p style=\"margin: 0px 0px 25px;\"><strong>source files</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/memtable.h\ndb/memtable.cc\ndb/skiplist.h\nutil/arena.h\nutil/arena.cc\n</code></pre></blockquote><h4 id=\"MemTable\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#MemTable\" class=\"headerlink\" title=\"MemTable\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>MemTable</strong></h4><p style=\"margin: 0px 0px 25px;\"><strong>brief introduction to MemTable</strong></p><ul><li style=\"list-style: circle;\">A MemTable instance consists of a SkipList instance and a Arena instance(memory allocator).</li><li style=\"list-style: circle;\">SkipList is insertable, non-deleteable.</li><li style=\"list-style: circle;\">SkipList is not thread-safe, so callers (member functions of SkipList are callees) should guarantee synchronization by IPC utilities.</li><li style=\"list-style: circle;\">Only one writer is allowed to mutate SkipList.</li><li style=\"list-style: circle;\">When the writer enters critical region, mulitple readers are also allowed read SkipList.</li><li style=\"list-style: circle;\">Arena is a memory allocator, which allocates a new page by c++&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">new operator</code>&nbsp;when the old page allocated previously is ran out, then allocate small pieces from the page for storing SkipList nodes.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>MemTable member</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_memtable.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/73334847E1F580554E8A0CC5825535C8.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"424\" height=\"197\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>SkipList member</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_skiplist.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/5B59D3D024D3D1432F97217F31134835.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"328\" height=\"245\"></a><br><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_skiplist_iterator.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/A54E4585B81FBD7DFF719E6FD0C8A585.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"161\" height=\"149\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>MemTable Entry</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_memtable_key.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/E0B37B588DC953883A85D8C41AE3E151.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1258\" height=\"563\"></a></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/memtable.cc-82\nvoid MemTable::Add(SequenceNumber s, ValueType type,\n                   const Slice&amp; key,\n                   const Slice&amp; value) {\n  // Format of an entry is concatenation of:\n  //  key_size     : varint32 of internal_key.size()\n  //  key bytes    : char[internal_key.size()]\n  //  value_size   : varint32 of value.size()\n  //  value bytes  : char[value.size()]\n  size_t key_size = key.size();\n  size_t val_size = value.size();\n  size_t internal_key_size = key_size + 8;\n  const size_t encoded_len =\n      VarintLength(internal_key_size) + internal_key_size +\n      VarintLength(val_size) + val_size;\n  char* buf = arena_.Allocate(encoded_len);\n  char* p = EncodeVarint32(buf, internal_key_size);\n  memcpy(p, key.data(), key_size);\n  p += key_size;\n  EncodeFixed64(p, (s &lt;&lt; 8) | type);\n  p += 8;\n  p = EncodeVarint32(p, val_size);\n  memcpy(p, value.data(), val_size);\n  assert((p + val_size) - buf == encoded_len);\n  table_.Insert(buf);\n}\n</code></pre></blockquote><h4 id=\"SkipList\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#SkipList\" class=\"headerlink\" title=\"SkipList\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>SkipList</h4><p style=\"margin: 0px 0px 25px;\"><strong>SkipList Data Structure</strong></p><p style=\"margin: 0px 0px 25px;\"><strong>skiplist contains (0.5, 1, 1.5, 2, 3 and 3.5)</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_skiplist1.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/D5EF500CDAA8C01ED71840079764EF20.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1662\" height=\"985\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>after inserting 1.7</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_skiplist2.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/4994EDF38450280DA5ADE3F68194FB07.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1692\" height=\"933\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>key points on SkipList</strong></p><ul><li style=\"list-style: circle;\">The code of SkipList is handful, but the update rule of SkipList is somewhat obscure.</li><li style=\"list-style: circle;\">However, turn the algorithm into a graph, it’s very intuitive.</li><li style=\"list-style: circle;\">SkipList is ordered unidirectional linked list consists of several nodes that contain a payload, a randomized height and next pointers whose number equals to the height.</li><li style=\"list-style: circle;\">In MemTable, the payload of SkipList node is the MemTable entry.</li><li style=\"list-style: circle;\">If SkipList node’s height is N, then the node has N levels each of which has a next pointer.</li><li style=\"list-style: circle;\">The next pointer in each level of the node points to the nearest node whom it can “see” in the front of iteself. the higher nodes would hide the lower counterparts.</li><li style=\"list-style: circle;\">When lookup some key, start with the highest level of the dummy node&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">head_</code>, if the next node in the current level is less than the key, then walk forward; otherwise walk upward(i.e. level–); finally, return the node until level equals to 0.&nbsp;<strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/skiplist.h:262 FindGreaterOrEqual</code></strong></li></ul><p style=\"margin: 0px 0px 25px;\"><strong>KeyComparator</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/memtable.cc-33\nint MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)\n    const {\n  // Internal keys are encoded as length-prefixed strings.\n  Slice a = GetLengthPrefixedSlice(aptr);\n  Slice b = GetLengthPrefixedSlice(bptr);\n  return comparator.Compare(a, b);\n}\n\n// db/memtable.cc-14\nstatic Slice GetLengthPrefixedSlice(const char* data) {\n  uint32_t len;\n  const char* p = data;\n  p = GetVarint32Ptr(p, p + 5, &amp;len);  // +5: we assume \"p\" is not corrupted\n  return Slice(p, len);\n}\n\n// db/dbformat.cc-50\nint InternalKeyComparator::Compare(const Slice&amp; akey, const Slice&amp; bkey) const {\n  // Order by:\n  //    increasing user key (according to user-supplied comparator)\n  //    decreasing sequence number\n  //    decreasing type (though sequence# should be enough to disambiguate)\n  int r = user_comparator_-&gt;Compare(ExtractUserKey(akey), ExtractUserKey(bkey));\n  if (r == 0) {\n    const uint64_t anum = DecodeFixed64(akey.data() + akey.size() - 8);\n    const uint64_t bnum = DecodeFixed64(bkey.data() + bkey.size() - 8);\n    if (anum &gt; bnum) {\n      r = -1;\n    } else if (anum &lt; bnum) {\n      r = +1;\n    }\n  }\n  return r;\n}\n\n// util/comparator.cc-25 BytewiseComparatorImpl\n  virtual int Compare(const Slice&amp; a, const Slice&amp; b) const {\n    return a.compare(b);\n  }\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>MemTable operations</strong></p><ul><li style=\"list-style: circle;\"><strong>Add</strong>: SkipList.Insert</li><li style=\"list-style: circle;\"><strong>Get</strong>: SkipList::Iterator.Seek</li><li style=\"list-style: circle;\"><strong>MemTable::Interator</strong>: just wark forward along level 0 of SkipList</li></ul><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h3 id=\"2-Compaction\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#2-Compaction\" class=\"headerlink\" title=\"2.Compaction\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>2.Compaction</h3><p style=\"margin: 0px 0px 25px;\"><strong>key points of Compaction</strong></p><ul><li style=\"list-style: circle;\"><strong>Minor compaction</strong>: dump a immutable MemTable into a SSTable on disk.</li><li style=\"list-style: circle;\"><strong>Major compaction</strong>: merge lower sparse SSTables into upper dense SSTables.</li><li style=\"list-style: circle;\">An active MemTable is sealed and becomes immutable when the predicate&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">mem_-&gt;ApproximateMemoryUsage() &lt;= options_.write_buffer_size</code>&nbsp;is not holden(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/db_impl.cc:1341</code>).&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">write_buffer_size</code>&nbsp;is 4MB in default.</li><li style=\"list-style: circle;\">An Immutable MemTable should be dumped onto disk before DB switchs a new log and open up a new MemTable, so the memory may hold two MemTable, the one is sealed, the other is active. Obsolete MemTables may be postponed to release if someone is reading them.</li><li style=\"list-style: circle;\">there is only one backgroup thread that do campacting.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>synchronize foreground CRUD threads and the background compaction thread</strong></p><ul><li style=\"list-style: circle;\">Readers never wait for background compaction thread, only writers wait.</li><li style=\"list-style: circle;\">the foreground threads and the background thread are synchronzed by mutex and condition variable.(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">man thread.h</code>)</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>MakeRoomForWrite wait completion of compactions</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1317\nStatus DBImpl::MakeRoomForWrite(bool force) {\n  mutex_.AssertHeld();\n  assert(!writers_.empty());\n  bool allow_delay = !force;\n  Status s;\n  while (true) {\n    if (!bg_error_.ok()) {\n      // Yield previous error\n      s = bg_error_;\n      break;\n    } else if ( \n        allow_delay &amp;&amp;\n        versions_-&gt;NumLevelFiles(0) &gt;= config::kL0_SlowdownWritesTrigger) {\n      // We are getting close to hitting a hard limit on the number of\n      // L0 files.  Rather than delaying a single write by several\n      // seconds when we hit the hard limit, start delaying each\n      // individual write by 1ms to reduce latency variance.  Also,\n      // this delay hands over some CPU to the compaction thread in\n      // case it is sharing the same core as the writer.\n      mutex_.Unlock();\n      env_-&gt;SleepForMicroseconds(1000);\n      allow_delay = false;  // Do not delay a single write more than once\n      mutex_.Lock();\n    } else if (!force &amp;&amp;\n               (mem_-&gt;ApproximateMemoryUsage() &lt;= options_.write_buffer_size)) {\n      // There is room in current memtable\n      break;\n    } else if (imm_ != NULL) {\n      // We have filled up the current memtable, but the previous\n      // one is still being compacted, so we wait.\n      Log(options_.info_log, \"Current memtable full; waiting...\\n\");\n      bg_cv_.Wait();\n    } else if (versions_-&gt;NumLevelFiles(0) &gt;= config::kL0_StopWritesTrigger) {\n      // There are too many level-0 files.\n      Log(options_.info_log, \"Too many L0 files; waiting...\\n\");\n      bg_cv_.Wait();\n    } else {\n      // Attempt to switch to a new memtable and trigger compaction of old\n      assert(versions_-&gt;PrevLogNumber() == 0);\n      uint64_t new_log_number = versions_-&gt;NewFileNumber();\n      WritableFile* lfile = NULL;\n      s = env_-&gt;NewWritableFile(LogFileName(dbname_, new_log_number), &amp;lfile);\n      if (!s.ok()) {\n        // Avoid chewing through file number space in a tight loop.\n        versions_-&gt;ReuseFileNumber(new_log_number);\n        break;\n      }    \n      delete log_;\n      delete logfile_;\n      logfile_ = lfile;\n      logfile_number_ = new_log_number;\n      log_ = new log::Writer(lfile);\n      imm_ = mem_;\n      has_imm_.Release_Store(imm_);\n      mem_ = new MemTable(internal_comparator_);\n      mem_-&gt;Ref();\n      force = false;   // Do not force another compaction if have room\n      MaybeScheduleCompaction();\n    }    \n  }\n  return s;\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_makeroomforwrite.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/8FFE79F5AB22375B11D6FA5E8793ECC2.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1866\" height=\"1133\"></a></p><p style=\"margin: 0px 0px 25px;\"><strong>background compaction thread</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/db_impl.cc-685 void DBImpl::BackgroundCompaction()\ndb/db_impl.cc-666 void DBImpl::BackgroundCall()\ndb/db_impl.cc-662 void DBImpl::BGWork(void* db)\ndb/db_impl.cc-658 env_-&gt;Schedule(&amp;DBImpl::BGWork, this);\ndb/db_impl.cc-644 void DBImpl::MaybeScheduleCompaction()\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>BackgroundCompaction function do the compaction finally</strong></p><ul><li style=\"list-style: circle;\">Minor compaction take precedence over major compaction.</li><li style=\"list-style: circle;\">Minor compaction invokes&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">CompactMemTable</code>(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/db_impl.cc-689</code>).</li><li style=\"list-style: circle;\">Major compaction first invokes&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">VersionSet::PickCompaction</code>(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/db_impl.cc-710</code>), then invokes&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">DoCompactionWork</code>(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/db_impl.cc-738</code>)</li></ul><h4 id=\"LevelDB-SSTable-Layout\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#LevelDB-SSTable-Layout\" class=\"headerlink\" title=\"LevelDB SSTable Layout\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>LevelDB SSTable Layout</strong></h4><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_table.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/64F773B6B07A366C14C16C1F4A873BFD.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1751\" height=\"1094\"></a></p><ul><li style=\"list-style: circle;\">A SSTable contains several data blocks, one index block, one meta index block, one optional filter block and a footer.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">include/leveldb/table_builder.h\ntable/table_builder.cc\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>data block layout</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_data_block.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/7215057A512C91F1D7EFF5E53580F534.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1445\" height=\"1022\"></a></p><ul><li style=\"list-style: circle;\">A data block contains sorted KeyValue pairs.</li><li style=\"list-style: circle;\">Index block and meta index block are special data blocks</li><li style=\"list-style: circle;\">A data blocks splited into restart intervals in every 16 adjacent keys.</li><li style=\"list-style: circle;\">In a restart interval, keys adopt a fashion of delta encoding.</li><li style=\"list-style: circle;\">Delta encoding: given a certain key, split it into two parts, the one part is longest common prefix of itself and the previous key, which called shared part; the other part is non-shared part, so just use triple tuple (size of shared part, size of non-shared part, non-shared part) to represent the key. both sizes are stored as varint32.</li></ul><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_delta_encoding.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_delta_encoding.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\"></a></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">table/block_builder.h\ntable/block_builder.cc\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>filter block layout</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_filter_block.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/4494274AABA097A62E169769083917DC.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1810\" height=\"1029\"></a></p><ul><li style=\"list-style: circle;\">a filter is created for every 2KB.</li><li style=\"list-style: circle;\">a data block maximum size approximates to 4KB, snappy is used to compress data block. so a persistent data block in SSTable may be less than 2KB, or more than 4KB, thus multiple data blocks may be mapped into one filter.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">table/filter_block.h\ntable/filter_block.cc\nutil/bloom.cc\n</code></pre></blockquote><h4 id=\"When-to-do-compaction\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#When-to-do-compaction\" class=\"headerlink\" title=\"When to do compaction\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>When to do compaction</strong></h4><p style=\"margin: 0px 0px 25px;\"><strong>MaybeScheduleCompaction function submits compaction task to the thread</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc:644\nvoid DBImpl::MaybeScheduleCompaction() {\n  mutex_.AssertHeld();\n  if (bg_compaction_scheduled_) {\n    // Already scheduled\n  } else if (shutting_down_.Acquire_Load()) {\n    // DB is being deleted; no more background compactions\n  } else if (!bg_error_.ok()) {\n    // Already got an error; no more changes\n  } else if (imm_ == NULL &amp;&amp;\n             manual_compaction_ == NULL &amp;&amp;\n             !versions_-&gt;NeedsCompaction()) {\n    // No work to be done\n  } else {\n    bg_compaction_scheduled_ = true;\n    env_-&gt;Schedule(&amp;DBImpl::BGWork, this);\n  }\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>the time to launch compaction task</strong></p><table style=\"margin: 20px 0px; width: 699px; border: 1px solid rgb(221, 221, 221); table-layout: fixed;\"><thead><tr><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>Operation</strong></th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>file-number</strong></th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"><strong>explanation</strong></th></tr></thead><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">Get</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">db/db_impl.cc-1147</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">after read an Key-Value pair</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">Write</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">db/db_impl.cc-1374</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">after created a new MemTable</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">RecordReadSample</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">db/db_impl.cc-1170</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">after walked througth several KeyValue pairs</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">BackgroundCall</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">db/db_impl.cc-681</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">after the background thread has complete the previous compaction task.</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">Open</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">db/db_impl.cc-1521</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">when open and recover LevelDB.</td></tr></tbody></table><h4 id=\"Minor-compaction-CompactMemTable\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Minor-compaction-CompactMemTable\" class=\"headerlink\" title=\"Minor compaction: CompactMemTable\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>Minor compaction: CompactMemTable</strong></h4><p style=\"margin: 0px 0px 25px;\"><strong>key points</strong></p><ul><li style=\"list-style: circle;\">Minor compaction dumps a sealed MemTable to a SSTable on disk, add the new SSTable to a new current Version, and delete obsolete logs and MemTables.</li><li style=\"list-style: circle;\">Minor compaction takes priority over majar compaction, since only up to two MemTables are permitted to reside in memory.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>backtrace</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/db_impl.cc-487 Status DBImpl::WriteLevel0Table\ndb/db_impl.cc-533 void DBImpl::CompactMemTable\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>CompactMemTable</strong></p><ul><li style=\"list-style: circle;\">step1: invoke WriteLevel0Table to create SSTable from&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">imm_</code></li><li style=\"list-style: circle;\">step2: log PrevLogNumber, LogNumber and file addition/deletion in MANIFEST, then apply to the VersionSet.</li><li style=\"list-style: circle;\">step3: drop refcount of the&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">imm_</code>&nbsp;and set&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">imm_</code>&nbsp;to NULL.</li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">step4: delete obsolete files.</p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>NOTICE1</strong>: The contest between the compaction thread and the writer, the former manipulates immutable MemTable(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">imm_</code>), while the latter manipulates mutable MemTable(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">mem_</code>). Only if immutable MemTable resides in memory and a new MemTable is about to be created, then the writer waits for compaction thread to finish its work.</p></li><li style=\"list-style: circle;\"><strong>NOTICE2</strong>: The contest between the compaction thread and the reader. both MemTable and Version are reference-counted. When reading a MemTable/Version, MemTable/Version is assigned to a pointer, then call Ref method to increase the refcount; when the pointer is not need any more, then call Unref method to drop the refcount, delete MemTable/Version if its refcount reaches zero; the compaction thread creates a new Version instead of altering the current Version.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/memtable.h-26\n  // Increase reference count.\n  void Ref() { ++refs_; }\n\n  // Drop reference count.  Delete if no more references exist.\n  void Unref() {\n    --refs_;\n    assert(refs_ &gt;= 0); \n    if (refs_ &lt;= 0) {\n      delete this;\n    } \n  }\n\n// db/version_set.cc-473\nvoid Version::Ref() {\n  ++refs_;\n}\n\nvoid Version::Unref() {\n  assert(this != &amp;vset_-&gt;dummy_versions_);\n  assert(refs_ &gt;= 1);\n  --refs_;\n  if (refs_ == 0) { \n    delete this;\n  }\n}\n\n// db/version_set.cc-57\nVersion::~Version() {\n  assert(refs_ == 0);\n\n  // Remove from linked list\n  prev_-&gt;next_ = next_;\n  next_-&gt;prev_ = prev_;\n\n  // Drop references to files\n  for (int level = 0; level &lt; config::kNumLevels; level++) {\n    for (size_t i = 0; i &lt; files_[level].size(); i++) {\n      FileMetaData* f = files_[level][i];\n      assert(f-&gt;refs &gt; 0);\n      f-&gt;refs--;\n      if (f-&gt;refs &lt;= 0) { \n        delete f;\n      }\n    }\n  }\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>WriteLevel0Table</strong></p><p style=\"margin: 0px 0px 25px;\"><strong>step1</strong>: call BuildTable to create SSTable.</p><ul><li style=\"list-style: circle;\">BuildTable create a TableBuilder object to build SSTable. BuildTable::Rep is representation of SSTable. BuildTable and BuildTable::Rep comply with bridge pattern.</li><li style=\"list-style: circle;\">BuildTable invoke functions as follow to build SSTable.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><ul><li style=\"list-style: circle;\">TableBuilder::TableBuilder: initialize TableBuilder object.</li><li style=\"list-style: circle;\">TableBuilder::Add: iterate MemTable and add KeyValue pairs to TableBuilder.</li><li style=\"list-style: circle;\">TableBuilder::Finish: append filter block, index block, meta data block, footer to SSTable.</li><li style=\"list-style: circle;\">TableBuilder::Abandon: abandon buiding.</li><li style=\"list-style: circle;\">WritableFile::Sync: fsync SSTable file.</li><li style=\"list-style: circle;\">WritableFile::Close: close SSTable file.</li><li style=\"list-style: circle;\">TableCache::NewIterator: load the SSTable into TableCache to see if the SSTable is built successfully.</li></ul></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>step2</strong>: call PickLevelForMemTableOutput to decide which level the new SSTable dwells in.</p><ul><li style=\"list-style: circle;\">the new SSTable is not always placed in level-0, it can aslo be placed in level-L (L ranges from 1 to config::kMaxMemCompactLevel(defaults 2)) if the SSTable is not overlapped with level-L+1 and total bytes of overlapped SSTables in level-L+2 is not greater than kMaxGrandParentOverlapBytes(default 20MB).</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc-493\nint Version::PickLevelForMemTableOutput(\n    const Slice&amp; smallest_user_key,\n    const Slice&amp; largest_user_key) {\n  int level = 0;\n  if (!OverlapInLevel(0, &amp;smallest_user_key, &amp;largest_user_key)) {\n    // Push to next level if there is no overlap in next level,\n    // and the #bytes overlapping in the level after that are limited.\n    InternalKey start(smallest_user_key, kMaxSequenceNumber, kValueTypeForSeek);\n    InternalKey limit(largest_user_key, 0, static_cast&lt;ValueType&gt;(0));\n    std::vector&lt;FileMetaData*&gt; overlaps;\n    while (level &lt; config::kMaxMemCompactLevel) {\n      if (OverlapInLevel(level + 1, &amp;smallest_user_key, &amp;largest_user_key)) {\n        break;\n      }\n      if (level + 2 &lt; config::kNumLevels) {\n        // Check that file does not overlap too many grandparent bytes.\n        GetOverlappingInputs(level + 2, &amp;start, &amp;limit, &amp;overlaps);\n        const int64_t sum = TotalFileSize(overlaps);\n        if (sum &gt; kMaxGrandParentOverlapBytes) {\n          break;\n        }\n      }\n      level++;\n    }\n  }\n  return level;\n}\n</code></pre></blockquote><h4 id=\"Major-compaction-PickCompaction-and-DoCompactionWork\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Major-compaction-PickCompaction-and-DoCompactionWork\" class=\"headerlink\" title=\"Major compaction: PickCompaction and DoCompactionWork\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a><strong>Major compaction: PickCompaction and DoCompactionWork</strong></h4><p style=\"margin: 0px 0px 25px;\"><strong>PickCompaction: which SSTable need to be compacted?</strong></p><ul><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">Two ways to pick up SSTables that will be compacted, the one is size compaction and the other is seek compaction, the db prefer size compaction than seek compaction.</p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">Size compaction: firstly, select the level-L whose compaction score is not less than 1 and the largest among all levels, secondly, pick up the first SSTable whose file number is greater than the previous compacted SSTable’s in the selected level. wrap around to the first file in selected level if the previous compacted SSTable’s file number is the largest.</p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">Invoke VersionSet::Finalize to compute the best compaction score.</p></li><li style=\"list-style: circle;\">Score of level-0 is the ratio betweens the number of file in level-0 and config::kL0_CompactionTrigger(default 4).</li><li style=\"list-style: circle;\">score of level-L ( 0 &lt; L &lt; config::kNumLevels-1) is ratio betweens the total bytes in level-L and 10**L MB.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc-1055\nvoid VersionSet::Finalize(Version* v) {\n  // Precomputed best level for next compaction\n  int best_level = -1;\n  double best_score = -1;\n\n  for (int level = 0; level &lt; config::kNumLevels-1; level++) {\n    double score;\n    if (level == 0) {\n      // We treat level-0 specially by bounding the number of files\n      // instead of number of bytes for two reasons:\n      //\n      // (1) With larger write-buffer sizes, it is nice not to do too\n      // many level-0 compactions.\n      //\n      // (2) The files in level-0 are merged on every read and\n      // therefore we wish to avoid too many files when the individual\n      // file size is small (perhaps because of a small write-buffer\n      // setting, or very high compression ratios, or lots of\n      // overwrites/deletions).\n      score = v-&gt;files_[level].size() /\n          static_cast&lt;double&gt;(config::kL0_CompactionTrigger);\n    } else {\n      // Compute the ratio of current size to size limit.\n      const uint64_t level_bytes = TotalFileSize(v-&gt;files_[level]);\n      score = static_cast&lt;double&gt;(level_bytes) / MaxBytesForLevel(level);\n    }\n\n    if (score &gt; best_score) {\n      best_level = level;\n      best_score = score;\n    }\n  }\n\n  v-&gt;compaction_level_ = best_level;\n  v-&gt;compaction_score_ = best_score;\n}\n\n\n\n// db/version_set.cc-34\nstatic double MaxBytesForLevel(int level) {\n  // Note: the result for level zero is not really used since we set\n  // the level-0 compaction threshold based on number of files.\n  double result = 10 * 1048576.0;  // Result for both level-0 and level-1\n  while (level &gt; 1) { \n    result *= 10;\n    level--;\n  }\n  return result;\n}\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">VersionSet::Finalize is called in VersionSet::Recovery and VersionSet::LogAndApply, i.e. compaction score is updated when MANIFEST file is updated.</p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">seek compaction: pick the first SSTable whose allowd_seeks below zero.</p></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc-422\nbool Version::UpdateStats(const GetStats&amp; stats) {\n  FileMetaData* f = stats.seek_file;\n  if (f != NULL) {\n    f-&gt;allowed_seeks--;\n    if (f-&gt;allowed_seeks &lt;= 0 &amp;&amp; file_to_compact_ == NULL) {\n      file_to_compact_ = f; \n      file_to_compact_level_ = stats.seek_file_level;\n      return true;\n    } \n  }\n  return false;\n}\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">Version::UpdateStats is called in DBImpl::Read directly and DBIter::Next indirectly. when you retrive Key-Value pair in SSTables and more than one SSTables are seeked, drop the allow_seeks of first shot-missing SSTable.</p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\">DBImpl::Get</p></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/version_set.cc-384 Version::Get\ndb/db_impl.cc-1140 DBImpl::Get\n\n\n// db/version_set.cc-384 Version::Get\n      if (last_file_read != NULL &amp;&amp; stats-&gt;seek_file == NULL) {\n        // We have had more than one seek for this read.  Charge the 1st file.\n        stats-&gt;seek_file = last_file_read;\n        stats-&gt;seek_file_level = last_file_read_level;\n      }    \n</code></pre></blockquote><ul><li style=\"list-style: circle;\">DBIter::Next</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/version_set.cc-435 Version::RecordReadSample\ndb/db_impl.cc-1169 DBImpl::RecordReadSample\ndb/db_iter.cc-136 DBIter::ParseKey\ndb/db_iter.cc-179 DBIter::FindNextUserEntry\ndb/db_iter.cc-170 DBIter::Next\n\n\n// db/version_set.cc-435 Version::RecordReadSample\nbool Version::RecordReadSample(Slice internal_key) {\n  ParsedInternalKey ikey;\n  if (!ParseInternalKey(internal_key, &amp;ikey)) {\n    return false;\n  }\n\n  struct State {\n    GetStats stats;  // Holds first matching file\n    int matches;\n\n    static bool Match(void* arg, int level, FileMetaData* f) {\n      State* state = reinterpret_cast&lt;State*&gt;(arg);\n      state-&gt;matches++;\n      if (state-&gt;matches == 1) {\n        // Remember first match.\n        state-&gt;stats.seek_file = f;\n        state-&gt;stats.seek_file_level = level;\n      }\n      // We can stop iterating once we have a second match.\n      return state-&gt;matches &lt; 2;\n    }\n  };\n\n  State state;\n  state.matches = 0;\n  ForEachOverlapping(ikey.user_key, internal_key, &amp;state, &amp;State::Match);\n\n  // Must have at least two matches since we want to merge across\n  // files. But what if we have a single file that contains many\n  // overwrites and deletions?  Should we have another mechanism for\n  // finding such files?\n  if (state.matches &gt;= 2) {\n    // 1MB cost is about 1 seek (see comment in Builder::Apply).\n    return UpdateStats(state.stats);\n  }\n  return false;\n}\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">the allow_seeks is initialized as follows:</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// /db/verset_set.cc-680 VerionSet::Apply\n      // We arrange to automatically compact this file after\n      // a certain number of seeks.  Let's assume:\n      //   (1) One seek costs 10ms\n      //   (2) Writing or reading 1MB costs 10ms (100MB/s)\n      //   (3) A compaction of 1MB does 25MB of IO:\n      //         1MB read from this level\n      //         10-12MB read from next level (boundaries may be misaligned)\n      //         10-12MB written to next level\n      // This implies that 25 seeks cost the same as the compaction\n      // of 1MB of data.  I.e., one seek costs approximately the\n      // same as the compaction of 40KB of data.  We are a little\n      // conservative and allow approximately one seek for every 16KB\n      // of data before triggering a compaction.\n      f-&gt;allowed_seeks = (f-&gt;file_size / 16384);\n      if (f-&gt;allowed_seeks &lt; 100) f-&gt;allowed_seeks = 100;\n\n      levels_[level].deleted_files.erase(f-&gt;number);\n      levels_[level].added_files-&gt;insert(f);\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>pick overlapped files</strong></p><p style=\"margin: 0px 0px 25px;\">For level-L compaction, we shall pick overlapped files in parent level (level-L+1); then merge SSTables from level-L and level+1 and output new SSTables that will be added to level-L+1; finally, delete obsolete SSTables.</p><p style=\"margin: 0px 0px 25px;\"><strong>Particularly, for level-0 compaction, we shall also pick other overlapped files in level-0</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc:1319 VersionSet::PickCompaction\n  // Files in level 0 may overlap each other, so pick up all overlapping ones\n  if (level == 0) { \n    InternalKey smallest, largest;\n    GetRange(c-&gt;inputs_[0], &amp;smallest, &amp;largest);\n    // Note that the next call will discard the file we placed in\n    // c-&gt;inputs_[0] earlier and replace it with an overlapping set\n    // which will include the picked file.\n    current_-&gt;GetOverlappingInputs(0, &amp;smallest, &amp;largest, &amp;c-&gt;inputs_[0]);\n    assert(!c-&gt;inputs_[0].empty());\n  }\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>Then invoke VersionSet::SetupOtherInputs to pick overlapped files in level level-L+1</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc:1335 VersionSet::SetupOtherInputs\nvoid VersionSet::SetupOtherInputs(Compaction* c) {\n  const int level = c-&gt;level();\n  InternalKey smallest, largest;\n  GetRange(c-&gt;inputs_[0], &amp;smallest, &amp;largest);\n\n  current_-&gt;GetOverlappingInputs(level+1, &amp;smallest, &amp;largest, &amp;c-&gt;inputs_[1]);\n\n  // Get entire range covered by compaction\n  InternalKey all_start, all_limit;\n  GetRange2(c-&gt;inputs_[0], c-&gt;inputs_[1], &amp;all_start, &amp;all_limit);\n\n  // See if we can grow the number of inputs in \"level\" without\n  // changing the number of \"level+1\" files we pick up.\n  if (!c-&gt;inputs_[1].empty()) {\n    std::vector&lt;FileMetaData*&gt; expanded0;\n    current_-&gt;GetOverlappingInputs(level, &amp;all_start, &amp;all_limit, &amp;expanded0);\n    const int64_t inputs0_size = TotalFileSize(c-&gt;inputs_[0]);\n    const int64_t inputs1_size = TotalFileSize(c-&gt;inputs_[1]);\n    const int64_t expanded0_size = TotalFileSize(expanded0);\n    if (expanded0.size() &gt; c-&gt;inputs_[0].size() &amp;&amp;\n        inputs1_size + expanded0_size &lt; kExpandedCompactionByteSizeLimit) {\n      InternalKey new_start, new_limit;\n      GetRange(expanded0, &amp;new_start, &amp;new_limit);\n      std::vector&lt;FileMetaData*&gt; expanded1;\n      current_-&gt;GetOverlappingInputs(level+1, &amp;new_start, &amp;new_limit,\n                                     &amp;expanded1);\n      if (expanded1.size() == c-&gt;inputs_[1].size()) {\n        Log(options_-&gt;info_log,\n            \"Expanding@%d %d+%d (%ld+%ld bytes) to %d+%d (%ld+%ld bytes)\\n\",\n            level,\n            int(c-&gt;inputs_[0].size()),\n            int(c-&gt;inputs_[1].size()),\n            long(inputs0_size), long(inputs1_size),\n            int(expanded0.size()),\n            int(expanded1.size()),\n            long(expanded0_size), long(inputs1_size));\n        smallest = new_start;\n        largest = new_limit;\n        c-&gt;inputs_[0] = expanded0;\n        c-&gt;inputs_[1] = expanded1;\n        GetRange2(c-&gt;inputs_[0], c-&gt;inputs_[1], &amp;all_start, &amp;all_limit);\n      }\n    }\n  }\n\n  // Compute the set of grandparent files that overlap this compaction\n  // (parent == level+1; grandparent == level+2)\n  if (level + 2 &lt; config::kNumLevels) {\n    current_-&gt;GetOverlappingInputs(level + 2, &amp;all_start, &amp;all_limit,\n                                   &amp;c-&gt;grandparents_);\n  }\n\n  if (false) {\n    Log(options_-&gt;info_log, \"Compacting %d '%s' .. '%s'\",\n        level,\n        smallest.DebugString().c_str(),\n        largest.DebugString().c_str());\n  }\n\n  // Update the place where we will do the next compaction for this level.\n  // We update this immediately instead of waiting for the VersionEdit\n  // to be applied so that if the compaction fails, we will try a different\n  // key range next time.\n  compact_pointer_[level] = largest.Encode().ToString();\n  c-&gt;edit_.SetCompactPointer(level, largest);\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>Conclusion</strong></p><ul><li style=\"list-style: circle;\"><strong>step1</strong>: pick up SSTables in level-L and denote these files as input0, input0 is not overlapped with other SSTables in level-L.</li><li style=\"list-style: circle;\"><strong>step2</strong>: get the smallest and the largest keys on&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input0</code>, denote these keys as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">smallest</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">largest</code>respectively.</li><li style=\"list-style: circle;\"><strong>step3</strong>: get all SSTables in level-L+1 that overlapped with&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input0</code>, denotes these files as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>.</li><li style=\"list-style: circle;\"><strong>step4</strong>: get the smallest and the largest keys of&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input0</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>, denote these keys as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_start</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_limit</code>&nbsp;respectively.</li><li style=\"list-style: circle;\"><strong>step5</strong>: if&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>&nbsp;contains no files,then goto the step13.</li><li style=\"list-style: circle;\"><strong>step6</strong>: get all SSTables in level-L that overlapped with key range(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_start</code>,&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_limit</code>), denotes these files as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand0</code>.</li><li style=\"list-style: circle;\"><strong>step7</strong>: if the number of files in&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand0</code>&nbsp;is greater than that in&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input0</code>&nbsp;and total bytes of&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand0</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>&nbsp;are less than&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">kExpandedCompactionByteSizeLimit</code>&nbsp;(default 50MB), then try to grow up files in level-L, otherwise, go to the step13.</li><li style=\"list-style: circle;\"><strong>step8</strong>: get the smallest and the largetst keys on&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand0</code>. denote these keys as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">new_start</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">new_limit</code>.</li><li style=\"list-style: circle;\"><strong>step9</strong>: get all SSTables in level-L+1 that overlapped with key range(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">new_start</code>,&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">new_limit</code>), denotes these files as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand1</code>.</li><li style=\"list-style: circle;\"><strong>step10</strong>: if&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand1</code>&nbsp;has the as many files as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>, then assign&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand0</code>,&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">expand1</code>,&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">new_start</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">new_limit</code>&nbsp;to&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input0</code>,&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>,&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">smallest</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">largest</code>&nbsp;respectively. otherwise goto step13.</li><li style=\"list-style: circle;\"><strong>step12</strong>: update&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_start</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_limit</code>&nbsp;to the smallest and the largest keys of&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input0</code>&nbsp;and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>.</li><li style=\"list-style: circle;\"><strong>step13</strong>: if level-L+2 exists, then get files in level-L+2 that overlapped with key range(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_start</code>,&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">all_limit</code>), denotes these files as&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">grandparents</code>.</li><li style=\"list-style: circle;\"><strong>step14</strong>: update&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">compact_pointer</code>&nbsp;in level-L to&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">largest</code>.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>Do compaction after pick up all input files</strong></p><p style=\"margin: 0px 0px 25px;\"><strong>case 1: Move the single sstable from level-L to level-L+1 trivially</strong>&nbsp;iff&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input0</code>&nbsp;contains only one file and&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">input1</code>contains none and total bytes of overlapped files in level-L+2 are less than kMaxGrandParentOverlapBytes(default 20MB).</p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc-1455\nbool Compaction::IsTrivialMove() const {\n  // Avoid a move if there is lots of overlapping grandparent data.\n  // Otherwise, the move could create a parent file that will require\n  // a very expensive merge later on.\n  return (num_input_files(0) == 1 &amp;&amp; \n          num_input_files(1) == 0 &amp;&amp; \n          TotalFileSize(grandparents_) &lt;= kMaxGrandParentOverlapBytes);\n}\n\n\n// db/db_impl.cc-716\n} else if (!is_manual &amp;&amp; c-&gt;IsTrivialMove()) {\n    // Move file to next level\n    assert(c-&gt;num_input_files(0) == 1);\n    FileMetaData* f = c-&gt;input(0, 0);\n    c-&gt;edit()-&gt;DeleteFile(c-&gt;level(), f-&gt;number);\n    c-&gt;edit()-&gt;AddFile(c-&gt;level() + 1, f-&gt;number, f-&gt;file_size,\n                       f-&gt;smallest, f-&gt;largest);\n    status = versions_-&gt;LogAndApply(c-&gt;edit(), &amp;mutex_);\n    if (!status.ok()) {\n      RecordBackgroundError(status);\n    } \n    VersionSet::LevelSummaryStorage tmp; \n    Log(options_.info_log, \"Moved #%lld to level-%d %lld bytes %s: %s\\n\",\n        static_cast&lt;unsigned long long&gt;(f-&gt;number),\n        c-&gt;level() + 1, \n        static_cast&lt;unsigned long long&gt;(f-&gt;file_size),\n        status.ToString().c_str(),\n        versions_-&gt;LevelSummary(&amp;tmp)\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>case 2: Do a non-trivial compaction by DoCompactionWork function</strong></p><ul><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>MakeInputIterator(db/db_impl.cc-908:DBImpl::DoCompactionWork)</strong>: make a MergingIterator from input files. create a TwoLevelIterator for each level-0 file, if any; create a TwoLevelIterator for concatenating all input files in the same level other than level-0. the former TwoLevelIterator consists of two Block::Iter instances, the one for the index block, the other for the data block. the latter TwoLevelIterator consists of one Version::LevelFileNumIterator instance for walking through file numbers and one TwoLevelIterator instance for accessing the SSTable specified by an certain file number.</p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>MergingIterator::Next</strong>&nbsp;return the Key&amp;Value pairs in ascending order of internal keys. The total order of internal keys is well-defined. Distinct user keys are sorted in lexicographical order, newer version(greater sequence number) comes before older version(less sequence number) for the same user key.</p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>Merging rules</strong>: A user key is stored in multi-version, i.e. A user key is mapped to multiple internal keys with distinct SNs(sequnece numbers). When do major compaction, internal keys corresponding to the same user key are merged in the way that old versions(with less SN) are droped and the newest one is retained, in order to eliminate duplicate user keys. However, for the sake of snapshot consistency, the version newer than the oldest snapshot are never dropped; Among the versions older than the oldest snapshot, the most recent version is taken into consideration, if it’s tagged as ‘kTypeValue’, then it’s kept and all other versions are droped, otherwise, all versions are dropped.</p></li></ul><p style=\"margin: 0px 0px 25px;\"><strong>Demo</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">leveldb::ReadOptions options;\nstring key=\"foobar\";\nstring value1, value2;\noptions.snapshot = db-&gt;GetSnapshot();//SN=1000\n\n// get key \"foobar\" for the first time.\ndb-&gt;Get(options, key, &amp;value1);\n\n//...\n//do some time-consuming work, during this time, major compaction is carried out. \n//...\n\n// get key \"foobar\" for the second time.\ndb-&gt;Get(options, key, &amp;value2);\ndb-&gt;ReleaseSnapshot(options.snapshot);\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>Before get the key “foobar” from snapshot(SN=1000) for the first time.</strong></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><table style=\"margin: 20px 0px; width: 665px; border: 1px solid rgb(221, 221, 221); table-layout: fixed;\"><thead><tr><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">key</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">tag</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">sequence</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">value</th></tr></thead><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeDeletion</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">2017</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeValue</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">1993</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“If you miss the train I’m on”</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeValue</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">1001</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“You will know that I am gone”</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeValue</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">999</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“You can hear the whistle blow a hundred miles”</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeDeletion</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">800</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeValue</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">200</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“A hundred miles,a hundred miles”</td></tr></tbody></table></blockquote><ul><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>Then retrieve the value “You can hear the whistle blow a hundred miles” by the key “foobar”.</strong></p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>During this time, major compaction is carried out.</strong></p></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><table style=\"margin: 20px 0px; width: 665px; border: 1px solid rgb(221, 221, 221); table-layout: fixed;\"><thead><tr><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">key</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">tag</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">sequence</th><th style=\"padding: 8px 8px 10px; text-align: left; vertical-align: middle; border-bottom-width: 3px; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">value</th></tr></thead><tbody><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeDeletion</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">2017</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\"></td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeValue</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">1993</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“If you miss the train I’m on”</td></tr><tr style=\"background-color: rgb(249, 249, 249);\"><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeValue</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">1001</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“You will know that I am gone”</td></tr><tr><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“foobar”</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">kTypeValue</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">999</td><td style=\"padding: 8px; text-align: left; vertical-align: middle; border-bottom-color: rgb(221, 221, 221); border-right-color: rgb(238, 238, 238);\">“You can hear the whistle blow a hundred miles”</td></tr></tbody></table></blockquote><ul><li style=\"list-style: circle;\"><strong>At last, get the key “foobar” for the second time, retrieve the same value.</strong></li></ul><p style=\"margin: 0px 0px 25px;\"><strong>Switch output files</strong></p><ul><li style=\"list-style: circle;\"><strong>case1</strong>: The current output file has overlapped too many files in the grandparent level, the total bytes of overlapped files in the grandparent level reach kMaxGrandParentOverlapBytes(20MB).</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/version_set.cc-1493\nbool Compaction::ShouldStopBefore(const Slice&amp; internal_key) {\n  // Scan to find earliest grandparent file that contains key.\n  const InternalKeyComparator* icmp = &amp;input_version_-&gt;vset_-&gt;icmp_;\n  while (grandparent_index_ &lt; grandparents_.size() &amp;&amp;\n      icmp-&gt;Compare(internal_key,\n                    grandparents_[grandparent_index_]-&gt;largest.Encode()) &gt; 0) { \n    if (seen_key_) {\n      overlapped_bytes_ += grandparents_[grandparent_index_]-&gt;file_size;\n    }    \n    grandparent_index_++;\n  }\n  seen_key_ = true;\n\n  if (overlapped_bytes_ &gt; kMaxGrandParentOverlapBytes) {\n    // Too much overlap for current output; start new output\n    overlapped_bytes_ = 0; \n    return true;\n  } else {\n    return false;\n  }\n}\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>case2</strong>: The current file size is large enough(2MB).</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-996: DoCompactionWork\n// Close output file if it is big enough\n      if (compact-&gt;builder-&gt;FileSize() &gt;=\n          compact-&gt;compaction-&gt;MaxOutputFileSize()) {\n        status = FinishCompactionOutputFile(compact, input);\n        if (!status.ok()) {\n          break;\n        }\n      }\n\n// table/table_builder.cc-266\nuint64_t TableBuilder::FileSize() const {\n  return rep_-&gt;offset;\n}\n\n// db/version_set.h-342\n// Maximum size of files to build during this compaction.\nuint64_t MaxOutputFileSize() const { return max_output_file_size_; }\n\n// db/version_set.cc-1437\nCompaction::Compaction(int level)\n    : level_(level),\n      max_output_file_size_(MaxFileSizeForLevel(level)),\n      input_version_(NULL),\n      grandparent_index_(0),\n      seen_key_(false),\n      overlapped_bytes_(0) {\n  for (int i = 0; i &lt; config::kNumLevels; i++) {\n    level_ptrs_[i] = 0; \n  }\n}\n\n// db/version_set.cc-45\nstatic uint64_t MaxFileSizeForLevel(int level) {\n  return kTargetFileSize;  // We could vary per level to reduce number of files?\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>Attempt to do minor compaction during major compaction</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-915: DoCompactionWork\n  for (; input-&gt;Valid() &amp;&amp; !shutting_down_.Acquire_Load(); ) {\n    // Prioritize immutable compaction work\n    if (has_imm_.NoBarrier_Load() != NULL) {\n      const uint64_t imm_start = env_-&gt;NowMicros();\n      mutex_.Lock();\n      if (imm_ != NULL) {\n        CompactMemTable();\n        bg_cv_.SignalAll();  // Wakeup MakeRoomForWrite() if necessary\n      }\n      mutex_.Unlock();\n      imm_micros += (env_-&gt;NowMicros() - imm_start);\n    }\n</code></pre></blockquote><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h3 id=\"3-Read\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#3-Read\" class=\"headerlink\" title=\"3.Read\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>3.Read</h3><h4 id=\"3-1-Get-operation-Get-a-single-Key-Value\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#3-1-Get-operation-Get-a-single-Key-Value\" class=\"headerlink\" title=\"3.1 Get operation: Get a single Key-Value\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>3.1 Get operation: Get a single Key-Value</h4><p style=\"margin: 0px 0px 25px;\"><strong>data flow</strong></p><ul><li style=\"list-style: circle;\"><strong>step1</strong>: Decide which version the specified key will be retrieved from.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1108\nStatus DBImpl::Get(const ReadOptions&amp; options,\n                   const Slice&amp; key,\n                   std::string* value) {\n  Status s;\n  MutexLock l(&amp;mutex_);\n  SequenceNumber snapshot;\n  if (options.snapshot != NULL) {\n    snapshot = reinterpret_cast&lt;const SnapshotImpl*&gt;(options.snapshot)-&gt;number_;\n  } else {\n    snapshot = versions_-&gt;LastSequence();\n  }\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>step2</strong>: Increase refcounts of active MemTable, immutable MemTable and current Version.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1120\n  MemTable* mem = mem_;\n  MemTable* imm = imm_;\n  Version* current = versions_-&gt;current();\n  mem-&gt;Ref();\n  if (imm != NULL) imm-&gt;Ref();\n  current-&gt;Ref();\n\n  bool have_stat_update = false;\n  Version::GetStats stats;\n\n  // Unlock while reading from files and memtables\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>step3</strong>: First of all, atempt to retrieve the KeyValue from the active MemTable, goto step7 on success, fallthrough on failure.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1131\n  {\n    mutex_.Unlock();\n    // First look in the memtable, then in the immutable memtable (if any).\n    LookupKey lkey(key, snapshot);\n    if (mem-&gt;Get(lkey, value, &amp;s)) {\n      // Done\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>step4</strong>:Then, attempt to retrieve the KeyValue from the immutable MemTable, goto step7 on success, fallthrough on failure.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1137\n    } else if (imm != NULL &amp;&amp; imm-&gt;Get(lkey, value, &amp;s)) {\n      // Done\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>step5</strong>: Finally, attempt to retrieve the KeyValue from SSTables.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1139\n    } else {\n      s = current-&gt;Get(options, lkey, value, &amp;stats);\n      have_stat_update = true;\n    }\n    mutex_.Lock();\n  }\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>step6</strong>: Trigger seek compaction if more than one SSTables are seeked and the allowed seek times of the 1st seeked SStable has dropped to zero.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1146\n  if (have_stat_update &amp;&amp; current-&gt;UpdateStats(stats)) {\n    MaybeScheduleCompaction();\n  }\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>step7</strong>: Decrease refcounts of active MemTable, immutable MemTable and current Version.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-1149\n  mem-&gt;Unref();\n  if (imm != NULL) imm-&gt;Unref();\n  current-&gt;Unref();\n  return s;\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>key points</strong></p><ul><li style=\"list-style: circle;\">Multiple readers and one writer are allowed to access the same MemTable concurrently without holding mutex, instead, memory barrier(<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">port/atomic_pointer.h</code>) is used.</li><li style=\"list-style: circle;\">Multiple readers and background compaction thread are allowed to access the same SSTable without holding mutex.</li><li style=\"list-style: circle;\">Reference counting is employed to prevent immutable data structure from being removed accidently.</li><li style=\"list-style: circle;\">The mutex must be holden merely when operations alter the reference count.</li><li style=\"list-style: circle;\">Although the data structure are protected by reference count, however, they could be leaked if the reference count is nonzero and referenced by no pointers.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>Get KeyValue from SSTables</strong></p><ul><li style=\"list-style: circle;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/version_set.cc:323 Get</code></li><li style=\"list-style: circle;\">Seek SStables in level-0, then in level-1, level-2, … until find out the specified key or all levels are searched.</li><li style=\"list-style: circle;\">SSTables of level-0 maybe overlap each other, so search the SSTables whose key range contains the specified key.</li><li style=\"list-style: circle;\">For level-2~L, SSTables in each level have non-overlapped key ranges, therefore, zero or one SSTable are searched in each level.</li><li style=\"list-style: circle;\">Load the SSTables’ data block that contains the specified key potentially into block cache, then look up in the block cache.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>Address KeyValue by key</strong></p><ul><li style=\"list-style: circle;\">VersionSet.current_ points to the current Version.</li><li style=\"list-style: circle;\">Version.files_:&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/version_set.h-138 std::vector&lt;FileMetaData*&gt; files_[config::kNumLevels];</code></li><li style=\"list-style: circle;\">Each level has a entry that contains FileMetaData objects representing SSTables owned by this level in Version.files_.</li><li style=\"list-style: circle;\">FileMetaData:</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_edit.h-17\nstruct FileMetaData {\n  int refs;\n  int allowed_seeks;          // Seeks allowed until     compaction\n  uint64_t number;\n  uint64_t file_size;         // File size in bytes\n  InternalKey smallest;       // Smallest internal key served by table\n  InternalKey largest;        // Largest internal key served by table\n\n  FileMetaData() : refs(0), allowed_seeks(1 &lt;&lt; 30), file_size(0) { }\n};\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">select FileMetaData whose key range(smallest, largest) contains the key.</li><li style=\"list-style: circle;\">FileMetaData.number can be converted into the corresponding filename.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/filename.cc-32\nstd::string TableFileName(const std::string&amp; name, uint64_t number) {\n  assert(number &gt; 0); \n  return MakeFileName(name, number, \"ldb\");\n}\n\n// db/filename.cc:32\nstatic std::string MakeFileName(const std::string&amp; name, uint64_t number,\n                                const char* suffix) {\n  char buf[100];\n  snprintf(buf, sizeof(buf), \"/%06llu.%s\",\n           static_cast&lt;unsigned long long&gt;(number),\n           suffix);\n  return name + buf;\n}\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">TableCache (LRU algorithm) is used to control the maximum size of working set of opened files.</li><li style=\"list-style: circle;\">Bloom filter is used to filter impossible sstables out if enabled.</li><li style=\"list-style: circle;\">Block cache is used to load working set of data blocks.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>LRU Cache</strong></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_lrucache.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/908B3D8D249A18DEF999DBE79527CDFD.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"1559\" height=\"1095\"></a></p><ul><li style=\"list-style: circle;\">A LRU Cache is composed of a hash map(unordered_map in C++) and a list.</li><li style=\"list-style: circle;\">Hash tables in leveldb is faster than g++ builtin hashtable</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// util/cache.cc-66\n// We provide our own simple hash table since it removes a whole bunch\n// of porting hacks and is also faster than some of the built-in hash\n// table implementations in some of the compiler/runtime combinations\n// we have tested.  E.g., readrandom speeds up by ~5% over the g++\n// 4.4.3's builtin hashtable.\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">Source files</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">include/leveldb/cache.h\nutil/cache.cc\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">The LRUCache is general-purpose cache, both actual types of the key and the value depend on upper layer users.</li><li style=\"list-style: circle;\">When LRU Cache has no spare space to hold a new entry, the least recently used entry must be swapped out, users should provide deletion function for finalization, e.g. when a cache that manages opened fds discards an old fd to make room for a new fd, the old fd shoud be closed.</li><li style=\"list-style: circle;\">Both table cache and block cache are ShardedLRUCaches that have 16 LRUCaches stored in an array. the insertion operations work as follows:</li></ul><p style=\"margin: 0px 0px 25px;\">&gt;</p><ul><li style=\"list-style: circle;\"><strong>step1</strong>: Convert the key into uint32 by the hash function.</li><li style=\"list-style: circle;\"><strong>step2</strong>: Use highest 4 bits to index LRUCache array whose size is 16.</li><li style=\"list-style: circle;\"><strong>step3</strong>: Insert a entry into the chosen LRUCache.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>TableCache</strong></p><ul><li style=\"list-style: circle;\">TableCache is globally unique and shared.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-116 DBImpl\n  table_cache_ = new TableCache(dbname_, &amp;options_, table_cache_size);\n\n  versions_ = new VersionSet(dbname_, &amp;options_, table_cache_,\n                         &amp;internal_comparator_);\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">Source files</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/table_cache.h\ndb/table_cache.cc\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>key</strong>: file numbers corresponding to SSTables.</li><li style=\"list-style: circle;\"><strong>value</strong>: TableAndFile objects.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/table_cache.cc-14\nstruct TableAndFile {\n  RandomAccessFile* file;\n  Table* table;\n};\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>deletion function</strong>: DeleteEntry</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/table_cache.cc-19\nstatic void DeleteEntry(const Slice&amp; key, void* value) {\n  TableAndFile* tf = reinterpret_cast&lt;TableAndFile*&gt;(value);\n  delete tf-&gt;table;\n  delete tf-&gt;file;\n  delete tf;\n}\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">Table is an in-core readonly SSTable, and TableBuilder is an in-core writable SSTable.</li><li style=\"list-style: circle;\">TableCache invokes FindTable function to fetch target Table.<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">db/table_cache.cc-45</code></li><li style=\"list-style: circle;\">Table invokes Open function to load index block and filter block.&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">table/table.cc-38</code></li></ul><p style=\"margin: 0px 0px 25px;\"><strong>Block Cache</strong></p><ul><li style=\"list-style: circle;\">There is only one shared block cache in global.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-98 Options\n  // Control over blocks (user data is stored in a set of blocks, and\n  // a block is the unit of reading from disk).\n\n  // If non-NULL, use the specified cache for blocks.\n  // If NULL, leveldb will automatically create and use an 8MB internal cache.\n  // Default: NULL\n  Cache* block_cache;\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>key</strong>: 16B, consists of cache_id of the table and offset of the block.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// table/table.cc-79 Table::Open\n    rep-&gt;cache_id = (options.block_cache ? options.block_cache-&gt;NewId() : 0);\n\n// table/table.cc:182 BlockReader\n      char cache_key_buffer[16];\n      EncodeFixed64(cache_key_buffer, table-&gt;rep_-&gt;cache_id);\n      EncodeFixed64(cache_key_buffer+8, handle.offset());\n      Slice key(cache_key_buffer, sizeof(cache_key_buffer));\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>value</strong>: Block&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">table/block.cc</code></p></li><li style=\"list-style: circle;\"><p style=\"margin: 0px 0px 25px;\"><strong>deletion function</strong>: DeleteCachedBlock</p></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// table/table.cc:151\nstatic void DeleteCachedBlock(const Slice&amp; key, void* value) {\n  Block* block = reinterpret_cast&lt;Block*&gt;(value);\n  delete block;\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>TableCache::Get</strong></p><ul><li style=\"list-style: circle;\">Load the table specified by&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">file_number</code>&nbsp;into cache</li><li style=\"list-style: circle;\">Then, invoke InternalGet to retrieve the target KeyValue</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/table_cache.cc-105\nStatus TableCache::Get(const ReadOptions&amp; options,\n                       uint64_t file_number,\n                       uint64_t file_size,\n                       const Slice&amp; k,\n                       void* arg,\n                       void (*saver)(void*, const Slice&amp;, const Slice&amp;)) {\n  Cache::Handle* handle = NULL;\n  Status s = FindTable(file_number, file_size, &amp;handle);\n  if (s.ok()) {\n    Table* t = reinterpret_cast&lt;TableAndFile*&gt;(cache_-&gt;Value(handle))-&gt;table;\n    s = t-&gt;InternalGet(options, k, arg, saver);\n    cache_-&gt;Release(handle);\n  }\n  return s;\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>Table::InternalGet</strong></p><ul><li style=\"list-style: circle;\">First, search the key in&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">index block</code>&nbsp;and retrieve the BlockHandle of the target block.</li><li style=\"list-style: circle;\">Then, abandon searching if the key not match with the filter.</li><li style=\"list-style: circle;\">Finally, search the key in&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">data block</code>.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// table/table.cc-226\nStatus Table::InternalGet(const ReadOptions&amp; options, const Slice&amp; k,\n                          void* arg,\n                          void (*saver)(void*, const Slice&amp;, const Slice&amp;)) {\n  Status s;\n  Iterator* iiter = rep_-&gt;index_block-&gt;NewIterator(rep_-&gt;options.comparator);\n  iiter-&gt;Seek(k);\n  if (iiter-&gt;Valid()) {\n    Slice handle_value = iiter-&gt;value();\n    FilterBlockReader* filter = rep_-&gt;filter;\n    BlockHandle handle;\n    if (filter != NULL &amp;&amp;\n        handle.DecodeFrom(&amp;handle_value).ok() &amp;&amp;\n        !filter-&gt;KeyMayMatch(handle.offset(), k)) {\n      // Not found\n    } else {\n      Iterator* block_iter = BlockReader(this, options, iiter-&gt;value());\n      block_iter-&gt;Seek(k);\n      if (block_iter-&gt;Valid()) {\n        (*saver)(arg, block_iter-&gt;key(), block_iter-&gt;value());\n      }\n      s = block_iter-&gt;status();\n      delete block_iter;\n    }\n  }\n  if (s.ok()) {\n    s = iiter-&gt;status();\n  }\n  delete iiter;\n  return s;\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>How to search key in data/index blocks?</strong></p><ul><li style=\"list-style: circle;\">Block::Iter::Seek</li><li style=\"list-style: circle;\">binary search the restart interval which contains the key potentially.</li><li style=\"list-style: circle;\">linear search the key in the target restart interval.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">table/block.cc-165\n  virtual void Seek(const Slice&amp; target) {\n    // Binary search in restart array to find the last restart point\n    // with a key &lt; target\n    uint32_t left = 0;\n    uint32_t right = num_restarts_ - 1;\n    while (left &lt; right) {\n      uint32_t mid = (left + right + 1) / 2;\n      uint32_t region_offset = GetRestartPoint(mid);\n      uint32_t shared, non_shared, value_length;\n      const char* key_ptr = DecodeEntry(data_ + region_offset,\n                                        data_ + restarts_,\n                                        &amp;shared, &amp;non_shared, &amp;value_length);\n      if (key_ptr == NULL || (shared != 0)) {\n        CorruptionError();\n        return;\n      }\n      Slice mid_key(key_ptr, non_shared);\n      if (Compare(mid_key, target) &lt; 0) {\n        // Key at \"mid\" is smaller than \"target\".  Therefore all\n        // blocks before \"mid\" are uninteresting.\n        left = mid;\n      } else {\n        // Key at \"mid\" is &gt;= \"target\".  Therefore all blocks at or\n        // after \"mid\" are uninteresting.\n        right = mid - 1;\n      }\n    }\n\n    // Linear search (within restart block) for first key &gt;= target\n    SeekToRestartPoint(left);\n    while (true) {\n      if (!ParseNextKey()) {\n        return;\n      }\n      if (Compare(key_, target) &gt;= 0) {\n        return;\n      }\n    }\n  }\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">ParseNextKey:</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// table/block.cc-226\n  bool ParseNextKey() {\n    current_ = NextEntryOffset();\n    const char* p = data_ + current_;\n    const char* limit = data_ + restarts_;  // Restarts come right after data\n    if (p &gt;= limit) {\n      // No more entries to return.  Mark as invalid.\n      current_ = restarts_;\n      restart_index_ = num_restarts_;\n      return false;\n    }\n\n    // Decode next entry\n    uint32_t shared, non_shared, value_length;\n    p = DecodeEntry(p, limit, &amp;shared, &amp;non_shared, &amp;value_length);\n    if (p == NULL || key_.size() &lt; shared) {\n      CorruptionError();\n      return false;\n    } else {\n      key_.resize(shared);\n      key_.append(p, non_shared);\n      value_ = Slice(p + non_shared, value_length);\n      while (restart_index_ + 1 &lt; num_restarts_ &amp;&amp;\n             GetRestartPoint(restart_index_ + 1) &lt; current_) {\n        ++restart_index_;\n      }\n      return true;\n    }\n  }\n};\n</code></pre></blockquote><h4 id=\"3-2-NewIterator-Scan-a-batch-of-Key-Values\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#3-2-NewIterator-Scan-a-batch-of-Key-Values\" class=\"headerlink\" title=\"3.2 NewIterator: Scan a batch of Key-Values\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>3.2 NewIterator: Scan a batch of Key-Values</h4><p style=\"margin: 0px 0px 25px;\"><strong>Composite pattern</strong></p><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">Allows you to compose objects into tree structures to represent part-whole hierarchies. Composite pattern lets clients treat individual objects and compositions of objects uniformly. \n- Design Pattern:Elements of Reuseable Object-Oriented Software.\n</code></pre><p style=\"margin: 0px 0px 25px;\"><strong>Algebraic data type</strong></p><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">In computer programming, especially functional programming and type theory, an algebraic data type is a kind of composite type, i.e., a type formed by combining other types.\n- https://en.wikipedia.org/wiki/Algebraic_data_type.\n</code></pre><p style=\"margin: 0px 0px 25px;\">Iterator hierarchy conforms to composite pattern, the iterator is an example of algebraic data type.</p><p style=\"margin: 0px 0px 25px;\"><strong>Iterator hierarchy</strong></p><ul><li style=\"list-style: circle;\"><strong>Base iterator</strong></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">include/leveldb/iterator.h-23\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_iterator.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/97D80DDFC0ACC9BF01674F5DB87D31C5.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"410\" height=\"249\"></a></p><ul><li style=\"list-style: circle;\"><strong>simple iterator</strong></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><p style=\"margin: 0px 0px 25px;\"><strong>MemTableIterator</strong></p><ul><li style=\"list-style: circle;\">for iterating MemTable</li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">db/memtable.cc-51\n</code></pre><p style=\"margin: 0px 0px 25px;\"><strong>Block::Iter</strong></p><ul><li style=\"list-style: circle;\">for iterating both data block and index block</li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">table/block.cc-76\n</code></pre></blockquote><ul><li style=\"list-style: circle;\"><strong>complex iterator</strong></li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><p style=\"margin: 0px 0px 25px;\"><strong>TwoLevelIterator</strong></p><ul><li style=\"list-style: circle;\">for iterating an in-core SSTable</li><li style=\"list-style: circle;\">a TwoLevelIterator iterator is composed of 2 Block::Iter objects, one for iterating the index block, the other one for iterating the data block.</li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">table/two_level_iterator.cc-18\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>MergingIterator</strong></p><blockquote style=\"color: rgb(102, 102, 102);\"><ul><li style=\"list-style: circle;\">for iterating internal keys in ascendent order.</li><li style=\"list-style: circle;\">a MergingIterator is composed of Iterators.</li><li style=\"list-style: circle;\">MergingIterator merges all of its child iterator as its own result.</li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// table/merger.cc-35\n  virtual void SeekToFirst() {\n    for (int i = 0; i &lt; n_; i++) {\n      children_[i].SeekToFirst();\n    }\n    FindSmallest();\n    direction_ = kForward;\n  }\n\n\n// table/merger.cc-59\n  virtual void Next() {\n    assert(Valid());\n\n    // Ensure that all children are positioned after key().\n    // If we are moving in the forward direction, it is already\n    // true for all of the non-current_ children since current_ is\n    // the smallest child and key() == current_-&gt;key().  Otherwise,\n    // we explicitly position the non-current_ children.\n    if (direction_ != kForward) {\n      for (int i = 0; i &lt; n_; i++) {\n        IteratorWrapper* child = &amp;children_[i];\n        if (child != current_) {\n          child-&gt;Seek(key());\n          if (child-&gt;Valid() &amp;&amp;\n              comparator_-&gt;Compare(key(), child-&gt;key()) == 0) {\n            child-&gt;Next();\n          }\n        }\n      }\n      direction_ = kForward;\n    }\n\n    current_-&gt;Next();\n    FindSmallest();\n  }\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">all child seek to first key, and find the smallest key as the first key of MergingIterator.</li><li style=\"list-style: circle;\">for Next invocation, move the current child iterator who has the smallest key forward, then find the next smallet key among all child iterators.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>DBIter</strong></p><ul><li style=\"list-style: circle;\">for iterating user keys of the db in lexicograhical order, in contrast to MergingIterator which iterates internal keys.</li><li style=\"list-style: circle;\">DBIter invokes FindNextUserEntry skip deletion marker.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_iter.cc-146\nvoid DBIter::Next() {\n  assert(valid_);\n\n  if (direction_ == kReverse) {  // Switch directions?\n    direction_ = kForward;\n    // iter_ is pointing just before the entries for this-&gt;key(),\n    // so advance into the range of entries for this-&gt;key() and then\n    // use the normal skipping code below.\n    if (!iter_-&gt;Valid()) {\n      iter_-&gt;SeekToFirst();\n    } else {\n      iter_-&gt;Next();\n    }\n    if (!iter_-&gt;Valid()) {\n      valid_ = false;\n      saved_key_.clear();\n      return;\n    }\n    // saved_key_ already contains the key to skip past.\n  } else {\n    // Store in saved_key_ the current key so we skip it below.\n    SaveKey(ExtractUserKey(iter_-&gt;key()), &amp;saved_key_);\n  }\n\n  FindNextUserEntry(true, &amp;saved_key_);\n}\n\n// db/db_iter.cc-173\nvoid DBIter::FindNextUserEntry(bool skipping, std::string* skip) {\n  // Loop until we hit an acceptable entry to yield\n  assert(iter_-&gt;Valid());\n  assert(direction_ == kForward);\n  do {\n    ParsedInternalKey ikey;\n    if (ParseKey(&amp;ikey) &amp;&amp; ikey.sequence &lt;= sequence_) {\n      switch (ikey.type) {\n        case kTypeDeletion:\n          // Arrange to skip all upcoming entries for this key since\n          // they are hidden by this deletion.\n          SaveKey(ikey.user_key, skip);\n          skipping = true;\n          break;\n        case kTypeValue:\n          if (skipping &amp;&amp;\n              user_comparator_-&gt;Compare(ikey.user_key, *skip) &lt;= 0) {\n            // Entry hidden\n          } else {\n            valid_ = true;\n            saved_key_.clear();\n            return;\n          }\n          break;\n      }\n    }\n    iter_-&gt;Next();\n  } while (iter_-&gt;Valid());\n  saved_key_.clear();\n  valid_ = false;\n}\n</code></pre></blockquote><ul><li style=\"list-style: circle;\">call RecordReadSample to trigger Compaction in every data retrieval of randomized size ranging from 0 to 2 MB.</li></ul><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_iter.cc-130\ninline bool DBIter::ParseKey(ParsedInternalKey* ikey) {\n  Slice k = iter_-&gt;key();\n  ssize_t n = k.size() + iter_-&gt;value().size();\n  bytes_counter_ -= n;\n  while (bytes_counter_ &lt; 0) {\n    bytes_counter_ += RandomPeriod();\n    db_-&gt;RecordReadSample(k);\n  }\n  if (!ParseInternalKey(k, ikey)) {\n    status_ = Status::Corruption(\"corrupted internal key in DBIter\");\n    return false;\n  } else {\n    return true;\n  }\n}\n\n\n// db/db_iter.cc-1176\nvoid DBImpl::RecordReadSample(Slice key) {\n  MutexLock l(&amp;mutex_);\n  if (versions_-&gt;current()-&gt;RecordReadSample(key)) {\n    MaybeScheduleCompaction();\n  }\n}\n</code></pre></blockquote><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h2 id=\"Open\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 22px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Open\" class=\"headerlink\" title=\"Open\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Open</h2><h3 id=\"DB-is-opened-in-3-situations\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#DB-is-opened-in-3-situations\" class=\"headerlink\" title=\"DB is opened in 3 situations\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>DB is opened in 3 situations</h3><ol><li>create a new empty db.</li><li>Reopen a db that has terminates gracefully.</li><li>Recover a db to a consistency state from its last crash.</li></ol><h3 id=\"DB-Open-demo\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#DB-Open-demo\" class=\"headerlink\" title=\"DB::Open demo\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>DB::Open demo</h3><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">#include &lt;cassert&gt;\n#include \"leveldb/db.h\"\n\nleveldb::DB* db;\nleveldb::Options options;\noptions.create_if_missing = true;\nleveldb::Status status = leveldb::DB::Open(options, \"/tmp/testdb\", &amp;db);\nassert(status.ok())\n</code></pre></blockquote><h3 id=\"Customize-DB-by-configuring-leveldb-Options\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Customize-DB-by-configuring-leveldb-Options\" class=\"headerlink\" title=\"Customize DB by configuring leveldb::Options\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Customize DB by configuring leveldb::Options</h3><p style=\"margin: 0px 0px 25px;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">include/leveldb/options.h</code></p><p style=\"margin: 0px 0px 25px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/leveldb_images/leveldb_options.png\" class=\"fancybox fancybox.image\" rel=\"group\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"><img src=\"quiver-image-url/05E914A4DA55F2BE556FFB3E39E3F77D.png\" alt=\"image\" style=\"border: 1px solid rgb(221, 221, 221); margin: 0px; cursor: -webkit-zoom-in; box-sizing: border-box; padding: 3px; display: block !important;\" width=\"323\" height=\"254\"></a></p><blockquote style=\"color: rgb(102, 102, 102);\"><ul><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">comparator</code></strong>: (default: bytewise comparator, lexicographical order)<br>user-defined function for comparing user keys.</li><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">create_if_missing</code></strong>: (default: false)<br>similar to O_CREAT for syscall open</li><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">error_if_exists</code></strong>: (false)<br>smilar to O_EXCL|O_CREAT for syscall open</li><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">paranoid_checks</code></strong>: (false)<br>do aggressive checking, failing to read block if crc checksum is mismatching.</li><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">env</code></strong>: (Env::Default(), PosixEnv)<br>encapsulate syscalls in different platforms, bridge design pattern, use PosixEnv in Linux, high portability.</li><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">info_log</code></strong>: (NULL)<br>basedir/LOG, runtime trace info, not WAL.</li><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">write_buffer_size</code></strong>: (4MB)<br>maximum size in bytes of mem_(MemTable), switch/rollup/cut WAL log when the size of MemTable approximates to write_buffer_size.</li><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">max_open_files</code></strong>: (1000)<br>limit number of opened files.</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>table_cache [db/db_impl.cc:139:DBImpl]</strong></p><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    // db/db_impl.cc-139:DBImpl\n      // Reserve ten files or so for other uses and give the rest to TableCache.\n      const int table_cache_size = options_.max_open_files - kNumNonTableCacheFiles;\n      table_cache_ = new TableCache(dbname_, &amp;options_, table_cache_size);\n</code></pre><ul><li style=\"list-style: circle;\"><strong><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">block_cache</code></strong>: (NULL)<br>block is unit of reading from disk, block_cache keep working set of blocks. user-specified</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>e.g.</strong></p><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">  #include \"leveldb/cache.h\"\n\n  leveldb::Options options;\n  options.cache = leveldb::NewLRUCache(100 * 1048576);  // 100MB cache\n  leveldb::DB* db;\n  leveldb::DB::Open(options, name, &amp;db);\n  ... use the db ...\n  delete db\n  delete options.cache;\n</code></pre><ul><li style=\"list-style: circle;\"><strong>block_size</strong>: (4KB)<br>maximum size of data block, switch a new one if the data block approximates to block_size.</li><li style=\"list-style: circle;\"><strong>block_restart_interval</strong>: (16)<br>Number of keys between restart points for delta encoding of keys. data_block/index_block is split into several block_interval in every&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">block_restart_interval</code>&nbsp;keys.</li><li style=\"list-style: circle;\"><strong>compression</strong>: (kSnappyCompression)<br>compress block. kNoCompression(0x0)|kNoCompression(0x1). ~On a single core of a Core i7 processor in 64-bit mode, it compresses at about&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">250 MB/sec</code>&nbsp;or more and decompresses at about&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">500 MB/sec</code>&nbsp;or more. Typical compression ratios (based on the benchmark suite) are about 1.5-1.7x for plain text, about 2-4x for HTML, and of course 1.0x for JPEGs, PNGs and other already-compressed data. Similar numbers for zlib in its fastest mode are 2.6-2.8x, 3-7x and 1.0x, respectively.~ refer to&nbsp;<a href=\"https://github.com/google/snappy/blob/master/README\" target=\"_blank\" rel=\"external\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\">https://github.com/google/snappy/blob/master/README</a></li></ul><ul><li style=\"list-style: circle;\"><strong>reuse_logs</strong>: (false), EXPERIMENTAL<br>reuse existing log/MANIFEST files when re-opening a database.</li></ul><ul><li style=\"list-style: circle;\"><strong>filter_policy</strong>: (NULL)</li></ul><p style=\"margin: 0px 0px 25px;\"><strong>e.g</strong></p><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">   leveldb::Options options;\n   options.filter_policy = NewBloomFilterPolicy(10);\n   leveldb::DB* db;\n   leveldb::DB::Open(options, \"/tmp/testdb\", &amp;db);\n   ... use the database ...\n   delete db;\n   delete options.filter_policy;\n</code></pre></blockquote><h3 id=\"Implementation-of-DB-Open\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#Implementation-of-DB-Open\" class=\"headerlink\" title=\"Implementation of DB::Open\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>Implementation of DB::Open</h3><h4 id=\"step1-instantiate-a-DBImpl-object\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step1-instantiate-a-DBImpl-object\" class=\"headerlink\" title=\"step1: instantiate a DBImpl object\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step1: instantiate a DBImpl object</h4><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">//db/db_impl.cc-1493 DB::Open\n  DBImpl* impl = new DBImpl(options, dbname);\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\">configure fields of DBImpl and create an empty objects of TableCache and VersionSet.</p><h4 id=\"step2-create-db-data-directory-and-require-file-lock-on-LOCK-file\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step2-create-db-data-directory-and-require-file-lock-on-LOCK-file\" class=\"headerlink\" title=\"step2: create db data directory and require file lock on LOCK file.\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step2: create db data directory and require file lock on LOCK file.</h4><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">    // db/db_impl.cc-276 DBImpl::Recover\n      env_-&gt;CreateDir(dbname_);\n      assert(db_lock_ == NULL);\n      Status s = env_-&gt;LockFile(LockFileName(dbname_), &amp;db_lock_);\n      if (!s.ok()) {\n        return s;\n      }\n</code></pre></blockquote><h4 id=\"step3-return-on-error-in-two-cases-1-no-CURRENT-file-exists-but-create-if-missing-flag-is-off-2-CURRENT-file-exists-but-error-if-exists-flag-is-on-fallthrough-on-success\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step3-return-on-error-in-two-cases-1-no-CURRENT-file-exists-but-create-if-missing-flag-is-off-2-CURRENT-file-exists-but-error-if-exists-flag-is-on-fallthrough-on-success\" class=\"headerlink\" title=\"step3: return on error in two cases: 1. no CURRENT file exists but create_if_missing flag is off, 2. CURRENT file exists but error_if_exists flag is on. fallthrough on success.\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step3: return on error in two cases: 1. no CURRENT file exists but create_if_missing flag is off, 2. CURRENT file exists but error_if_exists flag is on. fallthrough on success.</h4><h4 id=\"step4-prepare-the-first-MANIFEST-file-and-configure-VersionSet-object-if-creating-a-new-db\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step4-prepare-the-first-MANIFEST-file-and-configure-VersionSet-object-if-creating-a-new-db\" class=\"headerlink\" title=\"step4: prepare the first MANIFEST file and configure VersionSet object if creating a new db.\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step4: prepare the first MANIFEST file and configure VersionSet object if creating a new db.</h4><blockquote style=\"color: rgb(102, 102, 102);\"><ul><li style=\"list-style: circle;\">CURRENT file keeps “MANITEST-000001”</li><li style=\"list-style: circle;\">MANIFEST-000001 file keeps a sentinel record that contains:<ul><li style=\"list-style: circle;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">prev_log_number_=0</code></li><li style=\"list-style: circle;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">log_number_=0</code></li><li style=\"list-style: circle;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">manifest_file_number_=1</code></li><li style=\"list-style: circle;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">next_file_number_=1</code></li><li style=\"list-style: circle;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">last_sequence_=0</code></li></ul></li></ul><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-176\nStatus DBImpl::NewDB() {\n  VersionEdit new_db;\n  new_db.SetComparatorName(user_comparator()-&gt;Name());\n  new_db.SetLogNumber(0);\n  new_db.SetNextFile(2);\n  new_db.SetLastSequence(0);\n</code></pre></blockquote><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">  const std::string manifest = DescriptorFileName(dbname_, 1);\n  WritableFile* file;\n  Status s = env_-&gt;NewWritableFile(manifest, &amp;file);\n  if (!s.ok()) {\n    return s;\n  }\n  {\n    log::Writer log(file);\n    std::string record;\n    new_db.EncodeTo(&amp;record);\n    s = log.AddRecord(record);\n    if (s.ok()) {\n      s = file-&gt;Close();\n    }\n  }\n  delete file;\n  if (s.ok()) {\n    // Make \"CURRENT\" file that points to the new manifest file.\n    s = SetCurrentFile(env_, dbname_, 1);\n  } else {\n    env_-&gt;DeleteFile(manifest);\n  }\n  return s;\n}\n</code></pre><h4 id=\"step5-replay-current-MANIFEST-records-on-VersionSet-object-and-set-manifest-filenumber-to-next-file-number-and-increment-next-file-number-by-1\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step5-replay-current-MANIFEST-records-on-VersionSet-object-and-set-manifest-filenumber-to-next-file-number-and-increment-next-file-number-by-1\" class=\"headerlink\" title=\"step5: replay current MANIFEST records on VersionSet object and set manifest_filenumber to next_file_number and increment next_file number by 1.\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step5: replay current MANIFEST records on VersionSet object and set manifest_file<em>number</em>&nbsp;to next_file_number and increment next_file number by 1.</h4><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc-896 VersionSet::Recover\n</code></pre></blockquote><h4 id=\"step6-scan-the-data-directory-return-error-if-any-files-are-missing\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step6-scan-the-data-directory-return-error-if-any-files-are-missing\" class=\"headerlink\" title=\"step6: scan the data directory,  return error if any files are missing\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step6: scan the data directory, return error if any files are missing</h4><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-318 DBImpl::Recover\n  std::vector&lt;std::string&gt; filenames;\n  s = env_-&gt;GetChildren(dbname_, &amp;filenames);\n  if (!s.ok()) {\n    return s;\n  }\n  std::set&lt;uint64_t&gt; expected;\n  versions_-&gt;AddLiveFiles(&amp;expected);\n  uint64_t number;\n  FileType type;\n  std::vector&lt;uint64_t&gt; logs;\n  for (size_t i = 0; i &lt; filenames.size(); i++) {\n    if (ParseFileName(filenames[i], &amp;number, &amp;type)) {\n      expected.erase(number);\n      if (type == kLogFile &amp;&amp; ((number &gt;= min_log) || (number == prev_log)))\n        logs.push_back(number);\n    }\n  }\n  if (!expected.empty()) {\n    char buf[50];\n    snprintf(buf, sizeof(buf), \"%d missing files; e.g.\",\n             static_cast&lt;int&gt;(expected.size()));\n    return Status::Corruption(buf, TableFileName(dbname_, *(expected.begin())));\n  }\n</code></pre></blockquote><h4 id=\"step7-recover-data-from-log-files\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step7-recover-data-from-log-files\" class=\"headerlink\" title=\"step7: recover data from log files\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step7: recover data from log files</h4><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-343 DBImpl::Recover\n// Recover in the order in which the logs were generated\n  std::sort(logs.begin(), logs.end());\n  for (size_t i = 0; i &lt; logs.size(); i++) {\n    s = RecoverLogFile(logs[i], (i == logs.size() - 1), save_manifest, edit,\n                       &amp;max_sequence);\n    if (!s.ok()) {\n      return s;\n    }\n\n    // The previous incarnation may not have written any MANIFEST\n    // records after allocating this log number.  So we manually\n    // update the file number allocation counter in VersionSet.\n    versions_-&gt;MarkFileNumberUsed(logs[i]);\n  }\n</code></pre></blockquote><h4 id=\"step8-reuse-the-last-log-file-MemTable-or-create-new-a-log-file-MemTable\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step8-reuse-the-last-log-file-MemTable-or-create-new-a-log-file-MemTable\" class=\"headerlink\" title=\"step8: reuse the last log file/MemTable or create new a log file/MemTable\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step8: reuse the last log file/MemTable or create new a log file/MemTable</h4><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-453 DBImpl::RecoverLogFile\n  // See if we should keep reusing the last log file.\n  if (status.ok() &amp;&amp; options_.reuse_logs &amp;&amp; last_log &amp;&amp; compactions == 0) {\n    assert(logfile_ == NULL);\n    assert(log_ == NULL);\n    assert(mem_ == NULL);\n    uint64_t lfile_size;\n    if (env_-&gt;GetFileSize(fname, &amp;lfile_size).ok() &amp;&amp;\n        env_-&gt;NewAppendableFile(fname, &amp;logfile_).ok()) {\n      Log(options_.info_log, \"Reusing old log %s \\n\", fname.c_str());\n      log_ = new log::Writer(logfile_, lfile_size);\n      logfile_number_ = log_number;\n      if (mem != NULL) {\n        mem_ = mem;\n        mem = NULL;\n      } else {\n        // mem can be NULL if lognum exists but was empty.\n        mem_ = new MemTable(internal_comparator_);\n        mem_-&gt;Ref();\n      }\n    }\n  }\n\n  if (mem != NULL) {\n    // mem did not get reused; compact it.\n    if (status.ok()) {\n      *save_manifest = true;\n      status = WriteLevel0Table(mem, edit, NULL);\n    }\n    mem-&gt;Unref();\n  }\n\n\n// db/db_impl.cc-1499 DB::Open\n  if (s.ok() &amp;&amp; impl-&gt;mem_ == NULL) {\n    // Create new log and a corresponding memtable.\n    uint64_t new_log_number = impl-&gt;versions_-&gt;NewFileNumber();\n    WritableFile* lfile;\n    s = options.env-&gt;NewWritableFile(LogFileName(dbname, new_log_number),\n                                     &amp;lfile);\n    if (s.ok()) {\n      edit.SetLogNumber(new_log_number);\n      impl-&gt;logfile_ = lfile;\n      impl-&gt;logfile_number_ = new_log_number;\n      impl-&gt;log_ = new log::Writer(lfile);\n      impl-&gt;mem_ = new MemTable(impl-&gt;internal_comparator_);\n      impl-&gt;mem_-&gt;Ref();\n    }\n  }\n</code></pre></blockquote><h4 id=\"step9-create-a-new-MANIFEST-file-if-reuse-logs-flag-is-off-or-the-old-MANIFEST-file-is-too-large\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step9-create-a-new-MANIFEST-file-if-reuse-logs-flag-is-off-or-the-old-MANIFEST-file-is-too-large\" class=\"headerlink\" title=\"step9: create a new MANIFEST file if reuse_logs flag is off or the old MANIFEST file is too large.\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step9: create a new MANIFEST file if reuse_logs flag is off or the old MANIFEST file is too large.</h4><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/version_set.cc-1007 VersionSet::Recover\n    // See if we can reuse the existing MANIFEST file.\n    if (ReuseManifest(dscname, current)) {\n      // No need to save new manifest\n    } else {\n      *save_manifest = true;\n    }\n\n\n// db/version_set.cc-1018 VersionSet::ReuseManifest\nbool VersionSet::ReuseManifest(const std::string&amp; dscname,\n                               const std::string&amp; dscbase) {\n  if (!options_-&gt;reuse_logs) {\n    return false;\n  }\n  FileType manifest_type;\n  uint64_t manifest_number;\n  uint64_t manifest_size;\n  if (!ParseFileName(dscbase, &amp;manifest_number, &amp;manifest_type) ||\n      manifest_type != kDescriptorFile ||\n      !env_-&gt;GetFileSize(dscname, &amp;manifest_size).ok() ||\n      // Make new compacted MANIFEST if old one is too big\n      manifest_size &gt;= kTargetFileSize) {\n    return false;\n  }\n\n  assert(descriptor_file_ == NULL);\n  assert(descriptor_log_ == NULL);\n  Status r = env_-&gt;NewAppendableFile(dscname, &amp;descriptor_file_);\n  if (!r.ok()) {\n    Log(options_-&gt;info_log, \"Reuse MANIFEST: %s\\n\", r.ToString().c_str());\n    assert(descriptor_file_ == NULL);\n    return false;\n  }\n\n  Log(options_-&gt;info_log, \"Reusing MANIFEST %s\\n\", dscname.c_str());\n  descriptor_log_ = new log::Writer(descriptor_file_, manifest_size);\n  manifest_file_number_ = manifest_number;\n  return true;\n}\n\n\n// db/db_impl.cc-1514 DB::Open\n  if (s.ok() &amp;&amp; save_manifest) {\n    edit.SetPrevLogNumber(0);  // No older logs needed after recovery.\n    edit.SetLogNumber(impl-&gt;logfile_number_);\n    s = impl-&gt;versions_-&gt;LogAndApply(&amp;edit, &amp;impl-&gt;mutex_);\n  }\n\n\n// db/version_set.cc-834 VersionSet::LogAndApply\n  // Initialize new descriptor log file if necessary by creating\n  // a temporary file that contains a snapshot of the current version.\n  std::string new_manifest_file;\n  Status s; \n  if (descriptor_log_ == NULL) {\n    // No reason to unlock *mu here since we only hit this path in the\n    // first call to LogAndApply (when opening the database).\n    assert(descriptor_file_ == NULL);\n    new_manifest_file = DescriptorFileName(dbname_, manifest_file_number_);\n    edit-&gt;SetNextFile(next_file_number_);\n    s = env_-&gt;NewWritableFile(new_manifest_file, &amp;descriptor_file_);\n    if (s.ok()) {\n      descriptor_log_ = new log::Writer(descriptor_file_);\n      s = WriteSnapshot(descriptor_log_);\n    }\n  }\n</code></pre></blockquote><h4 id=\"step10-delete-obsolete-files-and-trigger-background-compaction\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step10-delete-obsolete-files-and-trigger-background-compaction\" class=\"headerlink\" title=\"step10: delete obsolete files and trigger background compaction\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step10: delete obsolete files and trigger background compaction</h4><h4 id=\"step11-return-the-DBImpl-object-for-manipulating-leveldb\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 18px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#step11-return-the-DBImpl-object-for-manipulating-leveldb\" class=\"headerlink\" title=\"step11: return the DBImpl object for manipulating leveldb\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>step11: return the DBImpl object for manipulating leveldb</h4><hr style=\"box-sizing: content-box; height: 2px; margin-top: 20px; margin-bottom: 20px; border-style: none; background-color: rgb(221, 221, 221); background-image: repeating-linear-gradient(-45deg, rgb(255, 255, 255), rgb(255, 255, 255) 4px, transparent 4px, transparent 8px);\"><h3 id=\"graceful-termination\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#graceful-termination\" class=\"headerlink\" title=\"graceful termination\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>graceful termination</h3><p style=\"margin: 0px 0px 25px;\">set&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">DBImpl::shutting_down_</code>&nbsp;to a non-NULL value</p><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/db_impl.cc-147\nDBImpl::~DBImpl() {\n  // Wait for background work to finish\n  mutex_.Lock();\n  shutting_down_.Release_Store(this);  // Any non-NULL value is ok\n  while (bg_compaction_scheduled_) {\n    bg_cv_.Wait();\n  }\n  mutex_.Unlock();\n\n  if (db_lock_ != NULL) {\n    env_-&gt;UnlockFile(db_lock_);\n  }\n\n  delete versions_;\n  if (mem_ != NULL) mem_-&gt;Unref();\n  if (imm_ != NULL) imm_-&gt;Unref();\n  delete tmp_batch_;\n  delete log_;\n  delete logfile_;\n  delete table_cache_;\n\n  if (owns_info_log_) {\n    delete options_.info_log;\n  }\n  if (owns_cache_) {\n    delete options_.block_cache;\n  }\n}\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\">The backgroud compaction thread checks&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">shutting_down_</code>&nbsp;before it goes ahead and stops compacting on its own if&nbsp;<code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; padding: 2px 4px; word-wrap: break-word; color: rgb(85, 85, 85); background-color: rgb(238, 238, 238); background-position: initial initial; background-repeat: initial initial;\">shutting_down_</code>&nbsp;is set.</p><p style=\"margin: 0px 0px 25px;\">DBImpl dtor waits for the compaction thread to cease, then release the file lock and memory, close files.</p><h3 id=\"RepairDB\" style=\"margin: 20px 0px 10px; padding: 10px 0px 0px; line-height: 1.5; font-size: 20px;\"><a href=\"http://www.grakra.com/2017/06/17/Leveldb-RTFSC/#RepairDB\" class=\"headerlink\" title=\"RepairDB\" style=\"color: rgb(85, 85, 85); text-decoration: none; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); word-wrap: break-word;\"></a>RepairDB</h3><blockquote style=\"color: rgb(102, 102, 102);\"><pre style=\"overflow: auto; font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; margin-top: 20px; margin-bottom: 20px; padding: 0px; color: rgb(77, 77, 76); background-color: rgb(247, 247, 247); line-height: 1.6; background-position: initial initial; background-repeat: initial initial;\"><code style=\"font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace; font-size: 13px; word-wrap: break-word; color: rgb(77, 77, 76); background-image: none; text-shadow: none;\">// db/repair.cc-456\nStatus RepairDB(const std::string&amp; dbname, const Options&amp; options) {\n  Repairer repairer(dbname, options);\n  return repairer.Run();\n}\n\n\n// db/repair.cc-70        \n  Status Run() {\n    Status status = FindFiles();\n    if (status.ok()) {\n      ConvertLogFilesToTables();\n      ExtractMetaData();\n      status = WriteDescriptor();\n    }   \n    if (status.ok()) {\n      unsigned long long bytes = 0;\n      for (size_t i = 0; i &lt; tables_.size(); i++) {\n        bytes += tables_[i].meta.file_size;\n      }   \n      Log(options_.info_log,\n          \"**** Repaired leveldb %s; \"\n          \"recovered %d files; %llu bytes. \"\n          \"Some data may have been lost. \"\n          \"****\",\n          dbname_.c_str(),\n          static_cast&lt;int&gt;(tables_.size()),\n          bytes);\n    }   \n    return status;\n  }\n</code></pre></blockquote><p style=\"margin: 0px 0px 25px;\"><strong>key points</strong></p><ul><li style=\"list-style: circle;\">scan child files in db data directory, and classify these files into logs, SSTables and MANIFESTs.</li><li style=\"list-style: circle;\">convert log files into SSTable files.</li><li style=\"list-style: circle;\">iterate the key&amp;value of each SSTable, try the best to recovey the SSTable on error.</li><li style=\"list-style: circle;\">Add all valid SSTables info level-0 and write manifest.</li></ul></div><div></div><div></div><div></div><footer class=\"post-footer\"><div class=\"post-tags\" style=\"margin-top: 40px;\"><a href=\"http://www.grakra.com/tags/leveldb/\" rel=\"tag\" style=\"background: rgb(245, 245, 245); color: rgb(85, 85, 85); text-decoration: none; border-bottom: none; word-wrap: break-word; display: inline-block; margin-right: 10px; font-size: 13px; padding: 1px 5px;\"># leveldb</a>&nbsp;<a href=\"http://www.grakra.com/tags/wal/\" rel=\"tag\" style=\"background: rgb(245, 245, 245); color: rgb(85, 85, 85); text-decoration: none; border-bottom: none; word-wrap: break-word; display: inline-block; margin-right: 10px; font-size: 13px; padding: 1px 5px;\"># wal</a>&nbsp;<a href=\"http://www.grakra.com/tags/storage/\" rel=\"tag\" style=\"background: rgb(245, 245, 245); color: rgb(85, 85, 85); text-decoration: none; border-bottom: none; word-wrap: break-word; display: inline-block; margin-right: 10px; font-size: 13px; padding: 1px 5px;\"># storage</a>&nbsp;<a href=\"http://www.grakra.com/tags/key-value/\" rel=\"tag\" style=\"background: rgb(245, 245, 245); color: rgb(85, 85, 85); text-decoration: none; border-bottom: none; word-wrap: break-word; display: inline-block; margin-right: 10px; font-size: 13px; padding: 1px 5px;\"># key-value</a>&nbsp;<a href=\"http://www.grakra.com/tags/lsm/\" rel=\"tag\" style=\"background: rgb(245, 245, 245); color: rgb(85, 85, 85); text-decoration: none; border-bottom: none; word-wrap: break-word; display: inline-block; margin-right: 10px; font-size: 13px; padding: 1px 5px;\"># lsm</a></div></footer></article><div class=\"post-spread\" style=\"margin-top: 20px; text-align: center; color: rgb(85, 85, 85); font-family: Lato, 'PingFang SC', 'Microsoft YaHei', sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><div class=\"jiathis_style\" style=\"display: inline-block;\"><a class=\"jiathis_button_tsina\" title=\"分享到微博\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_tsina\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -96px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_tqq\" title=\"分享到腾讯微博\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_tqq\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -144px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_weixin\" title=\"分享到微信\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_weixin\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -1809px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_cqq\" title=\"分享到QQ好友\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_cqq\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -2017px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_douban\" title=\"分享到豆瓣\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_douban\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -560px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_renren\" title=\"分享到人人网\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_renren\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -160px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_qzone\" title=\"分享到QQ空间\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_qzone\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -64px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_kaixin001\" title=\"分享到开心网\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_kaixin001\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -176px; background-repeat: no-repeat no-repeat;\"></span></a><a class=\"jiathis_button_copy\" title=\"复制网址\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_txt jtico jtico_copy\" style=\"vertical-align: middle; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; text-align: left; overflow: hidden; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); cursor: pointer; float: left; font-size: 12px; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px 0px; background-repeat: no-repeat no-repeat;\"></span></a><a href=\"http://www.jiathis.com/share\" class=\"jiathis jiathis_txt jiathis_separator jtico jtico_jiathis\" target=\"_blank\" style=\"background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/jiathis_ico.png); color: rgb(85, 85, 85); text-decoration: none; border: none; word-wrap: break-word; text-align: left; overflow: hidden; cursor: pointer; display: block; float: left; font-size: 12px; margin: 0px 5px; height: 16px !important; line-height: 16px !important; padding-left: 20px !important; background-position: 0px -1408px; background-repeat: no-repeat no-repeat;\"></a><a class=\"jiathis_counter_style\" style=\"color: rgb(85, 85, 85); border: none; word-wrap: break-word;\"><span class=\"jiathis_button_expanded jiathis_counter jiathis_bubble_style\" id=\"jiathis_counter_70\" title=\"累计分享3次\" style=\"vertical-align: middle; margin: 0px 0px 0px -2px; padding: 0px 0px 0px 4px; font-family: arial, helvetica, sans-serif; float: left; font-size: 11px; font-weight: bold; color: rgb(86, 86, 86); cursor: pointer; display: block; background-image: url(file:///Users/zhaofeng/Downloads/Quiver.app/Contents/Resources/images/counter.gif); height: 16px; line-height: 16px !important; width: 32px !important; background-position: 0px -64px; background-repeat: no-repeat no-repeat;\">3</span></a></div></div>"
    }
  ]
}
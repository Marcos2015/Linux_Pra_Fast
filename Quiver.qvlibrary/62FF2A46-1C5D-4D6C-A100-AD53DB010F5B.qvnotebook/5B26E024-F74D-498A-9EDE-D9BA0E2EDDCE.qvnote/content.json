{
  "title": "IO多路复用之epoll总结",
  "cells": [
    {
      "type": "text",
      "data": "<h1 class=\"postTitle\" style=\"color: rgb(0, 0, 0); font-family: Arial;\"><strong style=\"color: rgb(0, 0, 0); font-size: 14px;\">1、基本知识</strong><br></h1><div id=\"cnblogs_post_body\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><p>　　epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有 描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy 只需一次。</p><p><strong>2、epoll接口</strong></p><p>　　epoll操作过程需要三个接口，分别如下：</p><div class=\"cnblogs_code\"><pre><strong><span style=\"font-size: 15px;\">#include &lt;sys/epoll.h&gt;\n<span style=\"color: rgb(0, 0, 255);\">int</span> epoll_create(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> size);\n</span><span style=\"color: rgb(0, 0, 255);\">int</span> epoll_ctl(<span style=\"color: rgb(0, 0, 255);\">int</span> epfd, <span style=\"color: rgb(0, 0, 255);\">int</span> op, <span style=\"color: rgb(0, 0, 255);\">int</span> fd, <span style=\"color: rgb(0, 0, 255);\">struct</span> epoll_event *<span style=\"color: rgb(0, 0, 255);\">event</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 0, 255);\">int</span> epoll_wait(<span style=\"color: rgb(0, 0, 255);\">int</span> epfd, <span style=\"color: rgb(0, 0, 255);\">struct</span> epoll_event * events, <span style=\"color: rgb(0, 0, 255);\">int</span> maxevents, <span style=\"color: rgb(0, 0, 255);\">int</span> timeout);</span></strong></pre></div><p><span style=\"color: rgb(0, 0, 255);\"><strong>（1）&nbsp;int epoll_create(int size);</strong></span><br>　 　创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的 值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所 以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</p><p><span style=\"color: rgb(0, 0, 255);\"><strong>（2）int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</strong></span><br>　　epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：<br>EPOLL_CTL_ADD：注册新的fd到epfd中；<br>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；<br>EPOLL_CTL_DEL：从epfd中删除一个fd；<br>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事，struct epoll_event结构如下：<br></p><div class=\"cnblogs_code\"><pre><strong><span style=\"font-size: 15px;\"><span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event {\n  __uint32_t events;  </span><span style=\"color: rgb(0, 128, 0);\">/*</span><span style=\"color: rgb(0, 128, 0);\"> Epoll events </span><span style=\"color: rgb(0, 128, 0);\">*/</span><span style=\"color: rgb(0, 0, 0);\">\n  epoll_data_t data;  </span><span style=\"color: rgb(0, 128, 0);\">/*</span><span style=\"color: rgb(0, 128, 0);\"> User data variable </span><span style=\"color: rgb(0, 128, 0);\">*/</span><span style=\"color: rgb(0, 0, 0);\">\n};</span></span></strong></pre></div><p>events可以是以下几个宏的集合：<br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</p><p><span style=\"color: rgb(0, 0, 255);\"><strong>（3） int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</strong></span><br>　 　等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有 说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</p><p><strong>3、工作模式</strong></p><p>　　epoll对文件描述符的操作有两种模式：LT（level trigger）和ET（edge trigger）。LT模式是默认模式，LT模式与ET模式的区别如下：</p><p>　　LT模式：<span style=\"color: rgb(255, 0, 0);\"><strong>当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</strong></span></p><p>　　ET模式：<strong>当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</strong></p><p><strong><span style=\"color: rgb(255, 0, 0);\">　　<span style=\"color: rgb(0, 0, 255);\">ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</span></span></strong></p><p><strong>4、测试程序</strong></p><p>　　编写一个服务器回射程序echo，练习epoll过程。</p><p>服务器代码如下所示：</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div><pre><span style=\"color: rgb(0, 128, 128);\">  1</span> #include &lt;stdio.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  2</span> #include &lt;stdlib.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  3</span> #include &lt;<span style=\"color: rgb(0, 0, 255);\">string</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  4</span> #include &lt;errno.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  5</span> \n<span style=\"color: rgb(0, 128, 128);\">  6</span> #include &lt;netinet/<span style=\"color: rgb(0, 0, 255);\">in</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  7</span> #include &lt;sys/socket.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  8</span> #include &lt;arpa/inet.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  9</span> #include &lt;sys/epoll.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 10</span> #include &lt;unistd.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 11</span> #include &lt;sys/types.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 12</span> \n<span style=\"color: rgb(0, 128, 128);\"> 13</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> IPADDRESS   \"127.0.0.1\"\n<span style=\"color: rgb(0, 128, 128);\"> 14</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> PORT        8787\n<span style=\"color: rgb(0, 128, 128);\"> 15</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> MAXSIZE     1024\n<span style=\"color: rgb(0, 128, 128);\"> 16</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> LISTENQ     5\n<span style=\"color: rgb(0, 128, 128);\"> 17</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> FDSIZE      1000\n<span style=\"color: rgb(0, 128, 128);\"> 18</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> EPOLLEVENTS 100\n<span style=\"color: rgb(0, 128, 128);\"> 19</span> \n<span style=\"color: rgb(0, 128, 128);\"> 20</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">函数声明\n</span><span style=\"color: rgb(0, 128, 128);\"> 21</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">创建套接字并进行绑定</span>\n<span style=\"color: rgb(0, 128, 128);\"> 22</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">int</span> socket_bind(<span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">char</span>* ip,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> port);\n</span><span style=\"color: rgb(0, 128, 128);\"> 23</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">IO多路复用epoll</span>\n<span style=\"color: rgb(0, 128, 128);\"> 24</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_epoll(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> listenfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 25</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">事件处理函数</span>\n<span style=\"color: rgb(0, 128, 128);\"> 26</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span>\n<span style=\"color: rgb(0, 128, 128);\"> 27</span> handle_events(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">struct</span> epoll_event *events,<span style=\"color: rgb(0, 0, 255);\">int</span> num,<span style=\"color: rgb(0, 0, 255);\">int</span> listenfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 28</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">处理接收到的连接</span>\n<span style=\"color: rgb(0, 128, 128);\"> 29</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_accpet(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> listenfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 30</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">读处理</span>\n<span style=\"color: rgb(0, 128, 128);\"> 31</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_read(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 32</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">写处理</span>\n<span style=\"color: rgb(0, 128, 128);\"> 33</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_write(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 34</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">添加事件</span>\n<span style=\"color: rgb(0, 128, 128);\"> 35</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> add_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state);\n</span><span style=\"color: rgb(0, 128, 128);\"> 36</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">修改事件</span>\n<span style=\"color: rgb(0, 128, 128);\"> 37</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> modify_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state);\n</span><span style=\"color: rgb(0, 128, 128);\"> 38</span> <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">删除事件</span>\n<span style=\"color: rgb(0, 128, 128);\"> 39</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> delete_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state);\n</span><span style=\"color: rgb(0, 128, 128);\"> 40</span> \n<span style=\"color: rgb(0, 128, 128);\"> 41</span> <span style=\"color: rgb(0, 0, 255);\">int</span> main(<span style=\"color: rgb(0, 0, 255);\">int</span> argc,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">argv[])\n</span><span style=\"color: rgb(0, 128, 128);\"> 42</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 43</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">  listenfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 44</span>     listenfd =<span style=\"color: rgb(0, 0, 0);\"> socket_bind(IPADDRESS,PORT);\n</span><span style=\"color: rgb(0, 128, 128);\"> 45</span> <span style=\"color: rgb(0, 0, 0);\">    listen(listenfd,LISTENQ);\n</span><span style=\"color: rgb(0, 128, 128);\"> 46</span> <span style=\"color: rgb(0, 0, 0);\">    do_epoll(listenfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 47</span>     <span style=\"color: rgb(0, 0, 255);\">return</span> <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\"> 48</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 49</span> \n<span style=\"color: rgb(0, 128, 128);\"> 50</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">int</span> socket_bind(<span style=\"color: rgb(0, 0, 255);\">const</span> <span style=\"color: rgb(0, 0, 255);\">char</span>* ip,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> port)\n</span><span style=\"color: rgb(0, 128, 128);\"> 51</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 52</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">  listenfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 53</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> sockaddr_in servaddr;\n</span><span style=\"color: rgb(0, 128, 128);\"> 54</span>     listenfd = socket(AF_INET,SOCK_STREAM,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 55</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (listenfd == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 56</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 57</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">socket error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 58</span>         exit(<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 59</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 60</span>     bzero(&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span><span style=\"color: rgb(0, 0, 0);\">(servaddr));\n</span><span style=\"color: rgb(0, 128, 128);\"> 61</span>     servaddr.sin_family =<span style=\"color: rgb(0, 0, 0);\"> AF_INET;\n</span><span style=\"color: rgb(0, 128, 128);\"> 62</span>     inet_pton(AF_INET,ip,&amp;<span style=\"color: rgb(0, 0, 0);\">servaddr.sin_addr);\n</span><span style=\"color: rgb(0, 128, 128);\"> 63</span>     servaddr.sin_port =<span style=\"color: rgb(0, 0, 0);\"> htons(port);\n</span><span style=\"color: rgb(0, 128, 128);\"> 64</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (bind(listenfd,(<span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr*)&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span>(servaddr)) == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 65</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 66</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">bind error: </span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 67</span>         exit(<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 68</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 69</span>     <span style=\"color: rgb(0, 0, 255);\">return</span><span style=\"color: rgb(0, 0, 0);\"> listenfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 70</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 71</span> \n<span style=\"color: rgb(0, 128, 128);\"> 72</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_epoll(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> listenfd)\n</span><span style=\"color: rgb(0, 128, 128);\"> 73</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 74</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> epollfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 75</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event events[EPOLLEVENTS];\n</span><span style=\"color: rgb(0, 128, 128);\"> 76</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> ret;\n</span><span style=\"color: rgb(0, 128, 128);\"> 77</span>     <span style=\"color: rgb(0, 0, 255);\">char</span><span style=\"color: rgb(0, 0, 0);\"> buf[MAXSIZE];\n</span><span style=\"color: rgb(0, 128, 128);\"> 78</span>     memset(buf,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">,MAXSIZE);\n</span><span style=\"color: rgb(0, 128, 128);\"> 79</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">创建一个描述符</span>\n<span style=\"color: rgb(0, 128, 128);\"> 80</span>     epollfd =<span style=\"color: rgb(0, 0, 0);\"> epoll_create(FDSIZE);\n</span><span style=\"color: rgb(0, 128, 128);\"> 81</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">添加监听描述符事件</span>\n<span style=\"color: rgb(0, 128, 128);\"> 82</span> <span style=\"color: rgb(0, 0, 0);\">    add_event(epollfd,listenfd,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\"> 83</span>     <span style=\"color: rgb(0, 0, 255);\">for</span><span style=\"color: rgb(0, 0, 0);\"> ( ; ; )\n</span><span style=\"color: rgb(0, 128, 128);\"> 84</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 85</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">获取已经准备好的描述符事件</span>\n<span style=\"color: rgb(0, 128, 128);\"> 86</span>         ret = epoll_wait(epollfd,events,EPOLLEVENTS,-<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 87</span> <span style=\"color: rgb(0, 0, 0);\">        handle_events(epollfd,events,ret,listenfd,buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 88</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 89</span> <span style=\"color: rgb(0, 0, 0);\">    close(epollfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 90</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 91</span> \n<span style=\"color: rgb(0, 128, 128);\"> 92</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span>\n<span style=\"color: rgb(0, 128, 128);\"> 93</span> handle_events(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">struct</span> epoll_event *events,<span style=\"color: rgb(0, 0, 255);\">int</span> num,<span style=\"color: rgb(0, 0, 255);\">int</span> listenfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf)\n</span><span style=\"color: rgb(0, 128, 128);\"> 94</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 95</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> i;\n</span><span style=\"color: rgb(0, 128, 128);\"> 96</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 97</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">进行选好遍历</span>\n<span style=\"color: rgb(0, 128, 128);\"> 98</span>     <span style=\"color: rgb(0, 0, 255);\">for</span> (i = <span style=\"color: rgb(128, 0, 128);\">0</span>;i &lt; num;i++<span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 99</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">100</span>         fd =<span style=\"color: rgb(0, 0, 0);\"> events[i].data.fd;\n</span><span style=\"color: rgb(0, 128, 128);\">101</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">根据描述符的类型和事件类型进行处理</span>\n<span style=\"color: rgb(0, 128, 128);\">102</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> ((fd == listenfd) &amp;&amp;(events[i].events &amp;<span style=\"color: rgb(0, 0, 0);\"> EPOLLIN))\n</span><span style=\"color: rgb(0, 128, 128);\">103</span> <span style=\"color: rgb(0, 0, 0);\">            handle_accpet(epollfd,listenfd);\n</span><span style=\"color: rgb(0, 128, 128);\">104</span>         <span style=\"color: rgb(0, 0, 255);\">else</span> <span style=\"color: rgb(0, 0, 255);\">if</span> (events[i].events &amp;<span style=\"color: rgb(0, 0, 0);\"> EPOLLIN)\n</span><span style=\"color: rgb(0, 128, 128);\">105</span> <span style=\"color: rgb(0, 0, 0);\">            do_read(epollfd,fd,buf);\n</span><span style=\"color: rgb(0, 128, 128);\">106</span>         <span style=\"color: rgb(0, 0, 255);\">else</span> <span style=\"color: rgb(0, 0, 255);\">if</span> (events[i].events &amp;<span style=\"color: rgb(0, 0, 0);\"> EPOLLOUT)\n</span><span style=\"color: rgb(0, 128, 128);\">107</span> <span style=\"color: rgb(0, 0, 0);\">            do_write(epollfd,fd,buf);\n</span><span style=\"color: rgb(0, 128, 128);\">108</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">109</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">110</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_accpet(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> listenfd)\n</span><span style=\"color: rgb(0, 128, 128);\">111</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">112</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> clifd;\n</span><span style=\"color: rgb(0, 128, 128);\">113</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> sockaddr_in cliaddr;\n</span><span style=\"color: rgb(0, 128, 128);\">114</span> <span style=\"color: rgb(0, 0, 0);\">    socklen_t  cliaddrlen;\n</span><span style=\"color: rgb(0, 128, 128);\">115</span>     clifd = accept(listenfd,(<span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr*)&amp;cliaddr,&amp;<span style=\"color: rgb(0, 0, 0);\">cliaddrlen);\n</span><span style=\"color: rgb(0, 128, 128);\">116</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (clifd == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">117</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">accpet error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">118</span>     <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\">119</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">120</span>         printf(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">accept a new client: %s:%d\\n</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);\n</span><span style=\"color: rgb(0, 128, 128);\">121</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">添加一个客户描述符和事件</span>\n<span style=\"color: rgb(0, 128, 128);\">122</span> <span style=\"color: rgb(0, 0, 0);\">        add_event(epollfd,clifd,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\">123</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">124</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">125</span> \n<span style=\"color: rgb(0, 128, 128);\">126</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_read(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf)\n</span><span style=\"color: rgb(0, 128, 128);\">127</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">128</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> nread;\n</span><span style=\"color: rgb(0, 128, 128);\">129</span>     nread =<span style=\"color: rgb(0, 0, 0);\"> read(fd,buf,MAXSIZE);\n</span><span style=\"color: rgb(0, 128, 128);\">130</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (nread == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">131</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">132</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">read error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">133</span> <span style=\"color: rgb(0, 0, 0);\">        close(fd);\n</span><span style=\"color: rgb(0, 128, 128);\">134</span> <span style=\"color: rgb(0, 0, 0);\">        delete_event(epollfd,fd,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\">135</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">136</span>     <span style=\"color: rgb(0, 0, 255);\">else</span> <span style=\"color: rgb(0, 0, 255);\">if</span> (nread == <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">137</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">138</span>         fprintf(stderr,<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">client close.\\n</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">139</span> <span style=\"color: rgb(0, 0, 0);\">        close(fd);\n</span><span style=\"color: rgb(0, 128, 128);\">140</span> <span style=\"color: rgb(0, 0, 0);\">        delete_event(epollfd,fd,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\">141</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">142</span>     <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\">143</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">144</span>         printf(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">read message is : %s</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">,buf);\n</span><span style=\"color: rgb(0, 128, 128);\">145</span>         <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">修改描述符对应的事件，由读改为写</span>\n<span style=\"color: rgb(0, 128, 128);\">146</span> <span style=\"color: rgb(0, 0, 0);\">        modify_event(epollfd,fd,EPOLLOUT);\n</span><span style=\"color: rgb(0, 128, 128);\">147</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">148</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">149</span> \n<span style=\"color: rgb(0, 128, 128);\">150</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_write(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf)\n</span><span style=\"color: rgb(0, 128, 128);\">151</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">152</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> nwrite;\n</span><span style=\"color: rgb(0, 128, 128);\">153</span>     nwrite =<span style=\"color: rgb(0, 0, 0);\"> write(fd,buf,strlen(buf));\n</span><span style=\"color: rgb(0, 128, 128);\">154</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (nwrite == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">155</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">156</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">write error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">157</span> <span style=\"color: rgb(0, 0, 0);\">        close(fd);\n</span><span style=\"color: rgb(0, 128, 128);\">158</span> <span style=\"color: rgb(0, 0, 0);\">        delete_event(epollfd,fd,EPOLLOUT);\n</span><span style=\"color: rgb(0, 128, 128);\">159</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">160</span>     <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\">161</span> <span style=\"color: rgb(0, 0, 0);\">        modify_event(epollfd,fd,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\">162</span>     memset(buf,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">,MAXSIZE);\n</span><span style=\"color: rgb(0, 128, 128);\">163</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">164</span> \n<span style=\"color: rgb(0, 128, 128);\">165</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> add_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state)\n</span><span style=\"color: rgb(0, 128, 128);\">166</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">167</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event ev;\n</span><span style=\"color: rgb(0, 128, 128);\">168</span>     ev.events =<span style=\"color: rgb(0, 0, 0);\"> state;\n</span><span style=\"color: rgb(0, 128, 128);\">169</span>     ev.data.fd =<span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\">170</span>     epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;<span style=\"color: rgb(0, 0, 0);\">ev);\n</span><span style=\"color: rgb(0, 128, 128);\">171</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">172</span> \n<span style=\"color: rgb(0, 128, 128);\">173</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> delete_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state)\n</span><span style=\"color: rgb(0, 128, 128);\">174</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">175</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event ev;\n</span><span style=\"color: rgb(0, 128, 128);\">176</span>     ev.events =<span style=\"color: rgb(0, 0, 0);\"> state;\n</span><span style=\"color: rgb(0, 128, 128);\">177</span>     ev.data.fd =<span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\">178</span>     epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;<span style=\"color: rgb(0, 0, 0);\">ev);\n</span><span style=\"color: rgb(0, 128, 128);\">179</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">180</span> \n<span style=\"color: rgb(0, 128, 128);\">181</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> modify_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state)\n</span><span style=\"color: rgb(0, 128, 128);\">182</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">183</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event ev;\n</span><span style=\"color: rgb(0, 128, 128);\">184</span>     ev.events =<span style=\"color: rgb(0, 0, 0);\"> state;\n</span><span style=\"color: rgb(0, 128, 128);\">185</span>     ev.data.fd =<span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\">186</span>     epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;<span style=\"color: rgb(0, 0, 0);\">ev);\n</span><span style=\"color: rgb(0, 128, 128);\">187</span> }</pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div></div><p>客户端也用epoll实现，控制STDIN_FILENO、STDOUT_FILENO、和sockfd三个描述符，程序如下所示：</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div><pre><span style=\"color: rgb(0, 128, 128);\">  1</span> #include &lt;netinet/<span style=\"color: rgb(0, 0, 255);\">in</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  2</span> #include &lt;sys/socket.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  3</span> #include &lt;stdio.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  4</span> #include &lt;<span style=\"color: rgb(0, 0, 255);\">string</span>.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  5</span> #include &lt;stdlib.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  6</span> #include &lt;sys/epoll.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  7</span> #include &lt;time.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  8</span> #include &lt;unistd.h&gt;\n<span style=\"color: rgb(0, 128, 128);\">  9</span> #include &lt;sys/types.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 10</span> #include &lt;arpa/inet.h&gt;\n<span style=\"color: rgb(0, 128, 128);\"> 11</span> \n<span style=\"color: rgb(0, 128, 128);\"> 12</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> MAXSIZE     1024\n<span style=\"color: rgb(0, 128, 128);\"> 13</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> IPADDRESS   \"127.0.0.1\"\n<span style=\"color: rgb(0, 128, 128);\"> 14</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> SERV_PORT   8787\n<span style=\"color: rgb(0, 128, 128);\"> 15</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> FDSIZE        1024\n<span style=\"color: rgb(0, 128, 128);\"> 16</span> <span style=\"color: rgb(0, 0, 255);\">#define</span> EPOLLEVENTS 20\n<span style=\"color: rgb(0, 128, 128);\"> 17</span> \n<span style=\"color: rgb(0, 128, 128);\"> 18</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_connection(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> sockfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 19</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span>\n<span style=\"color: rgb(0, 128, 128);\"> 20</span> handle_events(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">struct</span> epoll_event *events,<span style=\"color: rgb(0, 0, 255);\">int</span> num,<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 21</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_read(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 22</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_read(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 23</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_write(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 24</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> add_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state);\n</span><span style=\"color: rgb(0, 128, 128);\"> 25</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> delete_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state);\n</span><span style=\"color: rgb(0, 128, 128);\"> 26</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> modify_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state);\n</span><span style=\"color: rgb(0, 128, 128);\"> 27</span> \n<span style=\"color: rgb(0, 128, 128);\"> 28</span> <span style=\"color: rgb(0, 0, 255);\">int</span> main(<span style=\"color: rgb(0, 0, 255);\">int</span> argc,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">argv[])\n</span><span style=\"color: rgb(0, 128, 128);\"> 29</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 30</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\">                 sockfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 31</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> sockaddr_in  servaddr;\n</span><span style=\"color: rgb(0, 128, 128);\"> 32</span>     sockfd = socket(AF_INET,SOCK_STREAM,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 33</span>     bzero(&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span><span style=\"color: rgb(0, 0, 0);\">(servaddr));\n</span><span style=\"color: rgb(0, 128, 128);\"> 34</span>     servaddr.sin_family =<span style=\"color: rgb(0, 0, 0);\"> AF_INET;\n</span><span style=\"color: rgb(0, 128, 128);\"> 35</span>     servaddr.sin_port =<span style=\"color: rgb(0, 0, 0);\"> htons(SERV_PORT);\n</span><span style=\"color: rgb(0, 128, 128);\"> 36</span>     inet_pton(AF_INET,IPADDRESS,&amp;<span style=\"color: rgb(0, 0, 0);\">servaddr.sin_addr);\n</span><span style=\"color: rgb(0, 128, 128);\"> 37</span>     connect(sockfd,(<span style=\"color: rgb(0, 0, 255);\">struct</span> sockaddr*)&amp;servaddr,<span style=\"color: rgb(0, 0, 255);\">sizeof</span><span style=\"color: rgb(0, 0, 0);\">(servaddr));\n</span><span style=\"color: rgb(0, 128, 128);\"> 38</span>     <span style=\"color: rgb(0, 128, 0);\">//</span><span style=\"color: rgb(0, 128, 0);\">处理连接</span>\n<span style=\"color: rgb(0, 128, 128);\"> 39</span> <span style=\"color: rgb(0, 0, 0);\">    handle_connection(sockfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 40</span> <span style=\"color: rgb(0, 0, 0);\">    close(sockfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 41</span>     <span style=\"color: rgb(0, 0, 255);\">return</span> <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">;\n</span><span style=\"color: rgb(0, 128, 128);\"> 42</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 43</span> \n<span style=\"color: rgb(0, 128, 128);\"> 44</span> \n<span style=\"color: rgb(0, 128, 128);\"> 45</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> handle_connection(<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> sockfd)\n</span><span style=\"color: rgb(0, 128, 128);\"> 46</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 47</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> epollfd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 48</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event events[EPOLLEVENTS];\n</span><span style=\"color: rgb(0, 128, 128);\"> 49</span>     <span style=\"color: rgb(0, 0, 255);\">char</span><span style=\"color: rgb(0, 0, 0);\"> buf[MAXSIZE];\n</span><span style=\"color: rgb(0, 128, 128);\"> 50</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> ret;\n</span><span style=\"color: rgb(0, 128, 128);\"> 51</span>     epollfd =<span style=\"color: rgb(0, 0, 0);\"> epoll_create(FDSIZE);\n</span><span style=\"color: rgb(0, 128, 128);\"> 52</span> <span style=\"color: rgb(0, 0, 0);\">    add_event(epollfd,STDIN_FILENO,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\"> 53</span>     <span style=\"color: rgb(0, 0, 255);\">for</span><span style=\"color: rgb(0, 0, 0);\"> ( ; ; )\n</span><span style=\"color: rgb(0, 128, 128);\"> 54</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 55</span>         ret = epoll_wait(epollfd,events,EPOLLEVENTS,-<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 56</span> <span style=\"color: rgb(0, 0, 0);\">        handle_events(epollfd,events,ret,sockfd,buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 57</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 58</span> <span style=\"color: rgb(0, 0, 0);\">    close(epollfd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 59</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 60</span> \n<span style=\"color: rgb(0, 128, 128);\"> 61</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span>\n<span style=\"color: rgb(0, 128, 128);\"> 62</span> handle_events(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">struct</span> epoll_event *events,<span style=\"color: rgb(0, 0, 255);\">int</span> num,<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf)\n</span><span style=\"color: rgb(0, 128, 128);\"> 63</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 64</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 65</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> i;\n</span><span style=\"color: rgb(0, 128, 128);\"> 66</span>     <span style=\"color: rgb(0, 0, 255);\">for</span> (i = <span style=\"color: rgb(128, 0, 128);\">0</span>;i &lt; num;i++<span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 67</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 68</span>         fd =<span style=\"color: rgb(0, 0, 0);\"> events[i].data.fd;\n</span><span style=\"color: rgb(0, 128, 128);\"> 69</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (events[i].events &amp;<span style=\"color: rgb(0, 0, 0);\"> EPOLLIN)\n</span><span style=\"color: rgb(0, 128, 128);\"> 70</span> <span style=\"color: rgb(0, 0, 0);\">            do_read(epollfd,fd,sockfd,buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 71</span>         <span style=\"color: rgb(0, 0, 255);\">else</span> <span style=\"color: rgb(0, 0, 255);\">if</span> (events[i].events &amp;<span style=\"color: rgb(0, 0, 0);\"> EPOLLOUT)\n</span><span style=\"color: rgb(0, 128, 128);\"> 72</span> <span style=\"color: rgb(0, 0, 0);\">            do_write(epollfd,fd,sockfd,buf);\n</span><span style=\"color: rgb(0, 128, 128);\"> 73</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 74</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\"> 75</span> \n<span style=\"color: rgb(0, 128, 128);\"> 76</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_read(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf)\n</span><span style=\"color: rgb(0, 128, 128);\"> 77</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\"> 78</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> nread;\n</span><span style=\"color: rgb(0, 128, 128);\"> 79</span>     nread =<span style=\"color: rgb(0, 0, 0);\"> read(fd,buf,MAXSIZE);\n</span><span style=\"color: rgb(0, 128, 128);\"> 80</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (nread == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 81</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 82</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">read error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 83</span> <span style=\"color: rgb(0, 0, 0);\">        close(fd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 84</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 85</span>     <span style=\"color: rgb(0, 0, 255);\">else</span> <span style=\"color: rgb(0, 0, 255);\">if</span> (nread == <span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\"> 86</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 87</span>         fprintf(stderr,<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">server close.\\n</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\"> 88</span> <span style=\"color: rgb(0, 0, 0);\">        close(fd);\n</span><span style=\"color: rgb(0, 128, 128);\"> 89</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\"> 90</span>     <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\"> 91</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\"> 92</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (fd ==<span style=\"color: rgb(0, 0, 0);\"> STDIN_FILENO)\n</span><span style=\"color: rgb(0, 128, 128);\"> 93</span> <span style=\"color: rgb(0, 0, 0);\">            add_event(epollfd,sockfd,EPOLLOUT);\n</span><span style=\"color: rgb(0, 128, 128);\"> 94</span>         <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\"> 95</span> <span style=\"color: rgb(0, 0, 0);\">        {\n</span><span style=\"color: rgb(0, 128, 128);\"> 96</span> <span style=\"color: rgb(0, 0, 0);\">            delete_event(epollfd,sockfd,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\"> 97</span> <span style=\"color: rgb(0, 0, 0);\">            add_event(epollfd,STDOUT_FILENO,EPOLLOUT);\n</span><span style=\"color: rgb(0, 128, 128);\"> 98</span> <span style=\"color: rgb(0, 0, 0);\">        }\n</span><span style=\"color: rgb(0, 128, 128);\"> 99</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">100</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">101</span> \n<span style=\"color: rgb(0, 128, 128);\">102</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> do_write(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span> sockfd,<span style=\"color: rgb(0, 0, 255);\">char</span> *<span style=\"color: rgb(0, 0, 0);\">buf)\n</span><span style=\"color: rgb(0, 128, 128);\">103</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">104</span>     <span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> nwrite;\n</span><span style=\"color: rgb(0, 128, 128);\">105</span>     nwrite =<span style=\"color: rgb(0, 0, 0);\"> write(fd,buf,strlen(buf));\n</span><span style=\"color: rgb(0, 128, 128);\">106</span>     <span style=\"color: rgb(0, 0, 255);\">if</span> (nwrite == -<span style=\"color: rgb(128, 0, 128);\">1</span><span style=\"color: rgb(0, 0, 0);\">)\n</span><span style=\"color: rgb(0, 128, 128);\">107</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">108</span>         perror(<span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(128, 0, 0);\">write error:</span><span style=\"color: rgb(128, 0, 0);\">\"</span><span style=\"color: rgb(0, 0, 0);\">);\n</span><span style=\"color: rgb(0, 128, 128);\">109</span> <span style=\"color: rgb(0, 0, 0);\">        close(fd);\n</span><span style=\"color: rgb(0, 128, 128);\">110</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">111</span>     <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\">112</span> <span style=\"color: rgb(0, 0, 0);\">    {\n</span><span style=\"color: rgb(0, 128, 128);\">113</span>         <span style=\"color: rgb(0, 0, 255);\">if</span> (fd ==<span style=\"color: rgb(0, 0, 0);\"> STDOUT_FILENO)\n</span><span style=\"color: rgb(0, 128, 128);\">114</span> <span style=\"color: rgb(0, 0, 0);\">            delete_event(epollfd,fd,EPOLLOUT);\n</span><span style=\"color: rgb(0, 128, 128);\">115</span>         <span style=\"color: rgb(0, 0, 255);\">else</span>\n<span style=\"color: rgb(0, 128, 128);\">116</span> <span style=\"color: rgb(0, 0, 0);\">            modify_event(epollfd,fd,EPOLLIN);\n</span><span style=\"color: rgb(0, 128, 128);\">117</span> <span style=\"color: rgb(0, 0, 0);\">    }\n</span><span style=\"color: rgb(0, 128, 128);\">118</span>     memset(buf,<span style=\"color: rgb(128, 0, 128);\">0</span><span style=\"color: rgb(0, 0, 0);\">,MAXSIZE);\n</span><span style=\"color: rgb(0, 128, 128);\">119</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">120</span> \n<span style=\"color: rgb(0, 128, 128);\">121</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> add_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state)\n</span><span style=\"color: rgb(0, 128, 128);\">122</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">123</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event ev;\n</span><span style=\"color: rgb(0, 128, 128);\">124</span>     ev.events =<span style=\"color: rgb(0, 0, 0);\"> state;\n</span><span style=\"color: rgb(0, 128, 128);\">125</span>     ev.data.fd =<span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\">126</span>     epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;<span style=\"color: rgb(0, 0, 0);\">ev);\n</span><span style=\"color: rgb(0, 128, 128);\">127</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">128</span> \n<span style=\"color: rgb(0, 128, 128);\">129</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> delete_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state)\n</span><span style=\"color: rgb(0, 128, 128);\">130</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">131</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event ev;\n</span><span style=\"color: rgb(0, 128, 128);\">132</span>     ev.events =<span style=\"color: rgb(0, 0, 0);\"> state;\n</span><span style=\"color: rgb(0, 128, 128);\">133</span>     ev.data.fd =<span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\">134</span>     epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;<span style=\"color: rgb(0, 0, 0);\">ev);\n</span><span style=\"color: rgb(0, 128, 128);\">135</span> <span style=\"color: rgb(0, 0, 0);\">}\n</span><span style=\"color: rgb(0, 128, 128);\">136</span> \n<span style=\"color: rgb(0, 128, 128);\">137</span> <span style=\"color: rgb(0, 0, 255);\">static</span> <span style=\"color: rgb(0, 0, 255);\">void</span> modify_event(<span style=\"color: rgb(0, 0, 255);\">int</span> epollfd,<span style=\"color: rgb(0, 0, 255);\">int</span> fd,<span style=\"color: rgb(0, 0, 255);\">int</span><span style=\"color: rgb(0, 0, 0);\"> state)\n</span><span style=\"color: rgb(0, 128, 128);\">138</span> <span style=\"color: rgb(0, 0, 0);\">{\n</span><span style=\"color: rgb(0, 128, 128);\">139</span>     <span style=\"color: rgb(0, 0, 255);\">struct</span><span style=\"color: rgb(0, 0, 0);\"> epoll_event ev;\n</span><span style=\"color: rgb(0, 128, 128);\">140</span>     ev.events =<span style=\"color: rgb(0, 0, 0);\"> state;\n</span><span style=\"color: rgb(0, 128, 128);\">141</span>     ev.data.fd =<span style=\"color: rgb(0, 0, 0);\"> fd;\n</span><span style=\"color: rgb(0, 128, 128);\">142</span>     epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;<span style=\"color: rgb(0, 0, 0);\">ev);\n</span><span style=\"color: rgb(0, 128, 128);\">143</span> }</pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" width=\"20\" height=\"20\"></a></span></div></div><p><strong>5、测试结果</strong></p><p><img src=\"quiver-image-url/9102C16A556178E0B0DD567C5CF64679.png\" alt=\"\" width=\"363\" height=\"133\"></p><p><img src=\"quiver-image-url/A0A90F2A9015246101C89F455DFC237C.png\" alt=\"\" width=\"360\" height=\"99\"></p><p><img src=\"quiver-image-url/40E407E4A6C3A8AE55F1FF0945D7CAEA.png\" alt=\"\" width=\"362\" height=\"99\"></p><p>参考资料：</p><p><a href=\"http://www.cnblogs.com/OnlyXP/archive/2007/08/10/851222.html\">http://www.cnblogs.com/OnlyXP/archive/2007/08/10/851222.html</a></p><p><a href=\"http://www.cnblogs.com/lexus/archive/2011/11/19/2254798.html\">http://www.cnblogs.com/lexus/archive/2011/11/19/2254798.html</a></p><p><a href=\"https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/\">https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/</a></p></div>"
    }
  ]
}
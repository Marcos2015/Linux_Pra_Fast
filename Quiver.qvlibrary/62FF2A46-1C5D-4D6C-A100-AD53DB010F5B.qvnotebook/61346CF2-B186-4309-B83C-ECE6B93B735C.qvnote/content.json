{
  "title": "epoll详细工作原理",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"position: relative;\"><embed id=\"xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd\" type=\"application/thunder_download_plugin\" height=\"0\" width=\"0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; line-height: 26px;\">开发高性能网络程序时，windows开发者们言必称iocp，linux开发者们则言必称epoll。大家都明白epoll是一种IO多路复用技术，可以非常高效的处理数以百万计的socket句柄，比起以前的select和poll效率高大发了。我们用起epoll来都感觉挺爽，确实快，那么，它到底为什么可以高速处理这么多并发连接呢？</span><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">先简单回顾下如何使用C库封装的3个epoll系统调用吧。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"></p><div class=\"dp-highlighter bg_cpp\" style=\"color: rgb(0, 0, 0); font-family: Consolas, 'Courier New', Courier, mono, serif; font-size: 12px; background-color: rgb(231, 229, 220); width: 959px; overflow: auto; padding-top: 1px; line-height: 26px; margin: 18px 0px !important;\"><div class=\"bar\" style=\"padding-left: 45px;\"><div class=\"tools\" style=\"padding: 3px 8px 10px 10px; font-size: 9px; line-height: normal; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; color: silver; background-color: rgb(248, 248, 248); border-left-width: 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108);\"><strong>[cpp]</strong>&nbsp;<a href=\"http://blog.csdn.net/russell_tao/article/details/7160071#\" class=\"ViewSource\" title=\"view plain\" style=\"color: rgb(160, 160, 160); text-decoration: none; background-image: none; border: none; padding: 1px; margin: 0px 10px 0px 0px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a><a href=\"http://blog.csdn.net/russell_tao/article/details/7160071#\" class=\"CopyToClipboard\" title=\"copy\" style=\"color: rgb(160, 160, 160); text-decoration: none; background-image: none; border: none; padding: 1px; margin: 0px 10px 0px 0px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a><div style=\"position: absolute; left: 368px; top: 548px; width: 18px; height: 18px; z-index: 99;\"></div><div style=\"position: absolute; left: 461px; top: 599px; width: 18px; height: 18px; z-index: 99;\"><embed id=\"ZeroClipboardMovie_1\" src=\"http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" width=\"18\" height=\"18\" name=\"ZeroClipboardMovie_1\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"id=1&amp;width=18&amp;height=18\" wmode=\"transparent\"></div></div></div><ol start=\"1\" class=\"dp-cpp\" style=\"padding: 0px; border: none; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin: 0px 0px 1px 45px !important;\"><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\"><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epoll_create(</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;size);&nbsp;&nbsp;</span></span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\"><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epoll_ctl(</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epfd,&nbsp;</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;op,&nbsp;</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;fd,&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">struct</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epoll_event&nbsp;*event);&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\"><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epoll_wait(</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epfd,&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">struct</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epoll_event&nbsp;*events,</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;maxevents,&nbsp;</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;timeout);&nbsp;&nbsp;</span></span></li></ol></div><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; line-height: 26px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; line-height: 26px;\">使用起来很清晰，首先要调用epoll_create建立一个epoll对象。参数size是内核保证能够正确处理的最大句柄数，多于这个最大数时内核可不保证效果。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; line-height: 26px;\"><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">epoll_ctl可以操作上面建立的epoll，例如，将刚建立的socket加入到epoll中让其监控，或者把 epoll正在监控的某个socket句柄移出epoll，不再监控它等等。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">epoll_wait在调用时，在给定的timeout时间内，当在监控的所有句柄中有事件发生时，就返回用户态的进程。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">从上面的调用方式就可以看到epoll比select/poll的优越之处：因为后者每次调用时都要传递你所要监控的所有socket给select/poll系统调用，这意味着需要将用户态的socket列表copy到内核态，如果以万计的句柄会导致每次都要copy几十几百KB的内存到内核态，非常低效。而我们调用epoll_wait时就相当于以往调用select/poll，但是这时却不用传递socket句柄给内核，因为内核已经在epoll_ctl中拿到了要监控的句柄列表。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">所以，实际上在你调用epoll_create后，内核就已经在内核态开始准备帮你存储要监控的句柄了，每次调用epoll_ctl只是在往内核的数据结构里塞入新的socket句柄。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">在内核里，一切皆文件。所以，epoll向内核注册了一个文件系统，用于存储上述的被监控socket。当你调用epoll_create时，就会在这个虚拟的epoll文件系统里创建一个file结点。当然这个file不是普通文件，它只服务于epoll。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">epoll在被内核初始化时（操作系统启动），同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的socket，这些socket会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"></p><div class=\"dp-highlighter bg_cpp\" style=\"color: rgb(0, 0, 0); font-family: Consolas, 'Courier New', Courier, mono, serif; font-size: 12px; background-color: rgb(231, 229, 220); width: 959px; overflow: auto; padding-top: 1px; line-height: 26px; margin: 18px 0px !important;\"><div class=\"bar\" style=\"padding-left: 45px;\"><div class=\"tools\" style=\"padding: 3px 8px 10px 10px; font-size: 9px; line-height: normal; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; color: silver; background-color: rgb(248, 248, 248); border-left-width: 3px; border-left-style: solid; border-left-color: rgb(108, 226, 108);\"><strong>[cpp]</strong>&nbsp;<a href=\"http://blog.csdn.net/russell_tao/article/details/7160071#\" class=\"ViewSource\" title=\"view plain\" style=\"color: rgb(160, 160, 160); text-decoration: none; background-image: none; border: none; padding: 1px; margin: 0px 10px 0px 0px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a><a href=\"http://blog.csdn.net/russell_tao/article/details/7160071#\" class=\"CopyToClipboard\" title=\"copy\" style=\"color: rgb(160, 160, 160); text-decoration: none; background-image: none; border: none; padding: 1px; margin: 0px 10px 0px 0px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a><div style=\"position: absolute; left: 368px; top: 1139px; width: 18px; height: 18px; z-index: 99;\"></div><div style=\"position: absolute; left: 461px; top: 1216px; width: 18px; height: 18px; z-index: 99;\"><embed id=\"ZeroClipboardMovie_2\" src=\"http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" width=\"18\" height=\"18\" name=\"ZeroClipboardMovie_2\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"id=2&amp;width=18&amp;height=18\" wmode=\"transparent\"></div></div></div><ol start=\"1\" class=\"dp-cpp\" style=\"padding: 0px; border: none; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin: 0px 0px 1px 45px !important;\"><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">static</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;</span><span class=\"datatypes\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;__init&nbsp;eventpoll_init(</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">void</span><span style=\"margin: 0px; padding: 0px; border: none;\">)&nbsp;&nbsp;</span></span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">{&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;...&nbsp;&nbsp;</span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0);\">/*&nbsp;Allocates&nbsp;slab&nbsp;cache&nbsp;used&nbsp;to&nbsp;allocate&nbsp;\"struct&nbsp;epitem\"&nbsp;items&nbsp;*/</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;&nbsp;</span></span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;epi_cache&nbsp;=&nbsp;kmem_cache_create(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue;\">\"eventpoll_epi\"</span><span style=\"margin: 0px; padding: 0px; border: none;\">,&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">sizeof</span><span style=\"margin: 0px; padding: 0px; border: none;\">(</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">struct</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;epitem),&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;SLAB_HWCACHE_ALIGN|EPI_SLAB_DEBUG|SLAB_PANIC,&nbsp;&nbsp;</span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,&nbsp;NULL);&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;</span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0);\">/*&nbsp;Allocates&nbsp;slab&nbsp;cache&nbsp;used&nbsp;to&nbsp;allocate&nbsp;\"struct&nbsp;eppoll_entry\"&nbsp;*/</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;pwq_cache&nbsp;=&nbsp;kmem_cache_create(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue;\">\"eventpoll_pwq\"</span><span style=\"margin: 0px; padding: 0px; border: none;\">,&nbsp;&nbsp;</span></span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">sizeof</span><span style=\"margin: 0px; padding: 0px; border: none;\">(</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold;\">struct</span><span style=\"margin: 0px; padding: 0px; border: none;\">&nbsp;eppoll_entry),&nbsp;0,&nbsp;&nbsp;</span></span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EPI_SLAB_DEBUG|SLAB_PANIC,&nbsp;NULL,&nbsp;NULL);&nbsp;&nbsp;</span></li><li style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; background-color: rgb(248, 248, 248); line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"border-style: none none none solid; border-left-width: 3px; border-left-color: rgb(108, 226, 108); list-style: decimal-leading-zero outside; color: inherit; line-height: 18px; margin: 0px !important; padding: 0px 3px 0px 10px !important;\"><span style=\"margin: 0px; padding: 0px; border: none; color: black;\">&nbsp;...&nbsp;...&nbsp;&nbsp;</span></li></ol></div><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; line-height: 26px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; line-height: 26px;\"><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">epoll的高效就在于，当我们调用epoll_ctl往里塞入百万个句柄时，epoll_wait仍然可以飞快的返回，并有效的将发生事件的句柄给我们用户。这是由于我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，epoll_wait非常高效。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">而且，通常情况下即使我们要监控百万计的句柄，大多一次也只返回很少量的准备就绪句柄而已，所以，epoll_wait仅需要从内核态copy少量的句柄到用户态而已，如何能不高效？！</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">那么，这个准备就绪list链表是怎么维护的呢？当我们执行epoll_ctl时，除了把socket放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。所以，当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">如此，一颗红黑树，一张准备就绪句柄链表，少量的内核cache，就帮我们解决了大并发下的socket处理问题。执行epoll_create时，创建了红黑树和就绪链表，执行epoll_ctl时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪链表中插入数据。执行epoll_wait时立刻返回准备就绪链表里的数据即可。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">最后看看epoll独有的两种模式LT和ET。无论是LT和ET模式，都适用于以上所说的流程。区别是，LT模式下，只要一个句柄上的事件一次没有处理完，会在以后调用epoll_wait时次次返回这个句柄，而ET模式仅在第一次返回。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\"><br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; margin: 0px; padding: 0px; line-height: 26px;\">这件事怎么做到的呢？当一个socket句柄上有事件时，内核会把该句柄插入上面所说的准备就绪list链表，这时我们调用epoll_wait，会把准备就绪的socket拷贝到用户态内存，然后清空准备就绪list链表，最后，epoll_wait干了件事，就是检查这些socket，如果不是ET模式（就是LT模式的句柄了），并且这些socket上确实有未处理的事件时，又把该句柄放回到刚刚清空的准备就绪链表了。所以，非ET的句柄，只要它上面还有事件，epoll_wait每次都会返回。而ET模式的句柄，除非有新中断到，即使socket上的事件没有处理完，也是不会次次从epoll_wait返回的。</p></div>"
    }
  ]
}
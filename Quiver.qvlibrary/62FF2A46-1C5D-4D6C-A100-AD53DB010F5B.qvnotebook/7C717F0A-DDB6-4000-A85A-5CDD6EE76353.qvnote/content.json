{
  "title": "epoll事件模型实现原理",
  "cells": [
    {
      "type": "text",
      "data": "<embed id=\"xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd\" type=\"application/thunder_download_plugin\" height=\"0\" width=\"0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><b style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\">1.&nbsp;功能介绍</b><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;epoll与select/poll不同的一点是，它是由一组系统调用组成。</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;epoll_create(int&nbsp;size);</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;epoll_ctl(int&nbsp;epfd,&nbsp;int&nbsp;op,&nbsp;int&nbsp;fd,&nbsp;struct&nbsp;epoll_event&nbsp;*event);</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;epoll_wait(int&nbsp;epfd,&nbsp;struct&nbsp;epoll_event&nbsp;*events,&nbsp;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;maxevents,&nbsp;int&nbsp;timeout);</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;epoll相关系统调用是在Linux&nbsp;2.5.44开始引入的。该系统调用针对传统的select/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">poll系统调用的不足，设计上作了很大的改动。select/poll的缺点在于：</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;1.每次调用时要重复地从用户态读入参数。</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;2.每次调用时要重复地扫描文件描述符。</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;3.每次在调用开始时，要把当前进程放入各个文件描述符的等待队列。在调用结束后，</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">又把进程从各个等待队列中删除。</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;在实际应用中，select/poll监视的文件描述符可能会非常多，如果每次只是返回</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">一小部分，那么，这种情况下select/poll显得不够高效。 epoll的设计思路，是把</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">select/poll单个的操作拆分为1个epoll_create+多个epoll_ctrl+一个wait。此外，</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">内核针对epoll操作添加了一个文件系统”eventpollfs”，每一个或者多个要监视的</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">文件描述符都有一个对应的eventpollfs文件系统的inode节点，主要信息保存在eve</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">ntpoll结构体中。而被监视的文件的重要信息则保存在epitem结构体中。所以他们</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">是一对多的关系。</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;由于在执行epoll_create和epoll_ctrl时，已经把用户态的信息保存到内核态了</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">，所以之后即使反复地调用epoll_wait，也不会重复地拷贝参数，扫描文件描述符，</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">反复地把当前进程放入/放出等待队列。这样就避免了以上的三个缺点。</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;接下去看看它们的实现：</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><b style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\">2.&nbsp;关键结构体</b><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">/*&nbsp;Wrapper&nbsp;struct&nbsp;used&nbsp;by&nbsp;poll&nbsp;queueing&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">struct&nbsp;ep_pqueue&nbsp;{</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poll_table&nbsp;pt;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;epitem&nbsp;*epi;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">};</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;这个结构体类似于select/poll中的struct&nbsp;poll_wqueues。由于epoll需要在内核</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">态保存大量信息，所以光光一个回调函数指针已经不能满足要求，所以在这里引入了</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">一个新的结构体struct&nbsp;epitem。</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">/*</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;*&nbsp;Each&nbsp;file&nbsp;descriptor&nbsp;added&nbsp;to&nbsp;the&nbsp;eventpoll&nbsp;interface&nbsp;will</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;*&nbsp;have&nbsp;an&nbsp;entry&nbsp;of&nbsp;this&nbsp;type&nbsp;linked&nbsp;to&nbsp;the&nbsp;hash.</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">struct&nbsp;epitem&nbsp;{</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;RB-Tree&nbsp;node&nbsp;used&nbsp;to&nbsp;link&nbsp;this&nbsp;structure&nbsp;to&nbsp;the&nbsp;eventpoll&nbsp;rb-tree&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;rb_node&nbsp;rbn;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 红黑树，用来保存eventpoll</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;List&nbsp;header&nbsp;used&nbsp;to&nbsp;link&nbsp;this&nbsp;structure&nbsp;to&nbsp;the&nbsp;eventpoll&nbsp;ready&nbsp;list&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;list_head&nbsp;rdllink;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 双向链表，用来保存已经完成的eventpoll</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;file&nbsp;descriptor&nbsp;information&nbsp;this&nbsp;item&nbsp;refers&nbsp;to&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;epoll_filefd&nbsp;ffd;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 这个结构体对应的被监听的文件描述符信息</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Number&nbsp;of&nbsp;active&nbsp;wait&nbsp;queue&nbsp;attached&nbsp;to&nbsp;poll&nbsp;operations&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;nwait;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; poll操作中事件的个数</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;List&nbsp;containing&nbsp;poll&nbsp;wait&nbsp;queues&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;list_head&nbsp;pwqlist;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 双向链表，保存着被监视文件的等待队列，功能类似于select/poll中的poll_table</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;\"container\"&nbsp;of&nbsp;this&nbsp;item&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;eventpoll&nbsp;*ep;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 指向eventpoll，多个epitem对应一个eventpoll</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;structure&nbsp;that&nbsp;describe&nbsp;the&nbsp;interested&nbsp;events&nbsp;and&nbsp;the&nbsp;source&nbsp;fd&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;epoll_event&nbsp;event;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 记录发生的事件和对应的fd</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Used&nbsp;to&nbsp;keep&nbsp;track&nbsp;of&nbsp;the&nbsp;usage&nbsp;count&nbsp;of&nbsp;the&nbsp;structure.&nbsp;This avoids</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;that&nbsp;the&nbsp;structure&nbsp;will&nbsp;desappear&nbsp;from&nbsp;underneath&nbsp;our&nbsp;processing.</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atomic_t&nbsp;usecnt;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 引用计数</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;List&nbsp;header&nbsp;used&nbsp;to&nbsp;link&nbsp;this&nbsp;item&nbsp;to&nbsp;the&nbsp;\"struct&nbsp;file\"&nbsp;items list */</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;list_head&nbsp;fllink;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 双向链表，用来链接被监视的文件描述符对应的struct&nbsp;file。因为file里有f_ep_link,</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">用来保存所有监视这个文件的epoll节点</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;List&nbsp;header&nbsp;used&nbsp;to&nbsp;link&nbsp;the&nbsp;item&nbsp;to&nbsp;the&nbsp;transfer&nbsp;list&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;list_head&nbsp;txlink;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 双向链表，用来保存传输队列</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;This&nbsp;is&nbsp;used&nbsp;during&nbsp;the&nbsp;collection/transfer&nbsp;of&nbsp;events&nbsp;to&nbsp;userspace</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;to&nbsp;pin&nbsp;items&nbsp;empty&nbsp;events&nbsp;set.</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;revents;</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp; &nbsp; &nbsp; &nbsp; 文件描述符的状态，在收集和传输时用来锁住空的事件集合</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">};</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">&nbsp;&nbsp;&nbsp;&nbsp;该结构体用来保存与epoll节点关联的多个文件描述符，保存的方式是使用红黑树实现的hash表.</span><br style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px; font-family: Times; line-height: 25px; background-color: rgb(244, 251, 244);\">至于为什么要保存，下文有详细解释。它与被监听的文件描述符一一对应.</span><div style=\"color: rgb(0, 0, 0); font-size: 14px; padding: 0px; margin: 0px; list-style: none; font-family: Times; line-height: 25px;\"><div style=\"padding: 0px; margin: 0px; list-style: none;\">struct&nbsp;eventpoll&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Protect&nbsp;the&nbsp;this&nbsp;structure&nbsp;<a href=\"http://biancheng.dnbcw.info/access/\" style=\"color: rgb(0, 102, 204); text-decoration: none;\">access</a>&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rwlock_t&nbsp;lock;<br>&nbsp; &nbsp; &nbsp; &nbsp; 读写锁<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;This&nbsp;semaphore&nbsp;is&nbsp;used&nbsp;to&nbsp;ensure&nbsp;that&nbsp;files&nbsp;are&nbsp;not&nbsp;removed<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;while&nbsp;epoll&nbsp;is&nbsp;using&nbsp;them.&nbsp;This&nbsp;is&nbsp;read-held&nbsp;during&nbsp;the&nbsp;event<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;collection&nbsp;loop&nbsp;and&nbsp;it&nbsp;is&nbsp;write-held&nbsp;during&nbsp;the&nbsp;file&nbsp;cleanup<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;path,&nbsp;the&nbsp;epoll&nbsp;file&nbsp;exit&nbsp;code&nbsp;and&nbsp;the&nbsp;ctl&nbsp;operations.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;rw_semaphore&nbsp;sem;<br>&nbsp; &nbsp; &nbsp; &nbsp; 读写信号量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Wait&nbsp;queue&nbsp;used&nbsp;by&nbsp;sys_epoll_wait()&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait_queue_head_t&nbsp;wq;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Wait&nbsp;queue&nbsp;used&nbsp;by&nbsp;file-&gt;poll()&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait_queue_head_t&nbsp;poll_wait;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;List&nbsp;of&nbsp;ready&nbsp;file&nbsp;descriptors&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;list_head&nbsp;rdllist;<br>&nbsp; &nbsp; &nbsp; &nbsp; 已经完成的操作事件的队列。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;RB-Tree&nbsp;root&nbsp;used&nbsp;to&nbsp;store&nbsp;monitored&nbsp;fd&nbsp;structs&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;rb_root&nbsp;rbr;<br>&nbsp; &nbsp; &nbsp; &nbsp;保存epoll监视的文件描述符<br>};<br>&nbsp; &nbsp; &nbsp; &nbsp;这个结构体保存了epoll文件描述符的扩展信息，它被保存在file结构体的private_data<br>中。它与epoll文件节点一一对应。通常一个epoll文件节点对应多个被监视的文件描述符。<br>所以一个eventpoll结构体会对应多个epitem结构体。<br>&nbsp; &nbsp; &nbsp; &nbsp;那么，epoll中的等待事件放在哪里呢？见下面<br>/*&nbsp;Wait&nbsp;structure&nbsp;used&nbsp;by&nbsp;the&nbsp;poll&nbsp;hooks&nbsp;*/<br>struct&nbsp;eppoll_entry&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;List&nbsp;header&nbsp;used&nbsp;to&nbsp;link&nbsp;this&nbsp;structure&nbsp;to&nbsp;the&nbsp;\"struct&nbsp;epitem\"&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;list_head&nbsp;llink;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;\"base\"&nbsp;pointer&nbsp;is&nbsp;set&nbsp;to&nbsp;the&nbsp;container&nbsp;\"struct&nbsp;epitem\"&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;*base;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Wait&nbsp;queue&nbsp;item&nbsp;that&nbsp;will&nbsp;be&nbsp;linked&nbsp;to&nbsp;the&nbsp;target&nbsp;file&nbsp;wait<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;queue&nbsp;head.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait_queue_t&nbsp;wait;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;The&nbsp;wait&nbsp;queue&nbsp;head&nbsp;that&nbsp;linked&nbsp;the&nbsp;\"wait\"&nbsp;wait&nbsp;queue&nbsp;item&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait_queue_head_t&nbsp;*whead;<br>};<br>&nbsp;&nbsp;&nbsp;&nbsp;与select/poll的struct&nbsp;poll_table_entry相比，epoll的表示等待队列节点的结<br>构体只是稍有不同，与struct&nbsp;poll_table_entry比较一下。<br>struct&nbsp;poll_table_entry&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;file&nbsp;*&nbsp;filp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait_queue_t&nbsp;wait;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait_queue_head_t&nbsp;*&nbsp;wait_address;<br>};<br>&nbsp;&nbsp;&nbsp;&nbsp;由于epitem对应一个被监视的文件，所以通过base可以方便地得到被监视的文件信息。<br>又因为一个文件可能有多个事件发生，所以用llink链接这些事件。<br><b>3.&nbsp;epoll_create的实现</b><br>&nbsp;&nbsp;&nbsp;&nbsp;epoll_create()的功能是创建一个eventpollfs文件系统的inode节点。具体由ep<br>_getfd()完成。ep_getfd()先调用ep_eventpoll_inode()创建一个inode节点，然后<br>调用d_alloc()为inode分配一个dentry。最后把file,dentry,inode三者关联起来。<br>&nbsp;&nbsp;&nbsp;&nbsp;在执行了ep_getfd()之后，它又调用了ep_file_init(),分配了eventpoll结构体<br>，并把eventpoll的指针赋给file结构体，这样eventpoll就与file结构体关联起来了。<br>&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是epoll_create()的参数size实际上只是起参考作用，只要它不小于<br>等于0，就并不限制这个epoll&nbsp;inode关联的文件描述符数量。<br><b>4.&nbsp;epoll_ctl的实现</b><br>&nbsp;&nbsp;&nbsp;&nbsp;epoll_ctl的功能是实现一系列操作，如把文件与eventpollfs文件系统的inode节<br>点关联起来。这里要介绍一下eventpoll结构体，它保存在file-&gt;f_private中，记录<br>了eventpollfs文件系统的inode节点的重要信息，其中成员rbr保存了该epoll文件节<br>点监视的所有文件描述符。组织的方式是一棵红黑树，这种结构体在查找节点时非常<br>高效。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先它调用ep_find()从eventpoll中的红黑树获得epitem结构体。然后根据op参<br>数的不同而选择不同的操作。如果op为EPOLL_CTL_ADD，那么正常情况下epitem是不<br>可能在eventpoll的红黑树中找到的，所以调用ep_insert创建一个epitem结构体并插<br>入到对应的红黑树中。<br>&nbsp;&nbsp;&nbsp;&nbsp;ep_insert()首先分配一个epitem对象，对它初始化后，把它放入对应的红黑树。<br>此外，这个函数还要作一个操作，就是把当前进程放入对应文件操作的等待队列。这<br>一步是由下面的代码完成的。<br>&nbsp;&nbsp;&nbsp;&nbsp;init_poll_funcptr(&amp;<a href=\"http://epq.pt/\">epq.pt</a>,&nbsp;ep_ptable_queue_proc);<br>&nbsp;&nbsp;&nbsp;&nbsp;。。。<br>&nbsp;&nbsp;&nbsp;&nbsp;revents&nbsp;=&nbsp;tfile-&gt;f_op-&gt;poll(tfile,&nbsp;&amp;<a href=\"http://epq.pt/\">epq.pt</a>);<br>&nbsp;&nbsp;&nbsp;&nbsp;函数先调用init_poll_funcptr注册了一个回调函数&nbsp;ep_ptable_queue_proc，这<br>个函数会在调用f_op-&gt;poll时被执行。该函数分配一个epoll等待队列结点eppoll_entry<br>：一方面把它挂到文件操作的等待队列中，另一方面把它挂到epitem的队列中。此外，它还<br>注册了一个等待队列的回调函数ep_poll_callback。当文件操作完成，唤醒当前进程之前，<br>会调用ep_poll_callback()，把eventpoll放到epitem的完成队列中，并唤醒等待进程。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果在执行f_op-&gt;poll以后，发现被监视的文件操作已经完成了，那么把它放在完成<br>队列中了，并立即把等待操作的那些进程唤醒。<br><b>5.&nbsp;epoll_wait的实现</b><br>&nbsp;&nbsp;&nbsp;&nbsp;epoll_wait的工作是等待文件操作完成并返回。<br>&nbsp;&nbsp;&nbsp;&nbsp;它的主体是ep_poll()，该函数在for循环中检查epitem中有没有已经完成的事件<br>，有的话就把结果返回。没有的话调用schedule_timeout()进入休眠，直到进程被再<br>度唤醒或者超时。<br><b>6.&nbsp;性能分析</b><br>&nbsp;&nbsp;&nbsp;&nbsp;epoll机制是针对select/poll的缺陷设计的。通过新引入的eventpollfs文件系统<br>，epoll把参数拷贝到内核态，在每次轮询时不会重复拷贝。通过把操作拆分为epol<br>l_create,epoll_ctl,epoll_wait，避免了重复地遍历要监视的文件描述符。此外，<br>由于调用epoll的进程被唤醒后，只要直接从epitem的完成队列中找出完成的事件，<br>找出完成事件的复杂度由O(N)降到了O(1)。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是epoll的性能提高是有前提的，那就是监视的文件描述符非常多，而且每次完<br>成操作的文件非常少。所以，epoll能否显著提高效率，取决于实际的应用场景。这<br>方面需要进一步测试。</div></div>"
    }
  ]
}
{
  "title": "C++模板元编程（C++ template metaprogramming）",
  "cells": [
    {
      "type": "text",
      "data": "<h2 style=\"margin: 10px 0px 0px; padding: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2; font-size: 1.1em; color: rgb(51, 51, 51); font-family: Verdana, Arial, sans-serif, 'Lucida Grande'; background-color: rgb(214, 211, 214);\"><a target=\"_blank\" id=\"cb_post_title_url\" href=\"http://www.cnblogs.com/liangliangh/p/4219879.html\" style=\"color: rgb(136, 187, 255); text-decoration: none;\">C++模板元编程（C++ template metaprogramming）</a></h2><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><br></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">http://www.cnblogs.com/liangliangh/p/4219879.html<br></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">所谓元编程就是编写直接生成或操纵程序的程序，C++ 模板给 C++ 语言提供了元编程的能力，模板使 C++ 编程变得异常灵活，能实现很多高级动态语言才有的特性（语法上可能比较丑陋，一些历史原因见下文）。普通用户对 C++ 模板的使用可能不是很频繁，大致限于泛型编程，但一些系统级的代码，尤其是对通用性、性能要求极高的基础库（如 STL、Boost）几乎不可避免的都大量地使用 C++ 模板，一个稍有规模的大量使用模板的程序，不可避免的要涉及元编程（如类型计算）。本文就是要剖析 C++ 模板元编程的机制。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">下面所给的所有代码，想做实验又懒得打开编译工具？</span><span style=\"line-height: 1.8 !important;\">一个</span><a target=\"_blank\" href=\"http://www.tutorialspoint.com/compile_cpp11_online.php\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">在线运行 C++ 代码的网站（GCC 4.8）</a>很好~</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">（本博文地址：http://www.cnblogs.com/liangliangh/p/4219879.html，转载版本将得不到作者维护）&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><strong><span style=\"font-size: 18px; line-height: 1.8 !important;\">1. C++模板的语法</span></strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">函数模板</span></strong>（function template）和<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">类模板</span></strong>（class template）的简单示例如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: green;\">// 函数模板\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">bool </span>equivalent(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">T</span>&amp; <span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">T</span>&amp; <span style=\"color: gray;\">b</span>){\n    <span style=\"color: blue;\">return </span>!(<span style=\"color: gray;\">a </span>&lt; <span style=\"color: gray;\">b</span>) &amp;&amp; !(<span style=\"color: gray;\">b </span>&lt; <span style=\"color: gray;\">a</span>);\n}\n<span style=\"color: green;\">// 类模板\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>=<span style=\"color: blue;\">int</span>&gt; <span style=\"color: green;\">// 默认参数\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">bignumber</span>{\n    <span style=\"color: rgb(43, 145, 175);\">T </span>_v;\n<span style=\"color: blue;\">public</span>:\n    bignumber(<span style=\"color: rgb(43, 145, 175);\">T </span><span style=\"color: gray;\">a</span>) : _v(<span style=\"color: gray;\">a</span>) { }\n    <span style=\"color: blue;\">inline bool </span>operator&lt;(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">bignumber</span>&amp; b) <span style=\"color: blue;\">const</span>; <span style=\"color: green;\">// 等价于 (const bignumber&lt;T&gt;&amp; b)\n</span>};\n<span style=\"color: green;\">// 在类模板外实现成员函数\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">bool </span><span style=\"color: rgb(43, 145, 175);\">bignumber</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>&gt;::operator&lt;(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">bignumber</span>&amp; <span style=\"color: gray;\">b</span>) <span style=\"color: blue;\">const</span>{\n    <span style=\"color: blue;\">return </span>_v &lt; <span style=\"color: gray;\">b</span>._v;\n}\n\n<span style=\"color: blue;\">int </span>main()\n{\n    <span style=\"color: rgb(43, 145, 175);\">bignumber</span>&lt;&gt; a(1), b(1); <span style=\"color: green;\">// 使用默认参数，\"&lt;&gt;\"不能省略\n    </span>std::cout &lt;&lt; equivalent(a, b) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; <span style=\"color: green;\">// 函数模板参数自动推导\n    </span>std::cout &lt;&lt; equivalent&lt;<span style=\"color: blue;\">double</span>&gt;(1, 2) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get();    <span style=\"color: blue;\">return </span>0;\n}</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">程序输出如下：</p><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">1\n0</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">关于模板（函数模板、类模板）的<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">模板参数</span></strong>（详见文献[1]第3章）：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">类型参数（type template parameter），用 typename 或 class 标记；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">非类型参数（non-type template parameter）可以是：整数及枚举类型、对象或函数的指针、对象或函数的引用、对象的成员指针，非类型参数是模板实例的常量；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">模板型参数（template template parameter），如“template&lt;typename T, template&lt;typename&gt; class A&gt; someclass {};”；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">模板参数可以有默认值（函数模板参数默认是从 C++11 开始支持）；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">函数模板的和函数参数类型有关的模板参数可以自动推导，类模板参数不存在推导机制；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">C++11 引入变长模板参数，请见下文。</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">模板特例化</span></strong>（template specialization，又称特例、特化）的简单示例如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 实现一个向量类\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: blue;\">int </span>N&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Vec</span>{\n    <span style=\"color: rgb(43, 145, 175);\">T </span>_v[N];\n    <span style=\"color: green;\">// ... // 模板通例（primary template），具体实现\n</span>};\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Vec</span>&lt;<span style=\"color: blue;\">float</span>, 4&gt;{\n    <span style=\"color: blue;\">float </span>_v[4];\n    <span style=\"color: green;\">// ... // 对 Vec&lt;float, 4&gt; 进行专门实现，如利用向量指令进行加速\n</span>};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>N&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Vec</span>&lt;<span style=\"color: blue;\">bool</span>, N&gt;{\n    <span style=\"color: blue;\">char </span>_v[(N+<span style=\"color: blue;\">sizeof</span>(<span style=\"color: blue;\">char</span>)-1)/<span style=\"color: blue;\">sizeof</span>(<span style=\"color: blue;\">char</span>)];\n    <span style=\"color: green;\">// ... // 对 Vec&lt;bool, N&gt; 进行专门实现，如用一个比特位表示一个bool\n</span>};</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">所谓模板特例化即对于通例中的某种或某些情况做单独专门实现，最简单的情况是对每个模板参数指定一个具体值，这成为完全特例化（full specialization），另外，可以限制模板参数在一个范围取值或满足一定关系等，这称为部分特例化（partial specialization），用数学上集合的概念，通例模板参数所有可取的值组合构成全集U，完全特例化对U中某个元素进行专门定义，部分特例化对U的某个真子集进行专门定义。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">更多模板特例化的例子如下（参考了文献[1]第44页）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">cp00</span>; <span style=\"color: green;\">// 用于模板型模板参数\n// 通例\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>, <span style=\"color: blue;\">int</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">CP</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">TMP</span>;\n<span style=\"color: green;\">// 完全特例化\n</span><span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">TMP</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: blue;\">float</span>, 2, <span style=\"color: rgb(43, 145, 175);\">cp00</span>&gt;;\n<span style=\"color: green;\">// 第一个参数有const修饰\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>, <span style=\"color: blue;\">int</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">CP</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">TMP</span>&lt;<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: rgb(43, 145, 175);\">T2</span>, i, <span style=\"color: rgb(43, 145, 175);\">CP</span>&gt;;\n<span style=\"color: green;\">// 第一二个参数为cp00的实例且满足一定关系，第四个参数为cp00\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: blue;\">int </span>i&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">TMP</span>&lt;<span style=\"color: rgb(43, 145, 175);\">cp00</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>, i&gt;, <span style=\"color: rgb(43, 145, 175);\">cp00</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>, i+10&gt;, i, <span style=\"color: rgb(43, 145, 175);\">cp00</span>&gt;;\n<span style=\"color: green;\">// 编译错误!，第四个参数类型和通例类型不一致\n//template&lt;template&lt;int i&gt; CP&gt;\n//class TMP&lt;int, float, 10, CP&gt;;</span></pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">关于模板特例化（详见文献[1]第4章）：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">在定义模板特例之前必须已经有模板通例（primary template）的声明；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">模板特例并不要求一定与通例有相同的接口，但为了方便使用（体会特例的语义）一般都相同；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">匹配规则，在模板实例化时如果有模板通例、特例加起来多个模板版本可以匹配，则依据如下规则：对版本AB，如果 A 的模板参数取值集合是B的真子集，则优先匹配 A，如果 AB 的模板参数取值集合是“交叉”关系（AB 交集不为空，且不为包含关系），则发生编译错误，对于函数模板，用函数重载分辨（overload resolution）规则和上述规则结合并优先匹配非模板函数。</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">对模板的多个实例，<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">类型等价</span></strong>（type equivalence）判断规则（详见文献[2] 13.2.4）：同一个模板（模板名及其参数类型列表构成的模板签名（template signature）相同，函数模板可以重载，类模板不存在重载）且指定的模板实参等价（类型参数是等价类型，非类型参数值相同）。如下例子：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: green;\">// 识别两个类型是否相同，提前进入模板元编程^_^\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>&gt; <span style=\"color: green;\">// 通例，返回 false\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">theSameType       </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum </span>{ ret = <span style=\"color: blue;\">false </span>}; };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;               <span style=\"color: green;\">// 特例，两类型相同时返回 true\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">theSameType</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: rgb(43, 145, 175);\">T</span>&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum </span>{ ret = <span style=\"color: blue;\">true </span>}; };\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">aTMP </span>{ };\n\n<span style=\"color: blue;\">int </span>main(){\n    <span style=\"color: blue;\">typedef unsigned int </span><span style=\"color: rgb(43, 145, 175);\">uint</span>; <span style=\"color: green;\">// typedef 定义类型别名而不是引入新类型\n    </span><span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">uint uint2</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">theSameType</span>&lt;<span style=\"color: blue;\">unsigned</span>, <span style=\"color: rgb(43, 145, 175);\">uint2</span>&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    <span style=\"color: green;\">// 感谢 C++11，连续角括号“&gt;&gt;”不会被当做流输入符号而编译错误\n    </span>std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">theSameType</span>&lt;<span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;<span style=\"color: blue;\">unsigned</span>, 2&gt;, <span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;<span style=\"color: rgb(43, 145, 175);\">uint2</span>, 2&gt;&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">theSameType</span>&lt;<span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;<span style=\"color: blue;\">int</span>, 2&gt;, <span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;<span style=\"color: blue;\">int</span>, 3&gt;&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}\n</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">1\n1\n0</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">关于<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">模板实例化</span></strong>（template instantiation）（详见文献[4]模板）：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">指在编译或链接时生成函数模板或类模板的具体实例源代码，即用使用模板时的实参类型替换模板类型参数（还有非类型参数和模板型参数）；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">隐式实例化（implicit instantiation）：当使用实例化的模板时自动地在当前代码单元之前插入模板的实例化代码，模板的成员函数一直到引用时才被实例化；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">显式实例化（explicit instantiation）：直接声明模板实例化，模板所有成员立即都被实例化；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">实例化也是一种特例化，被称为实例化的特例（instantiated (or generated) specialization）。</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">隐式实例化时，成员只有被引用到才会进行实例化，这被称为推迟实例化（lazy instantiation），由此可能带来的问题如下面的例子（文献[6]，文献[7]）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">aTMP </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">void </span>f1() { std::cout &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">\"f1()\\n\"</span>; }\n    <span style=\"color: blue;\">void </span>f2() { std::ccccout &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">\"f2()\\n\"</span>; } <span style=\"color: green;\">// 敲错键盘了，语义错误：没有 std::ccccout\n</span>};\n\n<span style=\"color: blue;\">int </span>main(){\n    <span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;<span style=\"color: blue;\">int</span>&gt; a;\n    a.f1();\n    <span style=\"color: green;\">// a.f2(); // 这句代码被注释时，aTMP&lt;int&gt;::f2() 不被实例化，从而上面的错误被掩盖!\n    </span>std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">所以模板代码写完后最好写个诸如显示实例化的测试代码，更深入一些，可以插入一些模板调用代码使得编译器及时发现错误，而不至于报出无限长的错误信息。另一个例子如下（GCC 4.8 下编译的输出信息，VS2013 编译输出了 500 多行错误信息）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: green;\">// 计算 N 的阶乘 N!\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>N&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">aTMP</span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">enum </span>{ ret = N==0 ? 1 : N * <span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;N-1&gt;::ret }; <span style=\"color: green;\">// Lazy Instantiation，将产生无限递归!</span>\n};\n\n<span style=\"color: blue;\">int </span>main(){\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;10&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">sh-4.2# g++ -std=c++11 -o main *.cpp\nmain.cpp:7:28: error: template instantiation depth exceeds maximum of 900 (use -ftemplate-depth= to increase the maximum) instantiating 'class aTMP&lt;-890&gt;'\n  enum { ret = N==0 ? 1 : N * aTMP&lt;N-1&gt;::ret };\n                            ^\nmain.cpp:7:28:   recursively required from 'class aTMP&lt;9&gt;'\nmain.cpp:7:28:   required from 'class aTMP&lt;10&gt;'\nmain.cpp:11:23:   required from here\n\nmain.cpp:7:28: error: incomplete type 'aTMP&lt;-890&gt;' used in nested name specifier</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上面的错误是因为，当编译 aTMP&lt;N&gt; 时，并不判断 N==0，而仅仅知道其依赖 aTMP&lt;N-1&gt;（lazy instantiation），从而产生无限递归，纠正方法是使用模板特例化，如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: green;\">// 计算 N 的阶乘 N!\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>N&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">aTMP</span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">enum </span>{ ret = N * <span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;N-1&gt;::ret };\n};\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;0&gt;{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">enum </span>{ <span style=\"color: rgb(47, 79, 79);\">ret </span>= 1 };\n};\n\n<span style=\"color: blue;\">int </span>main(){\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;10&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">3228800</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">关于模板的<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">编译和链接</span></strong>（详见文献[1] 1.3、文献[4]模板）：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">包含模板编译模式：编译器生成每个编译单元中遇到的所有的模板实例，并存放在相应的目标文件中；链接器合并等价的模板实例，生成可执行文件，要求实例化时模板定义可见，不能使用系统链接器；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">分离模板编译模式（使用 export 关键字）：不重复生成模板实例，编译器设计要求高，可以使用系统链接器；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">包含编译模式是主流，C++11 已经弃用 export 关键字（对模板引入 extern 新用法），一般将模板的全部实现代码放在同一个头文件中并在用到模板的地方用 #include 包含头文件，以防止出现实例不一致（如下面紧接着例子）；</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">实例化，编译链接的简单例子如下（参考了文献[1]第10页）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// file: a.cpp\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">MyClass </span>{ };\n<span style=\"color: blue;\">template </span><span style=\"color: rgb(43, 145, 175);\">MyClass</span>&lt;<span style=\"color: blue;\">double</span>&gt;::MyClass(); <span style=\"color: green;\">// 显示实例化构造函数 MyClass&lt;double&gt;::MyClass()\n</span><span style=\"color: blue;\">template class </span><span style=\"color: rgb(43, 145, 175);\">MyClass</span>&lt;<span style=\"color: blue;\">long</span>&gt;;        <span style=\"color: green;\">// 显示实例化整个类 MyClass&lt;long&gt;\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">void </span>print(<span style=\"color: rgb(43, 145, 175);\">T </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">m</span>) { std::cout &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">\"a.cpp: \" </span>&lt;&lt; <span style=\"color: gray;\">m </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; }\n\n<span style=\"color: blue;\">void </span>fa() {\n    print(1);   <span style=\"color: green;\">// print&lt;int&gt;，隐式实例化\n    </span>print(0.1); <span style=\"color: green;\">// print&lt;double&gt;\n</span>}\n<span style=\"color: blue;\">void </span>fb(); <span style=\"color: green;\">// fb() 在 b.cpp 中定义，此处声明\n\n</span><span style=\"color: blue;\">int </span>main(){\n    fa();\n    fb();\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}\n</pre><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// file: b.cpp\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">void </span>print(<span style=\"color: rgb(43, 145, 175);\">T </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">m</span>) { std::cout &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">\"b.cpp: \" </span>&lt;&lt; <span style=\"color: gray;\">m </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; }\n\n<span style=\"color: blue;\">void </span>fb() {\n    print(<span style=\"color: rgb(163, 21, 21);\">'2'</span>); <span style=\"color: green;\">// print&lt;char&gt;\n    </span>print(0.1); <span style=\"color: green;\">// print&lt;double&gt;\n</span>}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">a.cpp: 1\na.cpp: 0.1\nb.cpp: 2\na.cpp: 0.1</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上例中，由于 a.cpp 和 b.cpp 中的 print&lt;double&gt; 实例等价（模板实例的二进制代码在编译生成的对象文件 a.obj、b.obj 中），故链接时消除了一个（消除哪个没有规定，上面消除了 b.cpp 中的）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">关于&nbsp;<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">template、typename、this 关键字</span></strong>的使用（文献[4]模板，文献[5]）：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">依赖于模板参数（template parameter，形式参数，实参英文为 argument）的名字被称为依赖名字（dependent name），C++标准规定，如果解析器在一个模板中遇到一个嵌套依赖名字，它假定那个名字不是一个类型，除非显式用 typename 关键字前置修饰该名字；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">和上一条 typename 用法类似，template 用于指明嵌套类型或函数为模板；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">this 用于指定查找基类中的成员（当基类是依赖模板参数的类模板实例时，由于实例化总是推迟，这时不依赖模板参数的名字不在基类中查找，文献[1]第 166 页）。</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">一个例子如下（需要 GCC 编译，GCC 对 C++11 几乎全面支持，VS2013 此处总是在基类中查找名字，且函数模板前不需要 template）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">aTMP</span>{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef const </span><span style=\"color: rgb(43, 145, 175);\">T reType</span>;\n};\n\n<span style=\"color: blue;\">void </span>f() { std::cout &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">\"global f()\\n\"</span>; }\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Base </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">int </span>N = 99&gt;\n    <span style=\"color: blue;\">void </span>f() { std::cout &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">\"member f(): \" </span>&lt;&lt; N &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; }\n};\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Derived </span>: <span style=\"color: blue;\">public </span><span style=\"color: rgb(43, 145, 175);\">Base</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>::<span style=\"color: rgb(43, 145, 175);\">reType </span>m; <span style=\"color: green;\">// typename 不能省略</span>\n    Derived(<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>::<span style=\"color: rgb(43, 145, 175);\">reType </span><span style=\"color: gray;\">a</span>) : m(<span style=\"color: gray;\">a</span>) { }\n    <span style=\"color: blue;\">void </span>df1() { f(); }                       <span style=\"color: green;\">// 调用全局 f()，而非想象中的基类 f()\n    </span><span style=\"color: blue;\">void </span>df2() { <span style=\"color: blue;\">this</span>-&gt;<span style=\"color: blue;\">template </span>f(); }        <span style=\"color: green;\">// 基类 f&lt;99&gt;()\n    </span><span style=\"color: blue;\">void </span>df3() { <span style=\"color: rgb(43, 145, 175);\">Base</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>&gt;::<span style=\"color: blue;\">template </span><span style=\"color: rgb(43, 145, 175);\">f</span>&lt;22&gt;(); } <span style=\"color: green;\">// 强制基类 f&lt;22&gt;()\n    </span><span style=\"color: blue;\">void </span>df4() { ::f(); }                     <span style=\"color: green;\">// 强制全局 f()\n</span>};\n\n<span style=\"color: blue;\">int </span>main(){\n    <span style=\"color: rgb(43, 145, 175);\">Derived</span>&lt;<span style=\"color: rgb(43, 145, 175);\">aTMP</span>&lt;<span style=\"color: blue;\">int</span>&gt;&gt; a(10);\n    a.df1(); a.df2(); a.df3(); a.df4();\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">global f()\nmember f(): 99\nmember f(): 22\nglobal f()</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">C++11 关于模板的新特性</span></strong><span style=\"line-height: 1.8 !important;\">（详见文献[1]第15章，文献[4]C++11）</span>：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">“&gt;&gt;” 根据上下文自动识别正确语义；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">函数模板参数默认值；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">变长模板参数（扩展 sizeof...() 获取参数个数）；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">模板别名（扩展 using 关键字）；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">外部模板实例（拓展 extern 关键字），弃用 export template。</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">在本文中，如无特别声明将不使用 C++11 的特性（除了 “&gt;&gt;”）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><strong><span style=\"font-size: 18px; line-height: 1.8 !important;\">2. 模板元编程概述</span></strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">如果对 C++ 模板不熟悉（光熟悉语法还不算熟悉），可以先跳过本节，往下看完例子再回来。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">C++ 模板最初是为实现泛型编程设计的，但人们发现模板的能力远远不止于那些设计的功能。一个重要的理论结论就是：C++ 模板是<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">图灵完备</span></strong>的（Turing-complete），其证明过程请见文献[8]（就是用 C++ 模板模拟图灵机），理论上说 C++ 模板可以执行任何计算任务，但实际上因为模板是编译期计算，其能力受到具体编译器实现的限制（如递归嵌套深度，C++11 要求至少 1024，C++98 要求至少 17）。C++ 模板元编程是“意外”功能，而不是设计的功能，这也是 C++ 模板元编程语法丑陋的根源。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">C++ 模板是图灵完备的，这使得 C++ 成为<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">两层次语言</span></strong>（two-level languages，中文暂且这么翻译，文献[9]），其中，执行编译计算的代码称为静态代码（static code），执行运行期计算的代码称为动态代码（dynamic code），C++ 的静态代码由模板实现（预处理的宏也算是能进行部分静态计算吧，也就是能进行部分元编程，称为宏元编程，见 Boost 元编程库即 BCCL，文献[16]和文献[1] 10.4）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">具体来说 C++ 模板可以做以下事情：编译期数值计算、类型计算、代码计算（如循环展开），其中数值计算实际不太有意义，而类型计算和代码计算可以使得代码更加通用，更加易用，性能更好（也更难阅读，更难调试，有时也会有代码膨胀问题）。编译期计算在编译过程中的位置请见下图（取自文献[10]），可以看到关键是模板的机制在编译具体代码（模板实例）前执行：</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><img title=\"C++ 模板元编程\" src=\"quiver-image-url/28D95F70C54BCDAFD909130FDEA55587.png\" alt=\"C++ 模板元编程\" width=\"375\" height=\"192\" style=\"border: 0px; display: inline;\"></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">从编程范型（programming paradigm）上来说，C++ 模板是<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">函数式编程</span></strong>（functional programming），它的主要特点是：函数调用不产生任何副作用（没有可变的存储），用递归形式实现循环结构的功能。C++ 模板的特例化提供了条件判断能力，而模板递归嵌套提供了循环的能力，这两点使得其具有和普通语言一样通用的能力（图灵完备性）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">从<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">编程形式</span></strong>来看，模板的“&lt;&gt;”中的模板参数相当于函数调用的输入参数，模板中的 typedef 或 static const 或 enum 定义函数返回值（类型或数值，数值仅支持整型，如果需要可以通过编码计算浮点数），代码计算是通过类型计算进而选择类型的函数实现的（C++ 属于静态类型语言，编译器对类型的操控能力很强）。代码示意如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: blue;\">int </span>i=1&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">someComputing </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef volatile </span><span style=\"color: rgb(43, 145, 175);\">T</span>* <span style=\"color: rgb(43, 145, 175);\">retType</span>; <span style=\"color: green;\">// 类型计算\n    </span><span style=\"color: blue;\">enum </span>{ retValume = i + <span style=\"color: rgb(43, 145, 175);\">someComputing</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>, i-1&gt;::retValume }; <span style=\"color: green;\">// 数值计算，递归\n    </span><span style=\"color: blue;\">static void </span>f() { std::cout &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">\"someComputing: i=\" </span>&lt;&lt; i &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; }\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt; <span style=\"color: green;\">// 模板特例，递归终止条件\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">someComputing</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>, 0&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">enum </span>{ retValume = 0 };\n};\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">codeComputing </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static void </span>f() { <span style=\"color: rgb(43, 145, 175);\">T</span>::f(); } <span style=\"color: green;\">// 根据类型调用函数，代码计算\n</span>};\n\n<span style=\"color: blue;\">int </span>main(){\n    <span style=\"color: rgb(43, 145, 175);\">someComputing</span>&lt;<span style=\"color: blue;\">int</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">retType </span>a=0;\n    std::cout &lt;&lt; <span style=\"color: blue;\">sizeof</span>(a) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; <span style=\"color: green;\">// 64-bit 程序指针\n    // VS2013 默认最大递归深度500，GCC4.8 默认最大递归深度900（-ftemplate-depth=n）\n    </span>std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">someComputing</span>&lt;<span style=\"color: blue;\">int</span>, 500&gt;::retValume &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; <span style=\"color: green;\">// 1+2+...+500\n    </span><span style=\"color: rgb(43, 145, 175);\">codeComputing</span>&lt;<span style=\"color: rgb(43, 145, 175);\">someComputing</span>&lt;<span style=\"color: blue;\">int</span>, 99&gt;&gt;::f();\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">8\n125250\nsomeComputing: i=99</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">C++ 模板元编程<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">概览框图</span></strong>如下（取自文献[9]）：</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><img title=\"C++ 模板元编程概览\" src=\"quiver-image-url/EC78930A9D624E84F502D6D79AED8481.png\" alt=\"C++ 模板元编程概览\" width=\"375\" height=\"411\" style=\"border: 0px; display: inline;\"></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">下面我们将对图中的每个框进行深入讨论。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>3. 编译期数值计算</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">第一个 C++ 模板元程序</span></strong>是 Erwin Unruh 在 1994 年写的（文献[14]），这个程序计算小于给定数 N 的全部素数（又叫质数），程序并不运行（都不能通过编译），而是让编译器在错误信息中显示结果（直观展现了是编译期计算结果，C++ 模板元编程不是设计的功能，更像是在戏弄编译器，当然 C++11 有所改变），由于年代久远，原来的程序用现在的编译器已经不能编译了，下面的代码在原来程序基础上稍作了修改（GCC 4.8 下使用 -fpermissvie，只显示警告信息）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// Prime number computation by Erwin Unruh\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">D </span>{ D(<span style=\"color: blue;\">void</span>*); <span style=\"color: blue;\">operator int</span>(); }; <span style=\"color: green;\">// 构造函数参数为 void* 指针\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>p, <span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">is_prime </span>{ <span style=\"color: green;\">// 判断 p 是否为素数，即 p 不能整除 2...p-1\n    </span><span style=\"color: blue;\">enum </span>{ prim = (p%i) &amp;&amp; <span style=\"color: rgb(43, 145, 175);\">is_prime</span>&lt;(i&gt;2?p:0), i-1&gt;::prim };\n};\n<span style=\"color: blue;\">template</span>&lt;&gt; <span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">is_prime</span>&lt;0, 0&gt; { <span style=\"color: blue;\">enum </span>{ <span style=\"color: rgb(47, 79, 79);\">prim </span>= 1 }; };\n<span style=\"color: blue;\">template</span>&lt;&gt; <span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">is_prime</span>&lt;0, 1&gt; { <span style=\"color: blue;\">enum </span>{ <span style=\"color: rgb(47, 79, 79);\">prim </span>= 1 }; };\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">Prime_print </span>{\n    <span style=\"color: rgb(43, 145, 175);\">Prime_print</span>&lt;i-1&gt; a;\n    <span style=\"color: blue;\">enum </span>{ prim = <span style=\"color: rgb(43, 145, 175);\">is_prime</span>&lt;i, i-1&gt;::prim };\n    <span style=\"color: green;\">// prim 为真时， prim?1:0 为 1，int 到 D&lt;i&gt; 转换报错；假时， 0 为 NULL 指针不报错\n    </span><span style=\"color: blue;\">void </span>f() { <span style=\"color: rgb(43, 145, 175);\">D</span>&lt;i&gt; d = prim?1:0; a.f(); } <span style=\"color: green;\">// 调用 a.f() 实例化 Prime_print&lt;i-1&gt;::f()\n</span>};\n<span style=\"color: blue;\">template</span>&lt;&gt; <span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">Prime_print</span>&lt;2&gt; { <span style=\"color: green;\">// 特例，递归终止\n    </span><span style=\"color: blue;\">enum </span>{ <span style=\"color: rgb(47, 79, 79);\">prim </span>= 1 };\n    <span style=\"color: blue;\">void </span>f() { <span style=\"color: rgb(43, 145, 175);\">D</span>&lt;2&gt; d = <span style=\"color: rgb(47, 79, 79);\">prim</span>?1:0; }\n};\n\n<span style=\"color: blue;\">#ifndef </span>LAST\n<span style=\"color: blue;\">#define </span><span style=\"color: rgb(111, 0, 138);\">LAST </span>10\n<span style=\"color: blue;\">#endif\n\nint </span>main() {\n    <span style=\"color: rgb(43, 145, 175);\">Prime_print</span>&lt;<span style=\"color: rgb(111, 0, 138);\">LAST</span>&gt; a; a.f(); <span style=\"color: green;\">// 必须调用 a.f() 以实例化 Prime_print&lt;LAST&gt;::f()\n</span>}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">sh-4.2# g++ -std=c++11 -fpermissive -o main *.cpp\nmain.cpp: In member function 'void Prime_print&lt;2&gt;::f()':\nmain.cpp:17:33: warning: invalid conversion from 'int' to 'void*' [-fpermissive]\n  void f() { D&lt;2&gt; d = prim ? 1 : 0; }\n                                 ^\n<strong>main.cpp:2:28: warning:   initializing argument 1 of 'D&lt;i&gt;::D(void*) [with int i = 2]' [-fpermissive]</strong>\n template&lt;int i&gt; struct D { D(void*); operator int(); };\n                            ^\nmain.cpp: In instantiation of 'void Prime_print&lt;i&gt;::f() [with int i = 7]':\nmain.cpp:13:36:   recursively required from 'void Prime_print&lt;i&gt;::f() [with int i = 9]'\nmain.cpp:13:36:   required from 'void Prime_print&lt;i&gt;::f() [with int i = 10]'\nmain.cpp:25:27:   required from here\nmain.cpp:13:33: warning: invalid conversion from 'int' to 'void*' [-fpermissive]\n  void f() { D&lt;i&gt; d = prim ? 1 : 0; a.f(); }\n                                 ^\n<strong>main.cpp:2:28: warning:   initializing argument 1 of 'D&lt;i&gt;::D(void*) [with int i = 7]' [-fpermissive]</strong>\n template&lt;int i&gt; struct D { D(void*); operator int(); };\n                            ^\nmain.cpp: In instantiation of 'void Prime_print&lt;i&gt;::f() [with int i = 5]':\nmain.cpp:13:36:   recursively required from 'void Prime_print&lt;i&gt;::f() [with int i = 9]'\nmain.cpp:13:36:   required from 'void Prime_print&lt;i&gt;::f() [with int i = 10]'\nmain.cpp:25:27:   required from here\nmain.cpp:13:33: warning: invalid conversion from 'int' to 'void*' [-fpermissive]\n  void f() { D&lt;i&gt; d = prim ? 1 : 0; a.f(); }\n                                 ^\n<strong>main.cpp:2:28: warning:   initializing argument 1 of 'D&lt;i&gt;::D(void*) [with int i = 5]' [-fpermissive]</strong>\n template&lt;int i&gt; struct D { D(void*); operator int(); };\n                            ^\nmain.cpp: In instantiation of 'void Prime_print&lt;i&gt;::f() [with int i = 3]':\nmain.cpp:13:36:   recursively required from 'void Prime_print&lt;i&gt;::f() [with int i = 9]'\nmain.cpp:13:36:   required from 'void Prime_print&lt;i&gt;::f() [with int i = 10]'\nmain.cpp:25:27:   required from here\nmain.cpp:13:33: warning: invalid conversion from 'int' to 'void*' [-fpermissive]\n  void f() { D&lt;i&gt; d = prim ? 1 : 0; a.f(); }\n                                 ^\n<strong>main.cpp:2:28: warning:   initializing argument 1 of 'D&lt;i&gt;::D(void*) [with int i = 3]' [-fpermissive]</strong>\n template&lt;int i&gt; struct D { D(void*); operator int(); };\n                            ^</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上面的编译输出信息只给出了前一部分，虽然信息很杂，但还是可以看到其中有 10 以内全部素数：2、3、5、7（已经加粗显示关键行）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">到目前为止，虽然已经看到了阶乘、求和等递归数值计算，但都没涉及原理，下面以求和为例讲解 C++ 模板编译期数值计算的原理：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>N&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">sumt</span>{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static const int </span>ret = <span style=\"color: rgb(43, 145, 175);\">sumt</span>&lt;N-1&gt;::ret + N;\n};\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">sumt</span>&lt;0&gt;{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static const int </span>ret = 0;\n};\n\n<span style=\"color: blue;\">int </span>main() {\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">sumt</span>&lt;5&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">15</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">当编译器遇到 sumt&lt;5&gt; 时，试图实例化之，sumt&lt;5&gt; 引用了 sumt&lt;5-1&gt; 即 sumt&lt;4&gt;，试图实例化 sumt&lt;4&gt;，以此类推，直到 sumt&lt;0&gt;，sumt&lt;0&gt; 匹配模板特例，sumt&lt;0&gt;::ret 为 0，sumt&lt;1&gt;::ret 为 sumt&lt;0&gt;::ret+1 为 1，以此类推，sumt&lt;5&gt;::ret 为 15。值得一提的是，虽然对用户来说程序只是输出了一个编译期常量 sumt&lt;5&gt;::ret，但在背后，编译器其实至少处理了 sumt&lt;0&gt; 到 sumt&lt;5&gt; 共 6 个类型。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">从这个例子我们也可以窥探 C++ 模板元编程的函数式编程范型，对比结构化求和程序：for(i=0,sum=0; i&lt;=N; ++i) sum+=i; 用逐步改变存储（即变量 sum）的方式来对计算过程进行编程，模板元程序没有可变的存储（都是编译期常量，是不可变的变量），要表达求和过程就要用很多个常量：sumt&lt;0&gt;::ret，sumt&lt;1&gt;::ret，...，sumt&lt;5&gt;::ret 。函数式编程看上去似乎效率低下（因为它和数学接近，而不是和硬件工作方式接近），但有自己的优势：描述问题更加简洁清晰（前提是熟悉这种方式），没有可变的变量就没有数据依赖，方便进行并行化。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>4. 模板下的控制结构</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">模板实现的条件&nbsp;<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">if 和 while 语句</span></strong>如下（文献[9]）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 通例为空，若不匹配特例将报错，很好的调试手段（这里是 bool 就无所谓了）\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">bool </span>c, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Else</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IF_ </span>{ };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Else</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">true</span>, <span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: rgb(43, 145, 175);\">Else</span>&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">Then reType</span>; };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Else</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">false</span>,<span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: rgb(43, 145, 175);\">Else</span>&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">Else reType</span>; };\n\n<span style=\"color: green;\">// 隐含要求： Condition 返回值 ret，Statement 有类型 Next\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Condition</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Statement</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">WHILE_ </span>{\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Statement</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">STOP </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">Statement reType</span>; };\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef typename\n        </span><span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: rgb(43, 145, 175);\">Condition</span>&lt;<span style=\"color: rgb(43, 145, 175);\">Statement</span>&gt;::ret,\n        <span style=\"color: rgb(43, 145, 175);\">WHILE_</span>&lt;<span style=\"color: rgb(43, 145, 175);\">Condition</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Statement</span>::<span style=\"color: rgb(43, 145, 175);\">Next</span>&gt;,\n        <span style=\"color: rgb(43, 145, 175);\">STOP</span>&lt;<span style=\"color: rgb(43, 145, 175);\">Statement</span>&gt;&gt;::<span style=\"color: rgb(43, 145, 175);\">reType</span>::<span style=\"color: rgb(43, 145, 175);\">reType\n    reType</span>;\n};</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">IF_&lt;&gt; 的使用示例见下面：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">const int </span>len = 4;\n<span style=\"color: blue;\">typedef\n    </span><span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">sizeof</span>(<span style=\"color: blue;\">short</span>)==len, <span style=\"color: blue;\">short</span>,\n    <span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">sizeof</span>(<span style=\"color: blue;\">int</span>)==len, <span style=\"color: blue;\">int</span>,\n    <span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">sizeof</span>(<span style=\"color: blue;\">long</span>)==len, <span style=\"color: blue;\">long</span>,\n    <span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">sizeof</span>(<span style=\"color: blue;\">long long</span>)==len, <span style=\"color: blue;\">long long</span>,\n    <span style=\"color: blue;\">void</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">reType</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">reType</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">reType</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">reType\nint_my</span>; <span style=\"color: green;\">// 定义一个指定字节数的类型\n</span>std::cout &lt;&lt; <span style=\"color: blue;\">sizeof</span>(<span style=\"color: rgb(43, 145, 175);\">int_my</span>) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">4</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">WHILE_&lt;&gt; 的使用示例见下面：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 计算 1^e+2^e+...+n^e\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n, <span style=\"color: blue;\">int </span>e&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">sum_pow </span>{\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>e&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">pow_e</span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum</span>{ ret=i*<span style=\"color: rgb(43, 145, 175);\">pow_e</span>&lt;i,e-1&gt;::ret }; };\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">pow_e</span>&lt;i,0&gt;{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum</span>{ ret=1 }; };\n    <span style=\"color: green;\">// 计算 i^e，嵌套类使得能够定义嵌套模板元函数，private 访问控制隐藏实现细节\n    </span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">pow</span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum</span>{ ret=<span style=\"color: rgb(43, 145, 175);\">pow_e</span>&lt;i,e&gt;::ret }; };\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">stat</span>&gt;\n    <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">cond </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum</span>{ ret=(<span style=\"color: rgb(43, 145, 175);\">stat</span>::ri&lt;=n) }; };\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>sum&gt;\n    <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">stat </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">stat</span>&lt;i+1, sum+<span style=\"color: rgb(43, 145, 175);\">pow</span>&lt;i&gt;::ret&gt; <span style=\"color: rgb(43, 145, 175);\">Next</span>;\n                         <span style=\"color: blue;\">enum</span>{ ri=i, ret=sum }; };\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">enum</span>{ ret = <span style=\"color: rgb(43, 145, 175);\">WHILE_</span>&lt;<span style=\"color: rgb(43, 145, 175);\">cond</span>, <span style=\"color: rgb(43, 145, 175);\">stat</span>&lt;1,0&gt;&gt;::<span style=\"color: rgb(43, 145, 175);\">reType</span>::ret };\n};\n\n<span style=\"color: blue;\">int </span>main() {\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">sum_pow</span>&lt;10, 2&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">385</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">为了展现编译期数值计算的强大能力，下面是一个更复杂的计算：最大公约数（Greatest Common Divisor，GCD）和最小公倍数（Lowest Common Multiple，LCM），经典的辗转相除算法：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 最小公倍数，普通函数\n</span><span style=\"color: blue;\">int </span>lcm(<span style=\"color: blue;\">int </span><span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">int </span><span style=\"color: gray;\">b</span>){\n    <span style=\"color: blue;\">int </span>r, lcm=<span style=\"color: gray;\">a</span>*<span style=\"color: gray;\">b</span>;\n    <span style=\"color: blue;\">while</span>(r=<span style=\"color: gray;\">a</span>%<span style=\"color: gray;\">b</span>) { <span style=\"color: gray;\">a </span>= <span style=\"color: gray;\">b</span>; <span style=\"color: gray;\">b </span>= r; } <span style=\"color: green;\">// 因为用可变的存储，不能写成 a=b; b=a%b;\n    </span><span style=\"color: blue;\">return </span>lcm/<span style=\"color: gray;\">b</span>;\n}\n<span style=\"color: green;\">// 递归函数版本\n</span><span style=\"color: blue;\">int </span>gcd_r(<span style=\"color: blue;\">int </span><span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">int </span><span style=\"color: gray;\">b</span>) { <span style=\"color: blue;\">return </span><span style=\"color: gray;\">b</span>==0 ? <span style=\"color: gray;\">a </span>: gcd_r(<span style=\"color: gray;\">b</span>, <span style=\"color: gray;\">a</span>%<span style=\"color: gray;\">b</span>); } <span style=\"color: green;\">// 简洁\n</span><span style=\"color: blue;\">int </span>lcm_r(<span style=\"color: blue;\">int </span><span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">int </span><span style=\"color: gray;\">b</span>) { <span style=\"color: blue;\">return </span><span style=\"color: gray;\">a </span>* <span style=\"color: gray;\">b </span>/ gcd_r(<span style=\"color: gray;\">a</span>,<span style=\"color: gray;\">b</span>); }\n\n<span style=\"color: green;\">// 模板版本\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>a, <span style=\"color: blue;\">int </span>b&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">lcm_T</span>{\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">stat</span>&gt;\n    <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">cond </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum</span>{ ret=(<span style=\"color: rgb(43, 145, 175);\">stat</span>::div!=0) }; };\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>a, <span style=\"color: blue;\">int </span>b&gt;\n    <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">stat </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">stat</span>&lt;b, a%b&gt; <span style=\"color: rgb(43, 145, 175);\">Next</span>; <span style=\"color: blue;\">enum</span>{ div=a%b, ret=b }; };\n    <span style=\"color: blue;\">static const int </span>gcd = <span style=\"color: rgb(43, 145, 175);\">WHILE_</span>&lt;<span style=\"color: rgb(43, 145, 175);\">cond</span>, <span style=\"color: rgb(43, 145, 175);\">stat</span>&lt;a,b&gt;&gt;::<span style=\"color: rgb(43, 145, 175);\">reType</span>::ret;\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static const int </span>ret = a * b / gcd;\n};\n<span style=\"color: green;\">// 递归模板版本\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>a, <span style=\"color: blue;\">int </span>b&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">lcm_T_r</span>{\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>a, <span style=\"color: blue;\">int </span>b&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">gcd </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum</span>{ ret = <span style=\"color: rgb(43, 145, 175);\">gcd</span>&lt;b,a%b&gt;::ret }; };\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>a&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">gcd</span>&lt;a, 0&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum</span>{ ret = a }; };\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static const int </span>ret = a * b / <span style=\"color: rgb(43, 145, 175);\">gcd</span>&lt;a,b&gt;::ret;\n};\n\n<span style=\"color: blue;\">int </span>main() {\n    std::cout &lt;&lt; lcm(100, 36) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; lcm_r(100, 36) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">lcm_T</span>&lt;100, 36&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">lcm_T_r</span>&lt;100, 36&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">900\n900\n900\n900</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上面例子中，定义一个类的整型常量，可以用 enum，也可以用 static const int，需要注意的是 enum 定义的常量的字节数不会超过 sizeof(int) （文献[2]）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>5. 循环展开</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">文献[11]展示了一个<span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\"><strong>循环展开</strong></span>（loop unrolling）的例子 -- 冒泡排序：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;utility&gt;  </span><span style=\"color: green;\">// std::swap\n\n// dynamic code, 普通函数版本\n</span><span style=\"color: blue;\">void </span>bubbleSort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>, <span style=\"color: blue;\">int </span><span style=\"color: gray;\">n</span>)\n{\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>i=<span style=\"color: gray;\">n</span>-1; i&gt;0; --i) {\n        <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>j=0; j&lt;i; ++j)\n            <span style=\"color: blue;\">if </span>(<span style=\"color: gray;\">data</span>[j]&gt;<span style=\"color: gray;\">data</span>[j+1]) std::swap(<span style=\"color: gray;\">data</span>[j], <span style=\"color: gray;\">data</span>[j+1]);\n    }\n}\n<span style=\"color: green;\">// 数据长度为 4 时，手动循环展开\n</span><span style=\"color: blue;\">inline void </span>bubbleSort4(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>)\n{\n<span style=\"color: blue;\">#define </span><span style=\"color: rgb(111, 0, 138);\">COMP_SWAP</span>(i, j) <span style=\"color: blue;\">if</span>(<span style=\"color: gray;\">data</span>[i]&gt;<span style=\"color: gray;\">data</span>[j]) std::swap(<span style=\"color: gray;\">data</span>[i], <span style=\"color: gray;\">data</span>[j])\n    <span style=\"color: rgb(111, 0, 138);\">COMP_SWAP</span>(0, 1); <span style=\"color: rgb(111, 0, 138);\">COMP_SWAP</span>(1, 2); <span style=\"color: rgb(111, 0, 138);\">COMP_SWAP</span>(2, 3);\n    <span style=\"color: rgb(111, 0, 138);\">COMP_SWAP</span>(0, 1); <span style=\"color: rgb(111, 0, 138);\">COMP_SWAP</span>(1, 2);\n    <span style=\"color: rgb(111, 0, 138);\">COMP_SWAP</span>(0, 1);\n}\n\n<span style=\"color: green;\">// 递归函数版本，指导模板思路，最后一个参数是哑参数（dummy parameter），仅为分辨重载函数\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">recursion </span>{ };\n<span style=\"color: blue;\">void </span>bubbleSort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>, <span style=\"color: blue;\">int </span><span style=\"color: gray;\">n</span>, <span style=\"color: rgb(43, 145, 175);\">recursion</span>)\n{\n    <span style=\"color: blue;\">if</span>(<span style=\"color: gray;\">n</span>&lt;=1) <span style=\"color: blue;\">return</span>;\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>j=0; j&lt;<span style=\"color: gray;\">n</span>-1; ++j) <span style=\"color: blue;\">if</span>(<span style=\"color: gray;\">data</span>[j]&gt;<span style=\"color: gray;\">data</span>[j+1]) std::swap(<span style=\"color: gray;\">data</span>[j], <span style=\"color: gray;\">data</span>[j+1]);\n    bubbleSort(<span style=\"color: gray;\">data</span>, <span style=\"color: gray;\">n</span>-1, <span style=\"color: rgb(43, 145, 175);\">recursion</span>());\n}\n\n<span style=\"color: green;\">// static code, 模板元编程版本\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">inline void </span>IntSwap(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { <span style=\"color: green;\">// 比较和交换两个相邻元素\n    </span><span style=\"color: blue;\">if</span>(<span style=\"color: gray;\">data</span>[i]&gt;<span style=\"color: gray;\">data</span>[j]) std::swap(<span style=\"color: gray;\">data</span>[i], <span style=\"color: gray;\">data</span>[j]);\n}\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">inline void </span>IntBubbleSortLoop(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { <span style=\"color: green;\">// 一次冒泡，将前 i 个元素中最大的置换到最后\n    </span>IntSwap&lt;j, j+1&gt;(<span style=\"color: gray;\">data</span>);\n    IntBubbleSortLoop&lt;j&lt;i-1?i:0, j&lt;i-1?(j+1):0&gt;(<span style=\"color: gray;\">data</span>);\n}\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">inline void </span>IntBubbleSortLoop&lt;0, 0&gt;(<span style=\"color: blue;\">int</span>*) { }\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt;\n<span style=\"color: blue;\">inline void </span>IntBubbleSort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { <span style=\"color: green;\">// 模板冒泡排序循环展开\n    </span>IntBubbleSortLoop&lt;n-1, 0&gt;(<span style=\"color: gray;\">data</span>);\n    IntBubbleSort&lt;n-1&gt;(<span style=\"color: gray;\">data</span>);\n}\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">inline void </span>IntBubbleSort&lt;1&gt;(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { }</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">对循环次数固定且比较小的循环语句，对其进行展开并内联可以避免函数调用以及执行循环语句中的分支，从而可以提高性能，对上述代码做如下测试，代码在 VS2013 的 Release 下编译运行：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;omp.h&gt;\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;string.h&gt; </span><span style=\"color: green;\">// memcpy\n\n</span><span style=\"color: blue;\">int </span>main() {\n    <span style=\"color: blue;\">double </span>t1, t2, t3; <span style=\"color: blue;\">const int </span>num=100000000;\n    <span style=\"color: blue;\">int </span>data[4]; <span style=\"color: blue;\">int </span>inidata[4]={3,4,2,1};\n    t1 = omp_get_wtime();\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>i=0; i&lt;num; ++i) { memcpy(data, inidata, 4); bubbleSort(data, 4); }\n    t1 = omp_get_wtime()-t1;\n    t2 = omp_get_wtime();\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>i=0; i&lt;num; ++i) { memcpy(data, inidata, 4); bubbleSort4(data); }\n    t2 = omp_get_wtime()-t2;\n    t3 = omp_get_wtime();\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>i=0; i&lt;num; ++i) { memcpy(data, inidata, 4); IntBubbleSort&lt;4&gt;(data); }\n    t3 = omp_get_wtime()-t3;\n    std::cout &lt;&lt; t1/t3 &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\t' </span>&lt;&lt; t2/t3 &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">2.38643 0.926521</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上述结果表明，模板元编程实现的循环展开能够达到和手动循环展开相近的性能（90% 以上），并且性能是循环版本的 2 倍多（如果扣除 memcpy 函数占据的部分加速比将更高，根据 Amdahl 定律）。这里可能有人会想，既然循环次数固定，为什么不直接手动循环展开呢，难道就为了使用模板吗？当然不是，有时候循环次数确实是编译期固定值，但对用户并不是固定的，比如要实现数学上向量计算的类，因为可能是 2、3、4 维，所以写成模板，把维度作为 int 型模板参数，这时因为不知道具体是几维的也就不得不用循环，不过因为维度信息在模板实例化时是编译期常量且较小，所以编译器很可能在代码优化时进行循环展开，但我们想让这一切发生的更可控一些。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上面用三个函数模板 IntSwap&lt;&gt;()、 IntBubbleSortLoop&lt;&gt;()、 IntBubbleSort&lt;&gt;() 来实现一个排序功能，不但显得分散（和封装原理不符），还暴露了实现细节，我们可以仿照上一节的代码，将 IntBubbleSortLoop&lt;&gt;()、 IntBubbleSort&lt;&gt;() 嵌入其他模板内部，因为函数不允许嵌套，我们只能用类模板：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 整合成一个类模板实现，看着好，但引入了 代码膨胀\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC </span>{\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n    <span style=\"color: blue;\">static inline void </span>IntSwap(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { <span style=\"color: green;\">// 比较和交换两个相邻元素\n        </span><span style=\"color: blue;\">if</span>(<span style=\"color: gray;\">data</span>[i]&gt;<span style=\"color: gray;\">data</span>[j]) std::swap(<span style=\"color: gray;\">data</span>[i], <span style=\"color: gray;\">data</span>[j]);\n    }\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n    <span style=\"color: blue;\">static inline void </span>IntBubbleSortLoop(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { <span style=\"color: green;\">// 一次冒泡\n        </span>IntSwap&lt;j, j+1&gt;(<span style=\"color: gray;\">data</span>);\n        IntBubbleSortLoop&lt;j&lt;i-1?i:0, j&lt;i-1?(j+1):0&gt;(<span style=\"color: gray;\">data</span>);\n    }\n    <span style=\"color: blue;\">template</span>&lt;&gt;\n    <span style=\"color: blue;\">static inline void </span>IntBubbleSortLoop&lt;0, 0&gt;(<span style=\"color: blue;\">int</span>*) { }\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static inline void </span>sort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) {\n        IntBubbleSortLoop&lt;n-1, 0&gt;(<span style=\"color: gray;\">data</span>);\n        <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;n-1&gt;::sort(<span style=\"color: gray;\">data</span>);\n    }\n};\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;0&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static inline void </span>sort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { }\n};\n\n<span style=\"color: blue;\">int </span>main() {\n    <span style=\"color: blue;\">int </span>data[4] = {3,4,2,1};\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;4&gt;::sort(data); <span style=\"color: green;\">// 如此调用\n    </span>std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上面代码看似很好，不仅整合了代码，借助类成员的访问控制，还隐藏了实现细节。不过它存在着很大问题，如果实例化 IntBubbleSortC&lt;4&gt;、 IntBubbleSortC&lt;3&gt;、 IntBubbleSortC&lt;2&gt;，将实例化成员函数 IntBubbleSortC&lt;4&gt;::IntSwap&lt;0, 1&gt;()、 IntBubbleSortC&lt;4&gt;::IntSwap&lt;1, 2&gt;()、 IntBubbleSortC&lt;4&gt;::IntSwap&lt;2, 3&gt;()、 IntBubbleSortC&lt;3&gt;::IntSwap&lt;0, 1&gt;()、 IntBubbleSortC&lt;3&gt;::IntSwap&lt;1, 2&gt;()、 IntBubbleSortC&lt;2&gt;::IntSwap&lt;0, 1&gt;()，而在原来的看着分散的代码中 IntSwap&lt;0, 1&gt;() 只有一个。这将导致<span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\"><strong>代码膨胀</strong></span>（code bloat），即生成的可执行文件体积变大（代码膨胀另一含义是源代码增大，见文献[1]第11章）。不过这里使用了内联（inline），如果编译器确实内联展开代码则不会导致代码膨胀（除了循环展开本身会带来的代码膨胀），但因为重复编译原本可以复用的模板实例，会增加编译时间。在上一节的例子中，因为只涉及编译期常量计算，并不涉及函数（函数模板，或类模板的成员函数，函数被编译成具体的机器二进制代码），并不会出现代码膨胀。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">为了清晰证明上面的论述，我们去掉所有 inline 并将函数实现放到类外面（类里面实现的成员函数都是内联的，因为函数实现可能被包含多次，见文献[2] 10.2.9，不过现在的编译器优化能力很强，很多时候加不加 inline 并不影响编译器自己对内联的选择...），分别编译分散版本和类模板封装版本的冒泡排序代码编译生成的目标文件（VS2013 下是 .obj 文件）的大小，代码均在 VS2013 Debug 模式下编译（防止编译器优化），比较 main.obj （源文件是 main.cpp）大小。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">类模板封装版本代码如下，注意将成员函数在外面定义的写法：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;utility&gt;  </span><span style=\"color: green;\">// std::swap\n\n// 整合成一个类模板实现，看着好，但引入了 代码膨胀\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC </span>{\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt; <span style=\"color: blue;\">static void </span>IntSwap(<span style=\"color: blue;\">int</span>* data);\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt; <span style=\"color: blue;\">static void </span>IntBubbleSortLoop(<span style=\"color: blue;\">int</span>* data);\n    <span style=\"color: blue;\">template</span>&lt;&gt; <span style=\"color: blue;\">static void </span>IntBubbleSortLoop&lt;0, 0&gt;(<span style=\"color: blue;\">int</span>*) { }\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static void </span>sort(<span style=\"color: blue;\">int</span>* data);\n};\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;0&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static void </span>sort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { }\n};\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt; <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">void </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;n&gt;::IntSwap(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) {\n    <span style=\"color: blue;\">if</span>(<span style=\"color: gray;\">data</span>[i]&gt;<span style=\"color: gray;\">data</span>[j]) std::swap(<span style=\"color: gray;\">data</span>[i], <span style=\"color: gray;\">data</span>[j]);\n}\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt; <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">void </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;n&gt;::IntBubbleSortLoop(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) {\n    IntSwap&lt;j, j+1&gt;(<span style=\"color: gray;\">data</span>);\n    IntBubbleSortLoop&lt;j&lt;i-1?i:0, j&lt;i-1?(j+1):0&gt;(<span style=\"color: gray;\">data</span>);\n}\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt;\n<span style=\"color: blue;\">void </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;n&gt;::sort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) {\n    IntBubbleSortLoop&lt;n-1, 0&gt;(<span style=\"color: gray;\">data</span>);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;n-1&gt;::sort(<span style=\"color: gray;\">data</span>);\n}\n\n<span style=\"color: blue;\">int </span>main() {\n    <span style=\"color: blue;\">int </span>data[40] = {3,4,2,1};\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;2&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;3&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;4&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;5&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;6&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;7&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;8&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;9&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;10&gt;::sort(data); <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortC</span>&lt;11&gt;::sort(data);\n<span style=\"color: blue;\">#if </span>0<span style=\"color: gray;\">\n    IntBubbleSortC&lt;12&gt;::sort(data); IntBubbleSortC&lt;13&gt;::sort(data);\n    IntBubbleSortC&lt;14&gt;::sort(data); IntBubbleSortC&lt;15&gt;::sort(data);\n    IntBubbleSortC&lt;16&gt;::sort(data); IntBubbleSortC&lt;17&gt;::sort(data);\n    IntBubbleSortC&lt;18&gt;::sort(data); IntBubbleSortC&lt;19&gt;::sort(data);\n    IntBubbleSortC&lt;20&gt;::sort(data); IntBubbleSortC&lt;21&gt;::sort(data);\n\n    IntBubbleSortC&lt;22&gt;::sort(data); IntBubbleSortC&lt;23&gt;::sort(data);\n    IntBubbleSortC&lt;24&gt;::sort(data); IntBubbleSortC&lt;25&gt;::sort(data);\n    IntBubbleSortC&lt;26&gt;::sort(data); IntBubbleSortC&lt;27&gt;::sort(data);\n    IntBubbleSortC&lt;28&gt;::sort(data); IntBubbleSortC&lt;29&gt;::sort(data);\n    IntBubbleSortC&lt;30&gt;::sort(data); IntBubbleSortC&lt;31&gt;::sort(data);\n</span><span style=\"color: blue;\">#endif\n    </span>std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">分散定义函数模板版本代码如下，为了更具可比性，也将函数放在类里面作为成员函数：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;utility&gt;  </span><span style=\"color: green;\">// std::swap\n\n// static code, 模板元编程版本\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntSwap </span>{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static void </span>swap(<span style=\"color: blue;\">int</span>* data);\n};\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortLoop </span>{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static void </span>loop(<span style=\"color: blue;\">int</span>* data);\n};\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortLoop</span>&lt;0, 0&gt; {\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static void </span>loop(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { }\n};\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSort </span>{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static void </span>sort(<span style=\"color: blue;\">int</span>* data);\n};\n<span style=\"color: blue;\">template</span>&lt;&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;0&gt; {\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static void </span>sort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) { }\n};\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">void </span><span style=\"color: rgb(43, 145, 175);\">IntSwap</span>&lt;i, j&gt;::swap(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) {\n    <span style=\"color: blue;\">if</span>(<span style=\"color: gray;\">data</span>[i]&gt;<span style=\"color: gray;\">data</span>[j]) std::swap(<span style=\"color: gray;\">data</span>[i], <span style=\"color: gray;\">data</span>[j]);\n}\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i, <span style=\"color: blue;\">int </span>j&gt;\n<span style=\"color: blue;\">void </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSortLoop</span>&lt;i, j&gt;::loop(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) {\n    <span style=\"color: rgb(43, 145, 175);\">IntSwap</span>&lt;j, j+1&gt;::swap(<span style=\"color: gray;\">data</span>);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortLoop</span>&lt;j&lt;i-1?i:0, j&lt;i-1?(j+1):0&gt;::loop(<span style=\"color: gray;\">data</span>);\n}\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>n&gt;\n<span style=\"color: blue;\">void </span><span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;n&gt;::sort(<span style=\"color: blue;\">int</span>* <span style=\"color: gray;\">data</span>) {\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSortLoop</span>&lt;n-1, 0&gt;::loop(<span style=\"color: gray;\">data</span>);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;n-1&gt;::sort(<span style=\"color: gray;\">data</span>);\n}\n\n<span style=\"color: blue;\">int </span>main() {\n    <span style=\"color: blue;\">int </span>data[40] = {3,4,2,1};\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;2&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;3&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;4&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;5&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;6&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;7&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;8&gt;::sort(data);  <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;9&gt;::sort(data);\n    <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;10&gt;::sort(data); <span style=\"color: rgb(43, 145, 175);\">IntBubbleSort</span>&lt;11&gt;::sort(data);\n<span style=\"color: blue;\">#if </span>0<span style=\"color: gray;\">\n    IntBubbleSort&lt;12&gt;::sort(data); IntBubbleSort&lt;13&gt;::sort(data);\n    IntBubbleSort&lt;14&gt;::sort(data); IntBubbleSort&lt;15&gt;::sort(data);\n    IntBubbleSort&lt;16&gt;::sort(data); IntBubbleSort&lt;17&gt;::sort(data);\n    IntBubbleSort&lt;18&gt;::sort(data); IntBubbleSort&lt;19&gt;::sort(data);\n    IntBubbleSort&lt;20&gt;::sort(data); IntBubbleSort&lt;21&gt;::sort(data);\n\n    IntBubbleSort&lt;22&gt;::sort(data); IntBubbleSort&lt;23&gt;::sort(data);\n    IntBubbleSort&lt;24&gt;::sort(data); IntBubbleSort&lt;25&gt;::sort(data);\n    IntBubbleSort&lt;26&gt;::sort(data); IntBubbleSort&lt;27&gt;::sort(data);\n    IntBubbleSort&lt;28&gt;::sort(data); IntBubbleSort&lt;29&gt;::sort(data);\n    IntBubbleSort&lt;30&gt;::sort(data); IntBubbleSort&lt;31&gt;::sort(data);\n</span><span style=\"color: blue;\">#endif\n    </span>std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">程序中条件编译都未打开时（#if 0），main.obj 大小分别为 264 KB 和 211 KB，条件编译打开时（#if 1），main.obj 大小分别为 1073 KB 和 620 KB。可以看到，类模板封装版的对象文件不但绝对大小更大，而且增长更快，这和之前分析是一致的。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>6. 表达式模板，向量运算</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">文献[12]展示了一个<span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\"><strong>表达式模板</strong></span>（Expression Templates）的例子：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt; </span><span style=\"color: green;\">// std::cout\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;cmath&gt;    </span><span style=\"color: green;\">// std::sqrt()\n\n// 表达式类型\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DExprLiteral </span>{                    <span style=\"color: green;\">// 文字量\n    </span><span style=\"color: blue;\">double </span>a_;\n<span style=\"color: blue;\">public</span>:\n    DExprLiteral(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">a</span>) : a_(<span style=\"color: gray;\">a</span>) { }\n    <span style=\"color: blue;\">double </span>operator()(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">x</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span>a_; }\n};\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DExprIdentity </span>{                   <span style=\"color: green;\">// 自变量\n</span><span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">double </span>operator()(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">x</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span><span style=\"color: gray;\">x</span>; }\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>, <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">B</span>, <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Op</span>&gt;    <span style=\"color: green;\">// 双目操作\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DBinExprOp </span>{\n    <span style=\"color: rgb(43, 145, 175);\">A </span>a_; <span style=\"color: rgb(43, 145, 175);\">B </span>b_;\n<span style=\"color: blue;\">public</span>:\n    DBinExprOp(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">A</span>&amp; <span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">B</span>&amp; <span style=\"color: gray;\">b</span>) : a_(<span style=\"color: gray;\">a</span>), b_(<span style=\"color: gray;\">b</span>) { }\n    <span style=\"color: blue;\">double </span>operator()(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">x</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">Op</span>::apply(a_(<span style=\"color: gray;\">x</span>), b_(<span style=\"color: gray;\">x</span>)); }\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>, <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Op</span>&gt;             <span style=\"color: green;\">// 单目操作\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DUnaryExprOp </span>{\n    <span style=\"color: rgb(43, 145, 175);\">A </span>a_;\n<span style=\"color: blue;\">public</span>:\n    DUnaryExprOp(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">A</span>&amp; <span style=\"color: gray;\">a</span>) : a_(<span style=\"color: gray;\">a</span>) { }\n    <span style=\"color: blue;\">double </span>operator()(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">x</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">Op</span>::apply(a_(<span style=\"color: gray;\">x</span>)); }\n};\n<span style=\"color: green;\">// 表达式\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DExpr </span>{\n    <span style=\"color: rgb(43, 145, 175);\">A </span>a_;\n<span style=\"color: blue;\">public</span>:\n    DExpr() { }\n    DExpr(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">A</span>&amp; <span style=\"color: gray;\">a</span>) : a_(<span style=\"color: gray;\">a</span>) { }\n    <span style=\"color: blue;\">double </span>operator()(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">x</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span>a_(<span style=\"color: gray;\">x</span>); }\n};\n\n<span style=\"color: green;\">// 运算符，模板参数 A、B 为参与运算的表达式类型\n// operator /, division\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DApDiv </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static double </span>apply(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">double </span><span style=\"color: gray;\">b</span>) { <span style=\"color: blue;\">return </span><span style=\"color: gray;\">a </span>/ <span style=\"color: gray;\">b</span>; } };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>, <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">B</span>&gt; <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DBinExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">B</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApDiv</span>&gt; &gt;\noperator/(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;&amp; <span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">B</span>&gt;&amp; <span style=\"color: gray;\">b</span>) {\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">DBinExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">B</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApDiv</span>&gt; <span style=\"color: rgb(43, 145, 175);\">ExprT</span>;\n    <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">ExprT</span>&gt;(<span style=\"color: rgb(43, 145, 175);\">ExprT</span>(<span style=\"color: gray;\">a</span>, <span style=\"color: gray;\">b</span>));\n}\n<span style=\"color: green;\">// operator +, addition\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DApAdd </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static double </span>apply(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">double </span><span style=\"color: gray;\">b</span>) { <span style=\"color: blue;\">return </span><span style=\"color: gray;\">a </span>+ <span style=\"color: gray;\">b</span>; } };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>, <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">B</span>&gt; <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DBinExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">B</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApAdd</span>&gt; &gt;\noperator+(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;&amp; <span style=\"color: gray;\">a</span>, <span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">B</span>&gt;&amp; <span style=\"color: gray;\">b</span>) {\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">DBinExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">B</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApAdd</span>&gt; <span style=\"color: rgb(43, 145, 175);\">ExprT</span>;\n    <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">ExprT</span>&gt;(<span style=\"color: rgb(43, 145, 175);\">ExprT</span>(<span style=\"color: gray;\">a</span>, <span style=\"color: gray;\">b</span>));\n}\n<span style=\"color: green;\">// sqrt(), square rooting\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DApSqrt </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static double </span>apply(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">a</span>) { <span style=\"color: blue;\">return </span>std::sqrt(<span style=\"color: gray;\">a</span>); } };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>&gt; <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DUnaryExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApSqrt</span>&gt; &gt;\nsqrt(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;&amp; <span style=\"color: gray;\">a</span>) {\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">DUnaryExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApSqrt</span>&gt; <span style=\"color: rgb(43, 145, 175);\">ExprT</span>;\n    <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">ExprT</span>&gt;(<span style=\"color: rgb(43, 145, 175);\">ExprT</span>(<span style=\"color: gray;\">a</span>));\n}\n<span style=\"color: green;\">// operator-, negative sign\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DApNeg </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static double </span>apply(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">a</span>) { <span style=\"color: blue;\">return </span>-<span style=\"color: gray;\">a</span>; } };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>&gt; <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DUnaryExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApNeg</span>&gt; &gt;\noperator-(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;&amp; <span style=\"color: gray;\">a</span>) {\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">DUnaryExprOp</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;, <span style=\"color: rgb(43, 145, 175);\">DApNeg</span>&gt; <span style=\"color: rgb(43, 145, 175);\">ExprT</span>;\n    <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">ExprT</span>&gt;(<span style=\"color: rgb(43, 145, 175);\">ExprT</span>(<span style=\"color: gray;\">a</span>));\n}\n\n<span style=\"color: green;\">// evaluate()\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Expr</span>&gt;\n<span style=\"color: blue;\">void </span>evaluate(<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">Expr</span>&gt;&amp; <span style=\"color: gray;\">expr</span>, <span style=\"color: blue;\">double </span><span style=\"color: gray;\">start</span>, <span style=\"color: blue;\">double </span><span style=\"color: gray;\">end</span>, <span style=\"color: blue;\">double </span><span style=\"color: gray;\">step</span>) {\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">double </span>i=<span style=\"color: gray;\">start</span>; i&lt;<span style=\"color: gray;\">end</span>; i+=<span style=\"color: gray;\">step</span>) std::cout &lt;&lt; <span style=\"color: gray;\">expr</span>(i) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">' '</span>;\n}\n\n<span style=\"color: blue;\">int </span>main() {\n    <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExprIdentity</span>&gt; x;\n    evaluate( -x / sqrt( <span style=\"color: rgb(43, 145, 175);\">DExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">DExprLiteral</span>&gt;(1.0) + x ) , 0.0, 10.0, 1.0);\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">-0 -0.707107 -1.1547 -1.5 -1.78885 -2.04124 -2.26779 -2.47487 -2.66667 -2.84605</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">代码有点长（我已经尽量压缩行数），请先看最下面的 main() 函数，表达式模板允许我们以 “-x / sqrt( 1.0 + x )” 这种类似数学表达式的方式传参数，在 evaluate() 内部，将 0-10 的数依次赋给自变量 x 对表达式进行求值，这是通过在 template&lt;&gt; DExpr 类模板内部重载 operator() 实现的。我们来看看这一切是如何发生的。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">在 main() 中调用 evaluate() 时，编译器根据全局重载的加号、sqrt、除号、负号推断“-x / sqrt( 1.0 + x )” 的类型是 Dexpr&lt;DBinExprOp&lt;Dexpr&lt;DUnaryExprOp&lt;Dexpr&lt;DExprIdentity&gt;, DApNeg&gt;&gt;, Dexpr&lt;DUnaryExprOp&lt;Dexpr&lt;DBinExprOp&lt;Dexpr&lt;DExprLiteral&gt;, Dexpr&lt;DExprIdentity&gt;, DApAdd&gt;&gt;, DApSqrt&gt;&gt;, DApDiv&gt;&gt;（即将每个表达式编码到一种类型，设这个类型为 ultimateExprType），并用此类型实例化函数模板 evaluate()，类型的推导见下图。在 evaluate() 中，对表达式进行求值 expr(i)，调用 ultimateExprType 的 operator()，这引起一系列的 operator() 和 Op::apply() 的调用，最终遇到基础类型 “表达式类型” DExprLiteral 和 DExprIdentity，这个过程见下图。总结就是，请看下图，从下到上类型推断，从上到下 operator() 表达式求值。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><img title=\"表达式模板，Expression Templates\" src=\"quiver-image-url/0E632343A09073F0AA460B59C846E17E.png\" alt=\"表达式模板，Expression Templates\" width=\"375\" height=\"228\" style=\"border: 0px; display: inline;\"></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上面代码函数实现写在类的内部，即内联，如果编译器对内联支持的好的话，上面代码几乎等价于如下代码：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt; </span><span style=\"color: green;\">// std::cout\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;cmath&gt;    </span><span style=\"color: green;\">// std::sqrt()\n\n</span><span style=\"color: blue;\">void </span>evaluate(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">start</span>, <span style=\"color: blue;\">double </span><span style=\"color: gray;\">end</span>, <span style=\"color: blue;\">double </span><span style=\"color: gray;\">step</span>) {\n    <span style=\"color: blue;\">double </span>_temp = 1.0;\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">double </span>i=<span style=\"color: gray;\">start</span>; i&lt;<span style=\"color: gray;\">end</span>; i+=<span style=\"color: gray;\">step</span>)\n        std::cout &lt;&lt; -i / std::sqrt(_temp + i) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">' '</span>;\n}\n\n<span style=\"color: blue;\">int </span>main() {\n    evaluate(0.0, 10.0, 1.0);\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">-0 -0.707107 -1.1547 -1.5 -1.78885 -2.04124 -2.26779 -2.47487 -2.66667 -2.84605</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">和表达式模板类似的技术还可以用到向量计算中，以避免产生临时向量变量，见文献[4] Expression templates 和文献[12]的后面。传统向量计算如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DoubleVec</span>; <span style=\"color: green;\">// DoubleVec 重载了 + - * / 等向量元素之间的计算\n</span><span style=\"color: rgb(43, 145, 175);\">DoubleVec </span>y(1000), a(1000), b(1000), c(1000), d(1000); <span style=\"color: green;\">// 向量长度 1000\n// 向量计算\n</span>y = (a + b) / (c - d);\n<span style=\"color: green;\">// 等价于\n</span><span style=\"color: rgb(43, 145, 175);\">DoubleVec </span>__t1 = a + b;\n<span style=\"color: rgb(43, 145, 175);\">DoubleVec </span>__t2 = c - d;\n<span style=\"color: rgb(43, 145, 175);\">DoubleVec </span>__t3 = __t1 / __t2;\ny = __t3;</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">模板代码实现向量计算如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>&gt; DVExpr;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">DVec</span>{\n    <span style=\"color: green;\">// ...\n    </span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">A</span>&gt;\n    <span style=\"color: rgb(43, 145, 175);\">DVec</span>&amp; operator=(<span style=\"color: blue;\">const </span>DVExpr&lt;<span style=\"color: rgb(43, 145, 175);\">A</span>&gt;&amp;); <span style=\"color: green;\">// 由 = 引起向量逐个元素的表达式值计算并赋值\n</span>};\n<span style=\"color: rgb(43, 145, 175);\">DVec </span>y(1000), a(1000), b(1000), c(1000), d(1000); <span style=\"color: green;\">// 向量长度 1000\n// 向量计算\n</span>y = (a + b) / (c - d);\n<span style=\"color: green;\">// 等价于\n</span><span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>i=0; i&lt;1000; ++i) {\n    y[i] = (a[i] + b[i]) / (c[i] + d[i]);\n}</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">不过值得一提的是，传统代码可以用 C++11 的右值引用提升性能，C++11 新特性我们以后再详细讨论。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">我们这里看下文献[4] Expression templates 实现的版本，它用到了<span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\"><strong>编译期多态</strong></span>，编译期多态示意代码如下（关于这种代码形式有个名字叫 curiously recurring template pattern， CRTP，见文献[4]）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 模板基类，定义接口，具体实现由模板参数，即子类实现\n</span><span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">D</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">base </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">void </span>f1() { <span style=\"color: blue;\">static_cast</span>&lt;E&amp;&gt;(*<span style=\"color: blue;\">this</span>).f1(); } <span style=\"color: green;\">// 直接调用子类实现\n    </span><span style=\"color: blue;\">int </span>f2() <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">static_cast</span>&lt;<span style=\"color: blue;\">const </span>E&amp;&gt;(*<span style=\"color: blue;\">this</span>).f1(); }\n};\n<span style=\"color: green;\">// 子类\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">dirived1 </span>: <span style=\"color: blue;\">public </span><span style=\"color: rgb(43, 145, 175);\">base</span>&lt;<span style=\"color: rgb(43, 145, 175);\">dirived1</span>&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">void </span>f1() { <span style=\"color: green;\">/* ... */ </span>}\n    <span style=\"color: blue;\">int </span>f2() <span style=\"color: blue;\">const </span>{ <span style=\"color: green;\">/* ... */ </span>}\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">dirived2 </span>: <span style=\"color: blue;\">public </span><span style=\"color: rgb(43, 145, 175);\">base</span>&lt;<span style=\"color: rgb(43, 145, 175);\">dirived2</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>&gt;&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">void </span>f1() { <span style=\"color: green;\">/* ... */ </span>}\n    <span style=\"color: blue;\">int </span>f2() <span style=\"color: blue;\">const </span>{ <span style=\"color: green;\">/* ... */ </span>}\n};</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">简化后（向量长度固定为1000，元素类型为 double）的向量计算代码如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt; </span><span style=\"color: green;\">// std::cout\n\n// A CRTP base class for Vecs with a size and indexing:\n</span><span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">VecExpr </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">double </span>operator[](<span style=\"color: blue;\">int </span><span style=\"color: gray;\">i</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return static_cast</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E </span><span style=\"color: blue;\">const</span>&amp;&gt;(*<span style=\"color: blue;\">this</span>)[<span style=\"color: gray;\">i</span>]; }\n    <span style=\"color: blue;\">operator </span><span style=\"color: rgb(43, 145, 175);\">E </span><span style=\"color: blue;\">const</span>&amp;() <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return static_cast</span>&lt;<span style=\"color: blue;\">const </span><span style=\"color: rgb(43, 145, 175);\">E</span>&amp;&gt;(*<span style=\"color: blue;\">this</span>); } <span style=\"color: green;\">// 向下类型转换\n</span>};\n<span style=\"color: green;\">// The actual Vec class:\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">Vec </span>: <span style=\"color: blue;\">public </span><span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">Vec</span>&gt; {\n    <span style=\"color: blue;\">double </span>_data[1000];\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">double</span>&amp;  operator[](<span style=\"color: blue;\">int </span><span style=\"color: gray;\">i</span>) { <span style=\"color: blue;\">return </span>_data[<span style=\"color: gray;\">i</span>]; }\n    <span style=\"color: blue;\">double </span>operator[](<span style=\"color: blue;\">int </span><span style=\"color: gray;\">i</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span>_data[<span style=\"color: gray;\">i</span>]; }\n    <span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E</span>&gt;\n    <span style=\"color: rgb(43, 145, 175);\">Vec </span><span style=\"color: blue;\">const</span>&amp; operator=(<span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E</span>&gt; <span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">vec</span>) {\n        <span style=\"color: rgb(43, 145, 175);\">E </span><span style=\"color: blue;\">const</span>&amp; v = <span style=\"color: gray;\">vec</span>;\n        <span style=\"color: blue;\">for </span>(<span style=\"color: blue;\">int </span>i = 0; i&lt;1000; ++i) _data[i] = v[i];\n        <span style=\"color: blue;\">return </span>*<span style=\"color: blue;\">this</span>;\n    }\n    <span style=\"color: green;\">// Constructors\n    </span>Vec() { }\n    Vec(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">v</span>) { <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>i=0; i&lt;1000; ++i) _data[i] = <span style=\"color: gray;\">v</span>; }\n};\n\n<span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E2</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">VecDifference </span>: <span style=\"color: blue;\">public </span><span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">VecDifference</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E1</span>, <span style=\"color: rgb(43, 145, 175);\">E2</span>&gt; &gt; {\n    <span style=\"color: rgb(43, 145, 175);\">E1 </span><span style=\"color: blue;\">const</span>&amp; _u; <span style=\"color: rgb(43, 145, 175);\">E2 </span><span style=\"color: blue;\">const</span>&amp; _v;\n<span style=\"color: blue;\">public</span>:\n    VecDifference(<span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E1</span>&gt; <span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">u</span>, <span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E2</span>&gt; <span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">v</span>) : _u(<span style=\"color: gray;\">u</span>), _v(<span style=\"color: gray;\">v</span>) { }\n    <span style=\"color: blue;\">double </span>operator[](<span style=\"color: blue;\">int </span><span style=\"color: gray;\">i</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span>_u[<span style=\"color: gray;\">i</span>] - _v[<span style=\"color: gray;\">i</span>]; }\n};\n<span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">VecScaled </span>: <span style=\"color: blue;\">public </span><span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">VecScaled</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E</span>&gt; &gt; {\n    <span style=\"color: blue;\">double </span>_alpha; <span style=\"color: rgb(43, 145, 175);\">E </span><span style=\"color: blue;\">const</span>&amp; _v;\n<span style=\"color: blue;\">public</span>:\n    VecScaled(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">alpha</span>, <span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E</span>&gt; <span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">v</span>) : _alpha(<span style=\"color: gray;\">alpha</span>), _v(<span style=\"color: gray;\">v</span>) { }\n    <span style=\"color: blue;\">double </span>operator[](<span style=\"color: blue;\">int </span><span style=\"color: gray;\">i</span>) <span style=\"color: blue;\">const </span>{ <span style=\"color: blue;\">return </span>_alpha * _v[<span style=\"color: gray;\">i</span>]; }\n};\n\n<span style=\"color: green;\">// Now we can overload operators:\n</span><span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E2</span>&gt; <span style=\"color: rgb(43, 145, 175);\">VecDifference</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E1</span>, <span style=\"color: rgb(43, 145, 175);\">E2</span>&gt; <span style=\"color: blue;\">const\n</span>operator-(<span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E1</span>&gt; <span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">u</span>, <span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E2</span>&gt; <span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">v</span>) {\n    <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">VecDifference</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E1</span>, <span style=\"color: rgb(43, 145, 175);\">E2</span>&gt;(<span style=\"color: gray;\">u</span>, <span style=\"color: gray;\">v</span>);\n}\n<span style=\"color: blue;\">template </span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">E</span>&gt; <span style=\"color: rgb(43, 145, 175);\">VecScaled</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E</span>&gt; <span style=\"color: blue;\">const\n</span>operator*(<span style=\"color: blue;\">double </span><span style=\"color: gray;\">alpha</span>, <span style=\"color: rgb(43, 145, 175);\">VecExpr</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E</span>&gt; <span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">v</span>) {\n    <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">VecScaled</span>&lt;<span style=\"color: rgb(43, 145, 175);\">E</span>&gt;(<span style=\"color: gray;\">alpha</span>, <span style=\"color: gray;\">v</span>);\n}\n\n<span style=\"color: blue;\">int </span>main() {\n    <span style=\"color: rgb(43, 145, 175);\">Vec </span>u(3), v(1); <span style=\"color: blue;\">double </span>alpha=9; <span style=\"color: rgb(43, 145, 175);\">Vec </span>y;\n    y = alpha*(u - v);\n    std::cout &lt;&lt; y[999] &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">18</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">“alpha*(u - v)” 的类型推断过程如下图所示，其中有子类到基类的隐式类型转换：</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><img title=\"Expression templates\" src=\"quiver-image-url/1D9A6FD6BCFC484AC77D93AC91E2D7FE.png\" alt=\"Expression templates\" width=\"375\" height=\"249\" style=\"border: 0px; display: inline;\"></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">这里可以看到基类的作用：提供统一的接口，让 operator- 和 operator* 可以写成统一的模板形式。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>7. 特性，策略，标签</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">利用迭代器，我们可以实现很多通用算法，迭代器在容器与算法之间搭建了一座桥梁。求和函数模板如下：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt; </span><span style=\"color: green;\">// std::cout\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;vector&gt;\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">iter</span>&gt;\n<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">iter</span>::<span style=\"color: rgb(43, 145, 175);\">value_type </span>mysum(<span style=\"color: rgb(43, 145, 175);\">iter </span><span style=\"color: gray;\">begin</span>, <span style=\"color: rgb(43, 145, 175);\">iter </span><span style=\"color: gray;\">end</span>) {\n    <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">iter</span>::<span style=\"color: rgb(43, 145, 175);\">value_type </span>sum(0);\n    <span style=\"color: blue;\">for</span>(<span style=\"color: rgb(43, 145, 175);\">iter </span>i=<span style=\"color: gray;\">begin</span>; i!=<span style=\"color: gray;\">end</span>; ++i) sum += *i;\n    <span style=\"color: blue;\">return </span>sum;\n}\n\n<span style=\"color: blue;\">int </span>main() {\n    std::<span style=\"color: rgb(43, 145, 175);\">vector</span>&lt;<span style=\"color: blue;\">int</span>&gt; v;\n    <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int </span>i = 0; i&lt;100; ++i) v.push_back(i);\n    std::cout &lt;&lt; mysum(v.begin(), v.end()) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">4950</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">我们想让 mysum() 对指针参数也能工作，毕竟迭代器就是模拟指针，但指针没有嵌套类型 value_type，可以定义 mysum() 对指针类型的特例，但更好的办法是在函数参数和 value_type 之间多加一层 --&nbsp;<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">特性</span></strong>（traits）（参考了文献[1]第72页，特性详见文献[1] 12.1）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 特性，traits\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">iter</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">mytraits</span>{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef typename </span><span style=\"color: rgb(43, 145, 175);\">iter</span>::<span style=\"color: rgb(43, 145, 175);\">value_type value_type</span>;\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">mytraits</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>*&gt;{\n<span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">T value_type</span>;\n};\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">iter</span>&gt;\n<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">mytraits</span>&lt;<span style=\"color: rgb(43, 145, 175);\">iter</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">value_type </span>mysum(<span style=\"color: rgb(43, 145, 175);\">iter </span><span style=\"color: gray;\">begin</span>, <span style=\"color: rgb(43, 145, 175);\">iter </span><span style=\"color: gray;\">end</span>) {\n    <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">mytraits</span>&lt;<span style=\"color: rgb(43, 145, 175);\">iter</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">value_type </span>sum(0);\n    <span style=\"color: blue;\">for</span>(<span style=\"color: rgb(43, 145, 175);\">iter </span>i=<span style=\"color: gray;\">begin</span>; i!=<span style=\"color: gray;\">end</span>; ++i) sum += *i;\n    <span style=\"color: blue;\">return </span>sum;\n}\n\n<span style=\"color: blue;\">int </span>main() {\n    <span style=\"color: blue;\">int </span>v[4] = {1,2,3,4};\n    std::cout &lt;&lt; mysum(v, v+4) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">10</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">其实，C++ 标准定义了类似的 traits：std::iterator_trait（另一个经典例子是 std::numeric_limits） 。特性对类型的信息（如 value_type、 reference）进行包装，使得上层代码可以以统一的接口访问这些信息。C++ 模板元编程会涉及大量的类型计算，很多时候要提取类型的信息（typedef、 常量值等），如果这些类型的信息的访问方式不一致（如上面的迭代器和指针），我们将不得不定义特例，这会导致大量重复代码的出现（另一种代码膨胀），而通过加一层特性可以很好的解决这一问题。另外，特性不仅可以对类型的信息进行包装，还可以提供更多信息，当然，因为加了一层，也带来复杂性。特性是一种提供元信息的手段。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\"><strong>策略</strong></span>（policy）一般是一个类模板，典型的策略是 STL 容器（如 std::vector&lt;&gt;，完整声明是template&lt;class T, class Alloc=allocator&lt;T&gt;&gt; class vector;）的分配器（这个参数有默认参数，即默认存储策略），策略类将模板的经常变化的那一部分子功能块集中起来作为模板参数，这样模板便可以更为通用，这和特性的思想是类似的（详见文献[1] 12.3）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">标签</span></strong>（tag）一般是一个空类，其作用是作为一个独一无二的类型名字用于标记一些东西，典型的例子是 STL 迭代器的五种类型的名字（input_iterator_tag, output_iterator_tag, forward_iterator_tag, bidirectional_iterator_tag, random_access_iterator_tag），std::vector&lt;int&gt;::iterator::iterator_category 就是 random_access_iterator_tag，可以用第1节判断类型是否等价的模板检测这一点：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;vector&gt;\n\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>&gt; <span style=\"color: green;\">// 通例，返回 false\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">theSameType       </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum </span>{ ret = <span style=\"color: blue;\">false </span>}; };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;               <span style=\"color: green;\">// 特例，两类型相同时返回 true\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">theSameType</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: rgb(43, 145, 175);\">T</span>&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum </span>{ ret = <span style=\"color: blue;\">true </span>}; };\n\n<span style=\"color: blue;\">int </span>main(){\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">theSameType</span>&lt; std::<span style=\"color: rgb(43, 145, 175);\">vector</span>&lt;<span style=\"color: blue;\">int</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">iterator</span>::<span style=\"color: rgb(43, 145, 175);\">iterator_category</span>,\n                              std::<span style=\"color: rgb(43, 145, 175);\">random_access_iterator_tag </span>&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">1</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">有了这样的判断，还可以根据判断结果做更复杂的元编程逻辑（如一个算法以迭代器为参数，根据迭代器标签进行特例化以对某种迭代器特殊处理）。标签还可以用来分辨函数重载，第5节中就用到了这样的标签（recursion）（标签详见文献[1] 12.1）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>8. 更多类型计算</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">在第1节我们讲类型等价的时候，已经见到了一个可以判断两个类型是否等价的模板，这一节我们给出更多例子，下面是判断一个类型是否可以隐式转换到另一个类型的模板（参考了文献[6] Static interface checking）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt; </span><span style=\"color: green;\">// std::cout\n\n// whether T could be converted to U\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">U</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">ConversionTo </span>{\n    <span style=\"color: blue;\">typedef char </span><span style=\"color: rgb(43, 145, 175);\">Type1</span>[1]; <span style=\"color: green;\">// 两种 sizeof 不同的类型\n    </span><span style=\"color: blue;\">typedef char </span><span style=\"color: rgb(43, 145, 175);\">Type2</span>[2];\n    <span style=\"color: blue;\">static </span><span style=\"color: rgb(43, 145, 175);\">Type1</span>&amp; Test( <span style=\"color: rgb(43, 145, 175);\">U </span>); <span style=\"color: green;\">// 较下面的函数，因为参数取值范围小，优先匹配\n    </span><span style=\"color: blue;\">static </span><span style=\"color: rgb(43, 145, 175);\">Type2</span>&amp; Test(...); <span style=\"color: green;\">// 变长参数函数，可以匹配任何数量任何类型参数\n    </span><span style=\"color: blue;\">static </span><span style=\"color: rgb(43, 145, 175);\">T </span>MakeT(); <span style=\"color: green;\">// 返回类型 T，用这个函数而不用 T() 因为 T 可能没有默认构造函数\n</span><span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">enum </span>{ ret = <span style=\"color: blue;\">sizeof</span>(Test(MakeT()))==<span style=\"color: blue;\">sizeof</span>(<span style=\"color: rgb(43, 145, 175);\">Type1</span>) }; <span style=\"color: green;\">// 可以转换时调用返回 Type1 的 Test()\n</span>};\n\n<span style=\"color: blue;\">int </span>main() {\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">ConversionTo</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: blue;\">double</span>&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">ConversionTo</span>&lt;<span style=\"color: blue;\">float</span>, <span style=\"color: blue;\">int</span>*&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">ConversionTo</span>&lt;<span style=\"color: blue;\">const int</span>&amp;, <span style=\"color: blue;\">int</span>&amp;&gt;::<span style=\"color: rgb(47, 79, 79);\">ret </span>&lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">1\n0\n0</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">下面这个例子检查某个类型是否含有某个嵌套类型定义（参考了文献[4] Substitution failure is not an erro (SFINAE)），这个例子是个内省（反射的一种）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n</span><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;vector&gt;\n\n</span><span style=\"color: green;\">// thanks to Substitution failure is not an erro (SFINAE)\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">has_typedef_value_type </span>{\n    <span style=\"color: blue;\">typedef char </span><span style=\"color: rgb(43, 145, 175);\">Type1</span>[1];\n    <span style=\"color: blue;\">typedef char </span><span style=\"color: rgb(43, 145, 175);\">Type2</span>[2];\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">C</span>&gt; <span style=\"color: blue;\">static </span><span style=\"color: rgb(43, 145, 175);\">Type1</span>&amp; test(<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">C</span>::<span style=\"color: rgb(43, 145, 175);\">value_type</span>*);\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>&gt; <span style=\"color: blue;\">static </span><span style=\"color: rgb(43, 145, 175);\">Type2</span>&amp; test(...);\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static const bool </span>ret = <span style=\"color: blue;\">sizeof</span>(test&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>&gt;(0)) == <span style=\"color: blue;\">sizeof</span>(<span style=\"color: rgb(43, 145, 175);\">Type1</span>); <span style=\"color: green;\">// 0 == NULL\n</span>};\n\n<span style=\"color: blue;\">struct </span><span style=\"color: rgb(43, 145, 175);\">foo </span>{ <span style=\"color: blue;\">typedef float </span><span style=\"color: rgb(43, 145, 175);\">lalala</span>; };\n\n<span style=\"color: blue;\">int </span>main() {\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">has_typedef_value_type</span>&lt;std::<span style=\"color: rgb(43, 145, 175);\">vector</span>&lt;<span style=\"color: blue;\">int</span>&gt;&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">has_typedef_value_type</span>&lt;<span style=\"color: rgb(43, 145, 175);\">foo</span>&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">1\n0</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">这个例子是有缺陷的，因为不存在引用的指针，所以不用用来检测引用类型定义。可以看到，因为只涉及类型推断，都是编译期的计算，不涉及任何可执行代码，所以类的成员函数根本不需要具体实现。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>9. 元容器</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">文献[1]第 13 章讲了元容器，所谓元容器，就是类似于 std::vector&lt;&gt; 那样的容器，不过它存储的是元数据 -- 类型，有了元容器，我们就可以判断某个类型是否属于某个元容器之类的操作。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">在讲元容器之前，我们先来看看<span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\"><strong>伪变长参数模板</strong></span>（文献[1] 12.4），一个可以存储小于某个数（例子中为 4 个）的任意个数，任意类型数据的元组（tuple）的例子如下（参考了文献[1] 第 225~227 页）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;\n\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">null_type </span>{}; <span style=\"color: green;\">// 标签类，标记参数列表末尾\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">T0 data_type</span>;\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: rgb(43, 145, 175);\">T3</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>&gt; <span style=\"color: rgb(43, 145, 175);\">next_type</span>; <span style=\"color: green;\">// 参数移位了\n    </span><span style=\"color: blue;\">static const int </span>num = <span style=\"color: rgb(43, 145, 175);\">next_type</span>::num + 1; <span style=\"color: green;\">// 非 null_type 模板参数个数\n    </span><span style=\"color: rgb(43, 145, 175);\">data_type </span>data; <span style=\"color: green;\">// 本节点数据\n    </span><span style=\"color: rgb(43, 145, 175);\">next_type </span>next; <span style=\"color: green;\">// 后续所有节点数据\n    </span>type_shift_node() :data(), next() { } <span style=\"color: green;\">// 构造函数\n    </span>type_shift_node(<span style=\"color: rgb(43, 145, 175);\">T0 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d0</span>, <span style=\"color: rgb(43, 145, 175);\">T1 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d1</span>, <span style=\"color: rgb(43, 145, 175);\">T2 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d2</span>, <span style=\"color: rgb(43, 145, 175);\">T3 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d3</span>)\n        :data(<span style=\"color: gray;\">d0</span>), next(<span style=\"color: gray;\">d1</span>, <span style=\"color: gray;\">d2</span>, <span style=\"color: gray;\">d3</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>()) { } <span style=\"color: green;\">// next 参数也移位了\n</span>};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>&gt; <span style=\"color: green;\">// 特例，递归终止\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">T0 data_type</span>;\n    <span style=\"color: blue;\">static const int </span>num = 1;\n    <span style=\"color: rgb(43, 145, 175);\">data_type </span>data; <span style=\"color: green;\">// 本节点数据\n    </span>type_shift_node() :data(), next() { } <span style=\"color: green;\">// 构造函数\n    </span>type_shift_node(<span style=\"color: rgb(43, 145, 175);\">T0 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d0</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>, <span style=\"color: rgb(43, 145, 175);\">null_type</span>) : data(<span style=\"color: gray;\">d0</span>) { }\n};\n<span style=\"color: green;\">// 元组类模板，默认参数 + 嵌套递归\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>=<span style=\"color: rgb(43, 145, 175);\">null_type</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>=<span style=\"color: rgb(43, 145, 175);\">null_type</span>,\n         <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T3</span>=<span style=\"color: rgb(43, 145, 175);\">null_type</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">my_tuple </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: rgb(43, 145, 175);\">T3</span>&gt; <span style=\"color: rgb(43, 145, 175);\">tuple_type</span>;\n    <span style=\"color: blue;\">static const int </span>num = <span style=\"color: rgb(43, 145, 175);\">tuple_type</span>::num;\n    <span style=\"color: rgb(43, 145, 175);\">tuple_type </span>t;\n    my_tuple(<span style=\"color: rgb(43, 145, 175);\">T0 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d0</span>=<span style=\"color: rgb(43, 145, 175);\">T0</span>(),<span style=\"color: rgb(43, 145, 175);\">T1 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d1</span>=<span style=\"color: rgb(43, 145, 175);\">T1</span>(),<span style=\"color: rgb(43, 145, 175);\">T2 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d2</span>=<span style=\"color: rgb(43, 145, 175);\">T2</span>(),<span style=\"color: rgb(43, 145, 175);\">T3 </span><span style=\"color: blue;\">const</span>&amp; <span style=\"color: gray;\">d3</span>=<span style=\"color: rgb(43, 145, 175);\">T3</span>())\n        : t(<span style=\"color: gray;\">d0</span>, <span style=\"color: gray;\">d1</span>, <span style=\"color: gray;\">d2</span>, <span style=\"color: gray;\">d3</span>) { } <span style=\"color: green;\">// 构造函数，默认参数\n</span>};\n\n<span style=\"color: green;\">// 为方便访问元组数据，定义 get&lt;unsigned&gt;(tuple) 函数模板\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">unsigned </span>i, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node_traits </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef typename\n        </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node_traits</span>&lt;i-1,<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">node_type</span>::<span style=\"color: rgb(43, 145, 175);\">next_type node_type</span>;\n    <span style=\"color: blue;\">typedef typename </span><span style=\"color: rgb(43, 145, 175);\">node_type</span>::<span style=\"color: rgb(43, 145, 175);\">data_type data_type</span>;\n    <span style=\"color: blue;\">static </span><span style=\"color: rgb(43, 145, 175);\">node_type</span>&amp; get_node(<span style=\"color: rgb(43, 145, 175);\">type_shift_node</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;&amp; <span style=\"color: gray;\">node</span>)\n    { <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node_traits</span>&lt;i-1,<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;::get_node(<span style=\"color: gray;\">node</span>).next; }\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node_traits</span>&lt;0, <span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: rgb(43, 145, 175);\">T3</span>&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef typename </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt; <span style=\"color: rgb(43, 145, 175);\">node_type</span>;\n    <span style=\"color: blue;\">typedef typename </span><span style=\"color: rgb(43, 145, 175);\">node_type</span>::<span style=\"color: rgb(43, 145, 175);\">data_type data_type</span>;\n    <span style=\"color: blue;\">static </span><span style=\"color: rgb(43, 145, 175);\">node_type</span>&amp; get_node(<span style=\"color: rgb(43, 145, 175);\">type_shift_node</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;&amp; <span style=\"color: gray;\">node</span>)\n    { <span style=\"color: blue;\">return </span><span style=\"color: gray;\">node</span>; }\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">unsigned </span>i, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;\n<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node_traits</span>&lt;i,<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;::<span style=\"color: rgb(43, 145, 175);\">data_type\n</span>get(<span style=\"color: rgb(43, 145, 175);\">my_tuple</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;&amp; <span style=\"color: gray;\">tup</span>) {\n    <span style=\"color: blue;\">return </span><span style=\"color: rgb(43, 145, 175);\">type_shift_node_traits</span>&lt;i,<span style=\"color: rgb(43, 145, 175);\">T0</span>,<span style=\"color: rgb(43, 145, 175);\">T1</span>,<span style=\"color: rgb(43, 145, 175);\">T2</span>,<span style=\"color: rgb(43, 145, 175);\">T3</span>&gt;::get_node(<span style=\"color: gray;\">tup</span>.t).data;\n}\n\n<span style=\"color: blue;\">int </span>main(){\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">my_tuple</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: blue;\">char</span>, <span style=\"color: blue;\">float</span>&gt; <span style=\"color: rgb(43, 145, 175);\">tuple3</span>;\n    <span style=\"color: rgb(43, 145, 175);\">tuple3 </span>t3(10, <span style=\"color: rgb(163, 21, 21);\">'m'</span>, 1.2f);\n    std::cout &lt;&lt; t3.t.data &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">' '\n              </span>&lt;&lt; t3.t.next.data &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">' '\n              </span>&lt;&lt; t3.t.next.next.data &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">tuple3</span>::num &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; get&lt;2&gt;(t3) &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; <span style=\"color: green;\">// 从 0 开始，不要出现 3，否则将出现不可理解的编译错误\n    </span>std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">10 m 1.2\n3\n1.2</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">C++11 引入了变长模板参数，其背后的原理也是模板递归（文献[1]第 230 页）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">利用和上面例子类似的模板参数移位递归的原理，我们可以构造一个存储“类型”的元组，即<strong><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">元容器</span></strong>，其代码如下（和文献[1]第 237 页的例子不同）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">#include </span><span style=\"color: rgb(163, 21, 21);\">&lt;iostream&gt;</span>\n\n<span style=\"color: green;\">// 元容器</span>\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>=<span style=\"color: blue;\">void</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>=<span style=\"color: blue;\">void</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>=<span style=\"color: blue;\">void</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T3</span>=<span style=\"color: blue;\">void</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">meta_container </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">T0 type</span>;\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">meta_container</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: rgb(43, 145, 175);\">T2</span>, <span style=\"color: rgb(43, 145, 175);\">T3</span>, <span style=\"color: blue;\">void</span>&gt; <span style=\"color: rgb(43, 145, 175);\">next_node</span>; <span style=\"color: green;\">// 参数移位了\n    </span><span style=\"color: blue;\">static const int </span>size = <span style=\"color: rgb(43, 145, 175);\">next_node</span>::size + 1; <span style=\"color: green;\">// 非 null_type 模板参数个数\n</span>};\n<span style=\"color: blue;\">template</span>&lt;&gt; <span style=\"color: green;\">// 特例，递归终止\n</span><span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">meta_container</span>&lt;<span style=\"color: blue;\">void</span>, <span style=\"color: blue;\">void</span>, <span style=\"color: blue;\">void</span>, <span style=\"color: blue;\">void</span>&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef void </span><span style=\"color: rgb(43, 145, 175);\">type</span>;\n    <span style=\"color: blue;\">static const int </span>size = 0;\n};\n\n<span style=\"color: green;\">// 访问元容器中的数据\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">C</span>, <span style=\"color: blue;\">unsigned </span>i&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">get </span>{\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static_assert</span>(i&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>::size, <span style=\"color: rgb(163, 21, 21);\">\"get&lt;C,i&gt;: index exceed num\"</span>); <span style=\"color: green;\">// C++11 引入静态断言\n    </span><span style=\"color: blue;\">typedef typename </span><span style=\"color: rgb(43, 145, 175);\">get</span>&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>,i-1&gt;::<span style=\"color: rgb(43, 145, 175);\">c_type</span>::<span style=\"color: rgb(43, 145, 175);\">next_node c_type</span>;\n    <span style=\"color: blue;\">typedef typename </span><span style=\"color: rgb(43, 145, 175);\">c_type</span>::<span style=\"color: rgb(43, 145, 175);\">type ret_type</span>;\n};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">C</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">get</span>&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>, 0&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static_assert</span>(0&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>::size, <span style=\"color: rgb(163, 21, 21);\">\"get&lt;C,i&gt;: index exceed num\"</span>); <span style=\"color: green;\">// C++11 引入静态断言\n    </span><span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">C c_type</span>;\n    <span style=\"color: blue;\">typedef typename </span><span style=\"color: rgb(43, 145, 175);\">c_type</span>::<span style=\"color: rgb(43, 145, 175);\">type ret_type</span>;\n};\n\n<span style=\"color: green;\">// 在元容器中查找某个类型，找到返回索引，找不到返回 -1\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T2</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">same_type </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum </span>{ ret = <span style=\"color: blue;\">false </span>}; };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">same_type</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: rgb(43, 145, 175);\">T</span>&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">enum </span>{ ret = <span style=\"color: blue;\">true </span>}; };\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">bool </span>c, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Else</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IF_ </span>{ };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Else</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">true</span>, <span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: rgb(43, 145, 175);\">Else</span>&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">Then reType</span>; };\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">Else</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt;<span style=\"color: blue;\">false</span>, <span style=\"color: rgb(43, 145, 175);\">Then</span>, <span style=\"color: rgb(43, 145, 175);\">Else</span>&gt; { <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">Else reType</span>; };\n\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">C</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">find </span>{\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">int </span>i&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">number </span>{ <span style=\"color: blue;\">public</span>: <span style=\"color: blue;\">static const int </span>ret = i; };\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">C</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: blue;\">int </span>i&gt;\n    <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">find_i </span>{\n    <span style=\"color: blue;\">public</span>:\n        <span style=\"color: blue;\">static const int </span>ret = <span style=\"color: rgb(43, 145, 175);\">IF_</span>&lt; <span style=\"color: rgb(43, 145, 175);\">same_type</span>&lt;<span style=\"color: rgb(43, 145, 175);\">get</span>&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>,i&gt;::<span style=\"color: rgb(43, 145, 175);\">ret_type</span>, <span style=\"color: rgb(43, 145, 175);\">T</span>&gt;::ret,\n            <span style=\"color: rgb(43, 145, 175);\">number</span>&lt;i&gt;, <span style=\"color: rgb(43, 145, 175);\">find_i</span>&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>,<span style=\"color: rgb(43, 145, 175);\">T</span>,i-1&gt; &gt;::<span style=\"color: rgb(43, 145, 175);\">reType</span>::ret;\n    };\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">C</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n    <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">find_i</span>&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>, <span style=\"color: rgb(43, 145, 175);\">T</span>, -1&gt; {\n    <span style=\"color: blue;\">public</span>:\n        <span style=\"color: blue;\">static const int </span>ret = -1;\n    };\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">static const int </span>ret = <span style=\"color: rgb(43, 145, 175);\">find_i</span>&lt;<span style=\"color: rgb(43, 145, 175);\">C</span>, <span style=\"color: rgb(43, 145, 175);\">T</span>, <span style=\"color: rgb(43, 145, 175);\">C</span>::size-1&gt;::ret;\n};\n\n<span style=\"color: blue;\">int </span>main(){\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">meta_container</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: blue;\">int</span>&amp;, <span style=\"color: blue;\">const int</span>&gt; <span style=\"color: rgb(43, 145, 175);\">mc</span>;\n    <span style=\"color: blue;\">int </span>a = 9999;\n    <span style=\"color: rgb(43, 145, 175);\">get</span>&lt;<span style=\"color: rgb(43, 145, 175);\">mc</span>, 1&gt;::<span style=\"color: rgb(43, 145, 175);\">ret_type </span>aref = a;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">mc</span>::size &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; aref &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">find</span>&lt;<span style=\"color: rgb(43, 145, 175);\">mc</span>, <span style=\"color: blue;\">const int</span>&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">find</span>&lt;<span style=\"color: rgb(43, 145, 175);\">mc</span>, <span style=\"color: blue;\">float</span>&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>;\n    std::cin.get(); <span style=\"color: blue;\">return </span>0;\n}</pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">3\n9999\n2\n-1</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">上面例子已经实现了存储类型的元容器，和元容器上的查找算法，但还有一个小问题，就是它不能处理模板，编译器对模板的操纵能力远不如对类型的操纵能力强（提示：类模板实例是类型），我们可以一种间接方式实现存储“模板元素”，即用模板的一个代表实例（如全用 int 为参数的实例）来代表这个模板，这样对任意模板实例，只需判断其模板的代表实例是否在容器中即可，这需要进行<span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\"><strong>类型过滤</strong></span>：对任意模板的实例将其替换为指定模板参数的代表实例，类型过滤实例代码如下（参考了文献[1]第 241 页）：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: green;\">// 类型过滤，meta_filter 使用时只用一个参数，设置四个模板参数是因为，模板通例的参数列表\n// 必须能够包含特例参数列表，后面三个参数设置默认值为 void 或标签模板\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">dummy_template_1 </span>{};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">dummy_template_2 </span>{};\n<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1 </span>= <span style=\"color: blue;\">void</span>,\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">tmp_1 </span>= <span style=\"color: rgb(43, 145, 175);\">dummy_template_1</span>,\n    <span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>, <span style=\"color: blue;\">typename</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">tmp_2 </span>= <span style=\"color: rgb(43, 145, 175);\">dummy_template_2</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">meta_filter </span>{ <span style=\"color: green;\">// 通例，不改变类型\n</span><span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">T0 ret_type</span>;\n};\n                    <span style=\"color: green;\">// 匹配任何带有一个类型参数模板的实例，将模板实例替换为代表实例\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">tmp_1</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">meta_filter</span>&lt;<span style=\"color: rgb(43, 145, 175);\">tmp_1</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T</span>&gt;, <span style=\"color: blue;\">void</span>, <span style=\"color: rgb(43, 145, 175);\">dummy_template_1</span>, <span style=\"color: rgb(43, 145, 175);\">dummy_template_2</span>&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">tmp_1</span>&lt;<span style=\"color: blue;\">int</span>&gt; <span style=\"color: rgb(43, 145, 175);\">ret_type</span>;\n};\n                    <span style=\"color: green;\">// 匹配任何带有两个类型参数模板的实例，将模板实例替换为代表实例\n</span><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>, <span style=\"color: blue;\">typename</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">tmp_2</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: blue;\">typename </span><span style=\"color: rgb(43, 145, 175);\">T1</span>&gt;\n<span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">meta_filter</span>&lt;<span style=\"color: rgb(43, 145, 175);\">tmp_2</span>&lt;<span style=\"color: rgb(43, 145, 175);\">T0</span>, <span style=\"color: rgb(43, 145, 175);\">T1</span>&gt;, <span style=\"color: blue;\">void</span>, <span style=\"color: rgb(43, 145, 175);\">dummy_template_1</span>, <span style=\"color: rgb(43, 145, 175);\">dummy_template_2</span>&gt; {\n<span style=\"color: blue;\">public</span>:\n    <span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">tmp_2</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: blue;\">int</span>&gt; <span style=\"color: rgb(43, 145, 175);\">ret_type</span>;\n};</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">现在，只需将上面元容器和元容器查找函数修改为：对模板实例将其换为代表实例，即修改 meta_container&lt;&gt; 通例中“typedef T0 type;”语句为“typedef typename meta_filter&lt;T0&gt;::ret_type type;”，修改 find&lt;&gt; 的最后一行中“T”为“typename meta_filter&lt;T&gt;::ret_type”。修改后，下面代码的执行结果是：</p><pre class=\"code-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(108, 226, 108); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(249, 249, 249);\"><span style=\"color: blue;\">template</span>&lt;<span style=\"color: blue;\">typename</span>, <span style=\"color: blue;\">typename</span>&gt; <span style=\"color: blue;\">class </span><span style=\"color: rgb(43, 145, 175);\">my_tmp_2</span>;\n\n<span style=\"color: green;\">// 自动将 my_tmp_2&lt;float, int&gt; 过滤为 my_tmp_2&lt;int, int&gt;\n</span><span style=\"color: blue;\">typedef </span><span style=\"color: rgb(43, 145, 175);\">meta_container</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: blue;\">float</span>, <span style=\"color: rgb(43, 145, 175);\">my_tmp_2</span>&lt;<span style=\"color: blue;\">float</span>, <span style=\"color: blue;\">int</span>&gt;&gt; <span style=\"color: rgb(43, 145, 175);\">mc2</span>;\n<span style=\"color: green;\">// 自动将 my_tmp_2&lt;char, double&gt; 过滤为 my_tmp_2&lt;int, int&gt;\n</span>std::cout &lt;&lt; <span style=\"color: rgb(43, 145, 175);\">find</span>&lt;<span style=\"color: rgb(43, 145, 175);\">mc2</span>, <span style=\"color: rgb(43, 145, 175);\">my_tmp_2</span>&lt;<span style=\"color: blue;\">char</span>, <span style=\"color: blue;\">double</span>&gt;&gt;::ret &lt;&lt; <span style=\"color: rgb(163, 21, 21);\">'\\n'</span>; <span style=\"color: green;\">// 输出 2</span></pre><pre class=\"console-cpp\" name=\"code\" style=\"white-space: pre-wrap; word-wrap: break-word; margin-top: 2px; margin-bottom: 2px; border-color: rgb(160, 160, 160) rgb(160, 160, 160) rgb(160, 160, 160) rgb(153, 0, 0); border-width: 1px 1px 1px 4px; border-style: solid; padding: 5px 5px 5px 8px; line-height: 16.6667px; font-family: Consolas, 微软雅黑; font-size: 13px; background: rgb(255, 255, 255);\">2</pre><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>10. 总结</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">博文比较长，总结一下所涉及的东西：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">C++ 模板包括函数模板和类模板，模板参数形式有：类型、模板型、非类型（整型、指针）；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">模板的特例化分完全特例化和部分特例化，实例将匹配参数集合最小的特例；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">用实例参数替换模板形式参数称为实例化，实例化的结果是产生具体类型（类模板）或函数（函数模板），同一模板实参完全等价将产生等价的实例类型或函数；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">模板一般在头文件中定义，可能被包含多次，编译和链接时会消除等价模板实例；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">template、typename、this 关键字用来消除歧义，避免编译错误或产生不符预期的结果；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">C++11 对模板引入了新特性：“&gt;&gt;”、函数模板也可以有默认参数、变长模板参数、外部模板实例（extern），并弃用 export template；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">C++ 模板是图灵完备的，模板编程是函数编程风格，特点是：没有可变的存储、递归，以“&lt;&gt;”为输入，typedef 或静态常量为输出；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">编译期数值计算虽然实际意义不大，但可以很好证明 C++ 模板的能力，可以用模板实现类似普通程序中的 if 和 while 语句；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">一个实际应用是循环展开，虽然编译器可以自动循环展开，但我们可以让这一切更可控；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">C++ 模板编程的两个问题是：难调试，会产生冗长且难以阅读的编译错误信息、代码膨胀（源代码膨胀、二进制对象文件膨胀），改进的方法是：增加一些检查代码，让编译器及时报错，使用特性、策略等让模板更通用，可能的话合并一些模板实例（如将代码提出去做成单独模板）；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">表达式模板和向量计算是另一个可加速程序的例子，它们将计算表达式编码到类型，这是通过模板嵌套参数实现的；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">特性，策略，标签是模板编程常用技巧，它们可以是模板变得更加通用；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">模板甚至可以获得类型的内部信息（是否有某个 typedef），这是反射中的内省，C++ 在语言层面对反射支持很少（typeid），这不利于模板元编程；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">可以用递归实现伪变长参数模板，C++11 变长参数模板背后的原理也是模板递归；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">元容器存储元信息（如类型）、类型过滤过滤某些类型，它们是元编程的高级特性。</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>进一步学习</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">C++ 确实比较复杂，这可能是因为，虽然 C++ 语言层次比较低，但它却同时可以实现很多高级特性。进一步学习 C++ 模板元编程的途径很多：</p><ul style=\"margin-left: 45px; padding-left: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style: inherit !important;\">C++ 标准库的 STL 可能是最好的学习案例，尤其是其容器、迭代器、通用算法、函数类模板等部件，实现机制很巧妙；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">另外一个 C++ 库也值得一看，那就是 Boost 库，Boost 的元编程库参考文献[16]；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">很推荐《深入实践C++模板编程》这本书，这篇博文大量参考了这本书；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">wikibooks.org 上有个介绍 C++ 各种编程技巧书：More C++ Idioms，文献[15]；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">文献[17]列了 C++ 模板的参考书，共四本；</li><li style=\"font-size: 10pt; list-style: inherit !important;\">好多东西，书上讲的比较浅显，而且不全面，有时候直接看 C++ 标准（最新 C++11）可能更为高效，C++ 标准并不是想象中那样难读，C++ 标准委员会网站的 Papers 也很值得看，文献[3]。</li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"font-size: 18px; line-height: 1.8 !important;\"><strong>参考文献</strong>：</span></p><ol style=\"padding-left: 50px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><li style=\"font-size: 10pt; list-style-type: decimal;\">深入实践C++模板编程，温宇杰著，2013（<a target=\"_blank\" href=\"http://product.dangdang.com/1364954327.html\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">到当当网</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">C++程序设计语言，Bjarne Stroustrup著，裘宗燕译，2002（<a target=\"_blank\" href=\"http://product.dangdang.com/20813125.html\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">到当当网</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">C++标准，ISO/IEC 14882:2003，ISO/IEC 14882:2011（<a target=\"_blank\" href=\"http://www.iso.org/iso/catalogue_detail.htm?csnumber=50372\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">到ISO网站</a>，<a target=\"_blank\" href=\"http://www.open-std.org/jtc1/sc22/wg21/\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">C++标准委员会</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">wikipedia.org（<a target=\"_blank\" href=\"http://zh.wikipedia.org/wiki/C%2B%2B#cite_note-2\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">C++</a>，&nbsp;<a target=\"_blank\" href=\"http://zh.wikipedia.org/wiki/%E6%A8%A1%E6%9D%BF_(C%2B%2B)\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">模板</a>，&nbsp;<a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Template_metaprogramming\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">Template metaprogramming</a>，&nbsp;<a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">Curiously recurring template pattern</a>，&nbsp;<a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">Substitution failure is not an erro (SFINAE)</a>，&nbsp;<a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Expression_templates\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">Expression templates</a>，&nbsp;<a target=\"_blank\" href=\"http://zh.wikipedia.org/wiki/C%2B%2B11\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">C++11</a>，<a target=\"_blank\" href=\"http://zh.wikipedia.org/wiki/C%2B%2B14\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">C++14</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">What does a call to 'this-&gt;template [somename]' do? （<a target=\"_blank\" href=\"http://stackoverflow.com/questions/5533354/what-does-a-call-to-this-template-somename-do\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">stackoverflow问答</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">Advanced C++ Lessons，chapter 6，在线教程，2005（<a target=\"_blank\" href=\"http://aszt.inf.elte.hu/~gsd/halado_cpp/\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">到网站</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">C++ TUTORIAL - TEMPLATES - 2015，bogotobogo.com 网上教程（<a target=\"_blank\" href=\"http://www.bogotobogo.com/cplusplus/templates.php\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">到网站</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">C++ Templates are Turing Complete，Todd L. Veldhuizen，2003（作者网站已经停了，<a target=\"_blank\" href=\"http://web.archive.org/web/20050118195822/http://osl.iu.edu/~tveldhui/papers/2003/turing.pdf\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">archive.org 保存的版本</a>，archive.org 可能被限制浏览）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">Metaprogramming in C++，Johannes Koskinen，2004（<a target=\"_blank\" href=\"http://staff.ustc.edu.cn/~xyfeng/teaching/FOPL/lectureNotes/MetaprogrammingCpp.pdf\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">中科大老师保存的版本</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">C++ Template Metaprogramming in 15ish Minutes（Stanford 课程 PPT，<a target=\"_blank\" href=\"http://stanfordacm.com/files/Template-Metaprogramming.pdf\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">到网站</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">Template Metaprograms，Todd Veldhuizen，1995（<a target=\"_blank\" href=\"http://web.archive.org/web/20050212212917/http://osl.iu.edu/~tveldhui/\" style=\"color: rgb(136, 187, 255); text-decoration: none;\">archive.org 保存 Todd Veldhuizen 主页</a>，可能限制访问，<a target=\"_blank\" href=\"http://online2pdf.com/convert-ps-to-pdf\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">在线 PS 文件转 PDF 文件网站</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">Expression Templates，Todd Veldhuizen，1995；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">C++ Templates as Partial Evaluation，Todd Veldhuizen，1999；</li><li style=\"font-size: 10pt; list-style-type: decimal;\"><a target=\"_blank\" href=\"http://www.erwin-unruh.de/primorig.html\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">Erwin Unruh 写的第一个模板元编程程序</a>；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">wikibooks.org（<a target=\"_blank\" href=\"http://en.wikibooks.org/wiki/C++_Programming/Templates/Template_Meta-Programming\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">C++ Programming/Templates/Template Meta-Programming</a>，<a target=\"_blank\" href=\"http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">More C++ Idioms</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">THE BOOST MPL LIBRARY online docs（<a target=\"_blank\" href=\"http://www.boost.org/doc/libs/1_57_0/libs/mpl/doc/index.html\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">到网站</a>）；</li><li style=\"font-size: 10pt; list-style-type: decimal;\">Best introduction to C++ template metaprogramming?（<a target=\"_blank\" href=\"http://stackoverflow.com/questions/112277/best-introduction-to-c-template-metaprogramming\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">stackoverflow问答</a>）。</li></ol><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\"><span style=\"color: rgb(255, 0, 0); line-height: 1.8 !important;\">注：参考文献中所给的链接，打开不了的，可以参见</span><a target=\"_blank\" href=\"http://www.cnblogs.com/liangliangh/p/4191529.html\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">我的另一篇博客配置浏览器</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">Johannes Koskinen 论文，Stanford 课程 PPT，Todd Veldhuizen 论文我网盘保存的副本 -</p><p style=\"margin: 10px auto; padding: 0px; font-family: 微软雅黑; font-size: 13px; line-height: 24px; background-color: rgb(214, 211, 214);\">链接:&nbsp;<a target=\"_blank\" href=\"http://pan.baidu.com/s/1ntJstvF\" style=\"color: rgb(0, 102, 255); text-decoration: none;\">http://pan.baidu.com/s/1ntJstvF</a>&nbsp;密码: hogb</p></div>"
    }
  ]
}
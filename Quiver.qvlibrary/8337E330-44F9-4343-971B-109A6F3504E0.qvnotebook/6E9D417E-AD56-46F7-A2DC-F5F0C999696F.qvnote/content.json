{
  "title": "C++中const限定符的几种常见用法",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">const对象<br>将一个对象定义为不可更改的对象，称为const对象。<br>例：const int a = 512 ;<br>注解：因为const对象在定义后就不能修改，所以定义时必须初始化。</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">const引用<br>&nbsp; &nbsp; &nbsp; &nbsp; C++ Primer中写道“const引用是指向const对象的引用”。我认为至少不够精确，这句话意在强调非const引用是指向const对象是错误的，但是没有说明const引用也可以指向一般的对象。我给出的定义是：const引用是这样的一种引用，它只能读取指向对象的值，但不能修改其指向对象的值。<br>例：const int a = 512;<br>&nbsp; &nbsp; &nbsp; &nbsp; int b = 1024;&nbsp;<br>&nbsp; &nbsp; &nbsp; const int &amp;c = a;&nbsp; &nbsp; &nbsp; //正确！<br>&nbsp; &nbsp; &nbsp; const int &amp;d = b;&nbsp; &nbsp; &nbsp; //正确！<br>&nbsp; &nbsp; &nbsp; int &amp;e = a;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //错误！</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">指向const对象的指针<br>&nbsp; &nbsp; &nbsp; &nbsp; 这是C++Primer对这种指针的称呼。这种用法跟上文的const引用是类似的。同样，把这种指针称作“指向const对象的指针”是不够精确的，因为它也可以指向非const对象，只不过这种指针“自以为指向const对象”，即，这种指针只能读取指向对象的值，但不能修改其指向对象的值，无论这个对象是不是const对象。<br>例：const int a = 512;<br>&nbsp; &nbsp; &nbsp; int b = 1024;<br>&nbsp; &nbsp; &nbsp; const int *c = &amp;a;&nbsp; //正确！<br>&nbsp; &nbsp; &nbsp; c = &amp;b;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //正确！</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; int *d = &amp;a;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //错误！</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">const指针</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; &nbsp; 这也是C++Primer对这种指针的称呼。这种说法容易与“const引用”混淆，事实上表达的意义完全不同。const指针的特点是——本身的值不能修改。任何企图给const指针赋值的行为（即使给该指针赋本身的值）都会导致编译时的错误。</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">例：&nbsp; int a = 0;</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; &nbsp; int *const b = &amp;a;</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; &nbsp; b = c;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //c是另外一个指针，错误！</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; &nbsp; b = b;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //赋本身的值，错误！</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">指向const对象的const指针</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">别被绕晕了，其实就是上述两种指针的结合体。这种指针，既不能修改本身的值，也不能修改其所指向对象的值。</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">例：const int a = 0;</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; const int *const b = &amp;a;</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">const成员函数</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">又被称作常量成员函数。这种成员函数只能读取而不能修改其所属对象的数据成员。</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">例: class A{</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; public:</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; &nbsp; bool IsSame(const A &amp;a)const;</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">其它相关：</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">const_iterator</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">每种容器类型中都定义了const_iterator类型，这种类型只能用于读取容器内的元素，但不能改变其值。</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">例：vector&lt;string&gt; text;</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; for(vector&lt;string&gt;::const_iterator iter = text.begin(); iter! = text.end(); ++iter)</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">&nbsp; &nbsp; &nbsp; {函数体}</p><p style=\"color: rgb(51, 51, 51); font-family: tahoma, 宋体; font-size: 14px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(250, 250, 252);\">暂时就写这么多，如有新发现会持续更新。</p>"
    }
  ]
}
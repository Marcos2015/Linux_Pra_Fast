{
  "title": "VIM进阶索引::高亮",
  "cells": [
    {
      "type": "text",
      "data": "<div></div><div><div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><table width=\"660\" border=\"0\" align=\"center\" cellpadding=\"0\" cellspacing=\"0\" style=\"word-wrap: break-word; color: rgb(0, 0, 0); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; line-height: 20px;\"><tbody><tr><td class=\"F14\" style=\"font-size: 14px; width: 650px; word-wrap: break-word;\"><br>Vim进阶索引[5]::高亮<br>与以前的教程相比，这一篇做了一些小改变：使用了缩写而不是每次都给出完整的命令。提示使用文档时不同给出完整的命令而是给出“关键字”——你可以用“:h 关键字”的方式找到Vim文档中的相应内容。<br>–&nbsp;<br>hq00e&nbsp;<br>在语法高亮相信大家在使用Vim的文档时就已经见过了，Vim提供了一个测试用的脚本。输入下面的命令：<br>&nbsp; &nbsp;:e $VIMRUNTIME/syntax/colortest.vim<br>&nbsp; &nbsp;:so %<br>这个脚本除了让你知道Vim是可以显示许多颜色的外，它还是一个实时定义颜色的脚本实例。在本文的末尾我们会用同样的技巧生成一个Web色表。<br>Vim中与色彩有关的设定大致可以分为两部分：<br><ul><br><li>Vim编辑环境配色。如Vim编辑区的前景背景颜色（文本的默认颜色）、状态栏颜色、错误提示颜色、光标、圈选区（可视区）、行号、折叠的颜色等。这些都属于编辑器的环境设定。&nbsp;<br></li><li>文件使用的所使用的色彩。即所谓的语法高亮/语法着色，如Vim文档中索引标签使用粉红色，示例使用蓝色、链接使用青色。或是当你打开C语言文件时，注释蓝色、数据类型青色、字串粉红、关键字赭色。都是Vim根据文件类型启用相应的语法文件，对该应用颜色的部分进行识别并着色。</li></ul><br>本文将通过对这些色彩进行设置的实例，让用户逐步了解与色彩相关的命令。<br>1 环境配色<br>Vim的环境配色决定了用户编辑环境的基本风格。语法高亮可以关闭但环境配色是始终存在的，下面我们将逐步地改造并定义属于自已的配色风格。<br>1.1 使用预置的配色风格<br>要改变Vim的编辑环境的配色很容易因为Vim提供了多种预置的配色风格（颜色主题）。比如要使用'evening'风格：在菜单中选择“编辑-调色板-evening”。或者在命令行中使用:colorscheme命令<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fn-1\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">1</font></a><br>：<br>:colors evening<br>可以看到编辑环境包括编辑区的前景背景的颜色都发生了变化。命令行下Vim默认是黑底白字，图形下的Vim是白底黑字，在应用了上面的命令后都成了深灰的背景，银灰的前景。<br>提示：在菜单中选择“default”或使用命令:colors default，换回默认的配色。关键字：:colorscheme<br>1.2 修改环境配色<br>如果你不满足于使用现成的颜色主题的话，那我们来看一下如何修改环境配色。首先要掌握的命令是:highlight。<br>\" 使用默认的高亮（移除用户定义的高亮，即根据'ft'重新载入语法文件）<br>:hi clear&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\" guifg表示图型介面（gui）下的前景色（ForeGround）<br>\" guibg表示图型介面（gui）下的背景色（BackGround）<br>:hi {组} guifg={值} guibg={值}<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\" 进行颜色关联。<br>\" 这条命令使{组1}使用与{组2}一样的颜色设置<br>:hi link {组1} {组2}<br>例如，要将“组”为“c_name”的组在图形介面下的颜色设置为背景黑色，前景灰色可用如下命令：<br>:hi c_name guifg=gray guibg=black<br>让组“c_blah”使用与“c_name”一样的颜色设置：<br>:hi link c_blah c_name<br><b>注意：目前我们只涉及图形介面下Vim（gVim）的色彩控制。所以本文接下来的例子，在我们讲到命令行下的颜色设置之前，所有例子都是在gVim环境中完成的。</b><br>忘了解释一下“组”（高亮组）是什么？有什么用？Vim中“组”被用来表示一组颜色设置（前景、背景、字体、风格）。当某个介面元素（或是编辑区中的文本）应用了特定的“组”后，它就根据“组”表示的颜色设置来显示。应用了同样“组”的介面元素或文本会有一样的颜色显示。有:hi为“组”分配颜色时，如果组已存在则覆盖原有的设置，否则定义新组。<br>现在我们知道通过赋于guifg和guibg颜色值为组分配颜色。哪到底可以使用哪些颜色呢？图形介面下的颜色有“名称”或“数值”两种表示方式。名称如上面所用的gray、black还有大家熟悉的red、white、yellow，更多可以使用的颜色名称见文档：<b>gui-colors</b>。颜色还可以用“数值”来表示，方法是用三个分别表示“红、黄、蓝”的十六进制数值表示。如red还可以表示为<b>#ff0000</b>。记得数值前要加上#号。没错，这与html文件中颜色的表示方法是一样的。用这种方法我们可以表示更多的颜色：<br>\" 将前景改为淡紫色<br>:hi c_name guifg=#E6E6FA<br>提示：此外guifg/guibg还支持三个特殊的值：none、fg、bg，分别表示无颜色、编辑区一般文本的前景色、一般文本的背景色。<br>要改变Vim的配色我们需要知道都有哪些组可以改。下面表中是Vim环境配色中介面元素所应用的“组”（组名在前）：<br>Cursor&nbsp;<br>光标<br>ErrorMsg&nbsp;<br>命令行中的错误提示<br>Folded&nbsp;<br>折叠行<br>LineNr&nbsp;<br>行号<br>NonText&nbsp;<br>非文本区（控制字符和一些特殊字符和编辑器空白区等）<br>Normal&nbsp;<br>编辑区一般文本的前景和背景色<br>Search&nbsp;<br>搜索<br>StatusLine&nbsp;<br>状态行<br>Visual&nbsp;<br>圈选区&nbsp;<br>提示：完整的列表见highlight-groups。非Windows用户还可以设置菜单、滚动条和提示框的颜色。见hl-menu。<br>现在做个实验，打开一个文档并依次输入下面的命令，观察变化：<br>:se ft= \"关闭高亮<br>\" 分别改变编辑区的前景色（guifg）和背景色（guibg）为灰色和红色<br>:hi Normal guifg=gray guibg=red<br>\" 修改背景色为暗灰色，上面设置的前景色将被保留<br>:hi Normal guibg=#333333<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\"显示状态行<br>:se laststatus=2<br>\" 设置状态行的颜色。<br>\" 如果没“gui=none”会发现状态行的前/背景色颠倒了。<br>\" 关于gui我们稍后再说<br>:hi Statusline guifg=green guibg=gray gui=None<br>\" 状态栏的默认颜色<br>:hi statusline gui=bold,inverse guifg=fg guibg=bg<br>\" 使错误提示使用与状态栏一样的颜色设置（默认是红色）<br>\" 用hi link对已定义颜色的组重新定义颜色要加“!”<br>:hi! link ErrorMsg statusline<br>\" 下面的命令会出错，错误提示成了绿色的<br>:hi link<br>\" 清除颜色。<br>:hi! link ErrorMsg none<br>\" 无颜色的错误提示<br>:echoerr \"abc\"<br>\" 恢复默认的颜色<br>:hi clear<br>注：“:hi link {组} NONE”是:hi link的一种用法，用来清除组的颜色关联。<br>2 语法高亮<br>前面我们讲了如何更改Vim环境配色，如光标，状态行，错误提示的颜色。并没有涉及到如何根据编辑的文件来显示不同颜色，即语法高亮。与更改配色相比设置语法高亮要更复杂一些：配色中更改的组是确定的，因为编辑器中的介面元素是固定的，而语法高亮中所打开文件中那些需要高亮那些不需要，以及对不同类型的文件应用不同的语法高亮都要视具体的文件而定。很多时候我们还需要“创造”（自定义）出一些组来。但与配色一样在语法高亮中颜色的显示依然是由:hi命令控制。<br>2.1 修改当前的高亮设置<br>这一节我们将对当前文本中的语法高亮进行修改，你会发现这与修改环境配色相似——所不同的只是“组”名。这是一组实验：<br>:h syntax.txt \"打开Vim文档<br>:hi helpHyperTextJump guifg=darkblue \"改变文档中链接的颜色<br>:hi clear<br>\"清除自定义颜色——包括上面的颜色<br>:hi! link helpHyperTextJump Identifier \"恢复颜色<br>所以要定义颜色只要对相应的组名的颜色进行设置就行了。那你要问了，这个helpHyperTextJump是从哪来的我怎么会知道哪个的组名是哪个？如果我要定义自已的组名呢？<br>要查看当前的语法文件中定义了哪些组名可以用不带参数的:hi查看。此外，还可以用：<br>\" 查看当前的文件类型（假设是texinfo文件）。<br>:se ft<br>texinfo<br>\" 知道是texinfo文件后，使用以下命令打开相应的语法文件<br>\" 在语法文件中，:syn命令后跟的就是组名。<br>:e $vimruntime/syntax/texinfo.vim<br>那用户该怎么定义自已的组呢？继续往下看吧……<br>2.2 定义新的高亮<br>在定义新的高亮组时我们要先回答这个问题：为什么要定义新的组呢？有很多可能的原因：其中之一是我们想在不修改原来的高亮的情况下增加一种色彩，为些我们需要定义新的高亮组，并分配适当的颜色。<br>现在我们要定义自已的组了，首先要为我们自定义的组取个名字，组的命名与变量一样只能由字符下划线和数字组成（虽然我们前面的例子中使用了不同的大小写，但组名是不区分大小写的）。下面的命令中我们定义了一个组名为“mygroup”的组<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fn-2\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">2</font></a><br>。<br>:hi mygroup guifg=#ff9999<br>这条命令告诉Vim将mygroup组的字串颜色定义为淡红色（lightred）。但Vim现在还不知道哪些字串属于mygroup，所以我们得告诉Vim——方法是使用:match命令：<br>:match mygroup /xxx/<br>这条命令告诉Vim凡匹配式样的xxx的字串都属于mygroup。这样当前文件中所有匹配“xxx”的字串都会变成淡红色。定义自己的颜色是不是很容易呢？<b>先用:hi命令定义组及其使用的颜色。再用:match告诉Vim编辑区文本中哪些部分是属于自定义组的。最后，Vim会根据:match设置的规则将当前编辑区文本分为许多不同的组（如果有定义多个组的话），并对不同的组应用:hi为其分配的颜色</b><br>下面我们要用一个更实际的例子来加深对语法高亮的印象。<br>看一下这个简单的表格：<br>王小明&nbsp; &nbsp; &nbsp; &nbsp; 数学&nbsp; &nbsp; &nbsp; &nbsp; 46<br>李阿月&nbsp; &nbsp; &nbsp; &nbsp; 数学&nbsp; &nbsp; &nbsp; &nbsp; 72<br>林小丽&nbsp; &nbsp; &nbsp; &nbsp; 数学&nbsp; &nbsp; &nbsp; &nbsp; 91<br>这是某个班主任手中的成绩单。他/她的班级有25个学生，这是其中的三条数据。这个班级经常有考试，这个老师希望考试的结果更直接明了一点：不及格（少于60分）的成绩显示为红色，90分以上的成绩有显示为青色，这样他/她就可以很快知道哪些学生该补课<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fn-3\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">3</font></a><br>，而哪些学生该表扬。当科目为数学时将科目显示为蓝色，这个班主任教数学的！学生名字显示为粉红色——看来这个班主任是女的。最后全班最高分的颜色反白显示。<br>我们先取几个不同的组名<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fn-4\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">4</font></a><br>：“u_student、u_subject、u_mark_fail、u_mark_a”分别表示“学生、科目、不及格、优秀”等。将这个表格另存为文本文件并用gVim打开，使用下面的命令：<br>:hi u_student guifg=#ff9999 guibg=white<br>:hi u_subject guifg=lightblue guibg=white<br>:hi u_mark_fail guifg=red guibg=white<br>:hi u_mark_a guifg=darkcyan guibg=white<br>\" 上面的命令定义了不同的组及其对应的颜色<br>\" 现在我们要用match告诉Vim怎么分辨不同的组，<br>\" 我们要用到一些的正则表达式<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\"行头开始至第一个空白字符<br>:syn match u_student /^\\S*/<br>:syn match u_subject /数学/<br>:syn match u_mark_fail /\\s[1-5]\\=.$/<br>:syn match u_mark_a /\\s100\\|\\s9.$/<br>你可能发现了每条match命令前面都多了:syn。这是因为使用match命令时前一个match定义的组的颜色会丢失。用match命令你没办法同时显示多种颜色。在上面的match命令前加上syn就行了，就可以显示所有自定义的颜色了。<br>提示：其实:syntax match与:match是不同的命令，不过“目前为止”它们的语法是一样的，我们在下一篇会讲到:syntax命令。<br>现在我们为成绩单加上颜色了，但下一次呢？我们可不希望每次打开都手动设置，我们可以将之放进单独文件中。将上面的命令复制到单独的文件中，然后用:so命令运行就可以了。<br>2.3 写语法文件<br>我们在前面写的脚本，保存起来就成了一语法文件。我们使用:so命令就可以运行了，不过你也许还希望它像其他语法文件一样能自动加载。要做到这一点也很简单。<br>在我们继续之前我简单描述一下语法文件加载的机制。Vim读入/新建文件时根据后缀名判断文件类型（或者根据模式行中设置的'filetype'设置项判断文件类型），然后在$VIMRUNTIME/syntax/和$VIM/vimfiles/syntax/中查找以文件类型为文件名，.vim为后缀的文件。找到的话加载该文件。<br>所以语法文件我们已经有了，我们只需要再选择合适的文件类型名。假设我们使用的文件类型名是'u_mark'，将上面的脚本命名为u_mark.vim放到这个目录中：$VIM/vimfiles/syntax/。然后要让Vim打开成绩单时知道自动应用语法文件。在学习autocmd和filetype的内容之前，在这里我们可以简单地使用模式行，来达到这个目的。在成绩单文件的末尾加入模式行：<br>&nbsp; &nbsp;vim:ft=u_mark<br>现在打开成绩单文件时Vim就会自动加载语法文件。如果打开成绩单时还是没出现语法高亮请确定已经开启了语法高亮。使用:syn on开启高亮，必要的话将之放到.vimrc中。<br>3 :highlight命令详解<br>现在是对:hi进一步挖掘的时候了。<br>3.1 命令行下的颜色设置<br>在前面的内容中，我们讲:hi命令时一直都是以图形介面（gui）为例设置前景和背景色。由于命令终端对颜色显示的限制，Vim在命令行下可以使用的颜色相对gui要少得多，所以使用:hi命令时图形介面和命令行介面的颜色是分开设置的。对于黑白终端来说就无所谓颜色了，而彩色终端用cterm来表示，前景色就是“ctermfg”，而背景色是“ctermbg”。下面是一个表格：<br>终端类型&nbsp; &nbsp; 前景色&nbsp; &nbsp;&nbsp; &nbsp;背景色&nbsp; &nbsp;&nbsp; &nbsp;注释<br>term&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; -&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;黑白终端<br>cterm&nbsp; &nbsp;&nbsp; &nbsp; ctermfg&nbsp; &nbsp;&nbsp;&nbsp;ctermgb&nbsp; &nbsp;&nbsp;&nbsp;彩色终端<br>gui&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;guifg&nbsp; &nbsp;&nbsp; &nbsp; guibg&nbsp; &nbsp;&nbsp; &nbsp; 图形介面<br>在前面我们对编辑区文本的颜色进行了定义：<br>:hi Normal guifg=gray guibg=red<br>现在我们对其命令行下的颜色进行定义<br>:hi Normal ctermfg=gray ctermbg=red<br>我们可以简单地写成一行：<br>:hi Normal guifg=gray guibg=red ctermfg=gray ctermbg=red<br>有哪些颜色可以使用？见cterm-colors。<br>3.2 显示样式<br>:hi命令除控制颜色外还可以控制文字的显示样式。term、cterm和gui分别控制三种不同终端下的字体式样。这些字体样式包括了粗体、下划线、斜体、反显。使用多种样式时将样式用逗号隔开。详细样式见attr-list。<br>\" 设置错误提示在不同终端下的显示样式<br>:hi ErrorMsg term=bold,reverse cterm=bold,reverse gui=reverse&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\" 将某项的值设为NONE，可清除该项的样式设定<br>:hi ErrorMsg term=NONE<br>需要注意的是gui下不支持粗体的样式，但gui下多了一个字体的设置项font，用以指定字体：:hi tung_poem font=……<br>另外因为Normal组是做为Vim的基准设定，所以对Normal进行的字体样式设定将被忽略。<br>3.3 关于link<br>在使用:hi link命令时有几个细节要注意一下。文档中都有（hi-link），这里简单提一下。仍是以命令“:hi link {组1} {组2}”为例：<br><ul><br><li>如果在关联之前{组1}组已经定义过了了，则要使用加!号的形式:hi! link否则提示错误。&nbsp;<br></li><li>当{组1}关联到{组2}后，{组1}组使用与{组2}一样的颜色设置。如果此时再用:hi对{组1}定义颜色，则关联被取消。{组1}回复到设置关联前的颜色设置（如果有的话），再应用新定义的颜色。&nbsp;<br></li><li>default开关项。由于Vim有多个配置文件，又有语法文件定义颜色。所以一组颜色可能被多次定义，为了让某一组颜色只在未定义时关联到其他组。可以使用开关项default：<br>&nbsp; &nbsp;&nbsp;&nbsp;:hi default link {组1} {组2}<br>一般而言，后定义（关联）的颜色总是覆盖先定义（关联）的颜色。在使用了这个开关项时，设置了default开关的总是被覆盖。仅当其他地方未定义{组1}时，才使用该关联。这主要是用在语法文件中，语法文件的加载要晚于配置文件。当在配置文件中定义颜色时，由于语法文件较晚加载自定义的颜色总是被覆盖。如果在语法文件中使用了default，则配置文件中自定义的颜色就能被显示出来。&nbsp;<br></li></ul><br>使用:hi link还能节省大量的时间，减少重复的劳动。完整的颜色定义通常较长，因为要兼顾各种终端的显示能力。这是Vim中对Comment组的颜色定义：<br>&nbsp;&nbsp;:hi Comment&nbsp; &nbsp; &nbsp; &nbsp; term=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE<br>如果每定义一种颜色都要写这么长就太折腾人了。避免这种情况的最好方法是利用好预定义的颜色。这些是Vim预定义的组、所表示的意义及其使用的颜色与样式：<br><font color=\"#0000ff\">Comment&nbsp; &nbsp;&nbsp;&nbsp;注释</font><br><font color=\"#ff00ff\">Constant&nbsp; &nbsp; 常量</font><br><font color=\"#008080\">Identifier&nbsp; &nbsp; 变量名</font><br><font color=\"#804040\"><b>Statement&nbsp; &nbsp; 语句</b></font><br><font color=\"#a020f0\">PreProc&nbsp; &nbsp; 预处理器</font><br><font color=\"#2e8b57\"><b>Type&nbsp; &nbsp; 数据类型</b></font><br><font color=\"#6a5acd\">Special&nbsp; &nbsp;&nbsp;&nbsp;特殊符号</font><br><font color=\"#6a5acd\"><u>Underlined&nbsp; &nbsp; 突出显示的文本</u></font><br>Ignore&nbsp; &nbsp; 无设置<br><font color=\"#ffffff\">Error&nbsp; &nbsp; 语法错误</font><br><font color=\"#0000ff\">Todo&nbsp; &nbsp; 待做事项</font>&nbsp;<br>Vim的语法文件本身就大量地使用了:hi link命令，它们大部就是关联到上面所列的组。在上面成绩单的例子中我们定义了u_subject在gui下的颜色为蓝色，但使用下面这条命令我们除了达到同样的效果外，还定义在其他终端下的颜色：<br>:hi! link u_subject Comment<br>所以在定义新的颜色时，先在上面的列表中看一看有没有你需要的颜色，如果有的话又可以节省很多时间了。<br>4 综合<br>现在看一下与语法高亮相关的几个例子。<br>4.1 高亮tags<br>见文档：tag-highlight<br>4.2 生成web色索引<br>使用:hi命令和:syn match命令就可以让Vim显示出斑斓的色彩。现在我们要更进一步结合上面的两个命令与Vim脚本写出一个217色的Web安全色表。<br>\" 生成Web色表<br>\" 用法：so web_color_gen.vim<br>\" 限制：只能在gui中使用<br>\" 注意：这个脚本在Vim6.3/6.4中有时会出现颜色渲染错误的情况。<br>\"&nbsp; &nbsp;&nbsp; &nbsp; 在Vim7中则没发现类似情况。<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\" 关闭搜索高亮<br>se nohls<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\" 定义数组<br>\" 在Vim7中定义数组就不会这么累了<br>let c0=\"00\"<br>let c1=\"33\"<br>let c2=\"66\"<br>let c3=\"99\"<br>let c4=\"cc\"<br>let c5=\"ff\"<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\" 生成web色的数值表<br>let L1=0<br>while L1\" . ':s/^/\\=c{L1}.c{L2}.c{L3}.\" \"/' . \"\\\"<br>&nbsp; &nbsp;&nbsp; &nbsp;let L3=L3+1<br>&nbsp; &nbsp; endw<br>&nbsp; &nbsp; let L2=L2+1<br>&nbsp;&nbsp;endw<br>&nbsp;&nbsp;let L1=L1+1<br>endw<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>g/./exec 'hi '.expand(\"\").' guifg=grey guibg=#'.expand(\"\") |<br>&nbsp; &nbsp; \\ exec 'syn match '.expand(\"\").' /'.expand(\"\").' /'<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>新建空文档，然后运行脚本就可以看到web色表了。<br>这里有几个地方我解释一下。<br>exec \"norm o\\\" . ':s/^/\\=c{L1}.c{L2}.c{L3}.\" \"/' . \"\\\"<br>这条命令在文档中新起一行，并用:s命令插入颜色值。关于:s命令的rhs中使用\\=在“寄存器”篇中我们已经讲过了（见：sub-replace-special）。当L1、L2、L3分别为1、2、3时，这条命令就成了：<br>exec \"norm o\\\" . ':s/^/\\=c1.c2.c3.\" \"/' . \"\\\"<br>其结果就是在当前行下插入了“336699 ”。在这三组循环运行完后文档区将会有如下的web色数值表：<br>000000<br>000033<br>...<br>ffffff<br>还有就是expand()。这个函数的作用是将一些特殊的符号扩展为该符号所表示的字串。expand(\"\")将返回当前光标所在位置的“词”。常见的用法还有expand(\"%\")、expand(\"\")等。篇幅所限，关于这个函数的用法见*expand()*。<br>g/./exec 'hi '.expand(\"\").' guifg=grey guibg=#'.expand(\"\") ……<br>g/./表示对所有非空行执行命令。假设当前行在“336699 ”，对这行执行“exec 'hi…. .expand(\"\")”命令时，expand(\"\")将被扩展为“336699”，这样命令就成了：<br>hi 336699 guifg=grey guibg=336699<br>同样的后面的:syn命令就成了syn match 336699 /336699 /。在运行完这组命令后Vim就会刷新屏幕上的颜色了。<br>提示：这段代码只有在图形介面下能发挥功用，在脚本开头加入这段代码以检测运行环境：<br>if !has(\"gui\")<br>&nbsp; &nbsp; finish<br>endif<br>另外，在脚本末尾添加下面代码可以使用web色表更易读一点：<br>1d \" 删除空行<br>\" 格式化颜色表，每行六种颜色。<br>g/./norm 6gJ<br>这是运行结果（部分）：<br><font color=\"#c0c0c0\">660000&nbsp;</font><font color=\"#c0c0c0\">660033&nbsp;</font><font color=\"#c0c0c0\">660066&nbsp;</font><font color=\"#c0c0c0\">660099&nbsp;</font><font color=\"#c0c0c0\">6600cc&nbsp;</font><font color=\"#c0c0c0\">6600ff&nbsp;</font><br><font color=\"#c0c0c0\">663300&nbsp;</font><font color=\"#c0c0c0\">663333&nbsp;</font><font color=\"#c0c0c0\">663366&nbsp;</font><font color=\"#c0c0c0\">663399&nbsp;</font><font color=\"#c0c0c0\">6633cc&nbsp;</font><font color=\"#c0c0c0\">6633ff&nbsp;</font><br><font color=\"#c0c0c0\">666600&nbsp;</font><font color=\"#c0c0c0\">666633&nbsp;</font><font color=\"#c0c0c0\">666666&nbsp;</font><font color=\"#c0c0c0\">666699&nbsp;</font><font color=\"#c0c0c0\">6666cc&nbsp;</font><font color=\"#c0c0c0\">6666ff&nbsp;</font><br><font color=\"#c0c0c0\">669900&nbsp;</font><font color=\"#c0c0c0\">669933&nbsp;</font><font color=\"#c0c0c0\">669966&nbsp;</font><font color=\"#c0c0c0\">669999&nbsp;</font><font color=\"#c0c0c0\">6699cc&nbsp;</font><font color=\"#c0c0c0\">6699ff&nbsp;</font><br><font color=\"#c0c0c0\">66cc00&nbsp;</font><font color=\"#c0c0c0\">66cc33&nbsp;</font><font color=\"#c0c0c0\">66cc66&nbsp;</font><font color=\"#c0c0c0\">66cc99&nbsp;</font><font color=\"#c0c0c0\">66cccc&nbsp;</font><font color=\"#c0c0c0\">66ccff</font><br>4.3 其他应用<br>Vim定义的高亮还可以用以生成彩色的html文档或打印彩色文档。<br><ul><br><li>要生成html文档，只要先开启高亮然后简单的输入:TOhtml命令就可以生成使用与当前颜色设置一样的html文档了。TOhtml其实是一个插件，除了简单的用法，它其实还支持许多高级的控制选项如编码，CSS等。这是非常值得用户花点时间了解的命令——关键字“:TOhtml”。&nbsp;<br></li><li>:hardcopy命令会根据当前的色彩设定打印文档。此外在Linux/Unix中这个命令还可以用来生成PostScript文档。关键字“:hardcopy”。</li></ul><br>5 小结<br>至此对于给定的组我们已经能决定它颜色的显示了。然而，依赖:syn match加正则表达式的方式定义组仍有局限——它不能针对组与组之间的关系作出调整，注释的嵌套便是一例。这解决这些问题或者说要定义有更复杂规则的组我们需要对:syntax命令有进一步的了解。下一篇我们将深入高亮的另一重要命令:syntax并，定义更复杂的语法文件。<br>Footnotes<br>[<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fnd-1\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">1</font></a><br>] 其实Vim中的颜色文件，配色文件，语法文件，配置文件和插件本质上都是脚本文件都可以用ru或so运行。colors命令可以认为是预设了目录的so命令。<br>[<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fnd-2\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">2</font></a><br>] 这里用的命令格式与上面修改高亮时的命令格式是一样的，它们的唯一区别在于使用的是否是新的组名。如前所述，Vim并不知道它是修改已有组的颜色设置，还是定义了新的组。要检查特定的组是否已存在可以用:hi mygroup，如出现错误提示则说明在“当前应用的语法文件”中不存在组mygroup<br>[<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fnd-3\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">3</font></a><br>] 在我读书的会儿老师会要求我们把错的题目抄800-1000遍<br>[<br><a href=\"http://blah.blogsome.com/2006/06/14/vim_tut_hl/#hl-fnd-4\" target=\"_blank\" style=\"color: rgb(0, 68, 182); text-decoration: none;\"><font color=\"#800080\">4</font></a><br>] 没错，你可以按自己的意愿选择组名<br></td></tr></tbody></table></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span></div>"
    }
  ]
}
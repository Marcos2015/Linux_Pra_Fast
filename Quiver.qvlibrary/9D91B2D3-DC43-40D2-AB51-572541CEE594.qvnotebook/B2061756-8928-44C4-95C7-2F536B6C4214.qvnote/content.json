{
  "title": "ACE的陷阱",
  "cells": [
    {
      "type": "text",
      "data": "<strong style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 24pt;\"><span lang=\"EN-US\">&nbsp;ACE</span><span style=\"font-family: SimHei;\">的陷阱</span></strong><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"></span><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">坦白说，使用这个标题无非是希望能够吸引你的眼球</span><span lang=\"EN-US\">,</span><span style=\"font-family: SimSun;\">这篇文章的目的仅仅是为了揭示一些</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">缺陷的。文章适合的读者是对</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">（</span><span lang=\"EN-US\">ADAPTIVE Communication Environment</span><span style=\"font-family: SimSun;\">）有一定研究，或者正在使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">从事项目开发的人士参考。如果你对</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">还是新手，甚至包括</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">知识初学者，（但你想飞的更高），建议你收藏这篇文档以后阅读。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">秉承陷阱系列文章的传统，我只是通过一些辩证的角度去看</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的一些不足，对于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的强大和优美我就不再作赞美。从</span><span lang=\"EN-US\">2000</span><span style=\"font-family: SimSun;\">年，到现在，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">在中国已经从星星之火，开始有燎原之势。这一方面说明</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的优美和实力已经逐步得到大家的认可（我所知道的</span><span lang=\"EN-US\">Adobe reader</span><span style=\"font-family: SimSun;\">的使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">，估计是为了跨平台，国内的大量电信的网管，计费，智能网软件也使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">），一方面要感谢的是的马维达这位国内少有的职业作家，国内的</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的中文资料（包括大量免费资料）都出自这位老兄。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">无疑是复杂的，能够畅快的遨游在其中的绝对不是泛泛之辈。没有对网络，设计模式，<a href=\"http://lib.csdn.net/base/operatingsystem\" class=\"replace_word\" title=\"操作系统知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">操作系统</a>有一定的底蕴，想痛快的驾驭</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">无疑是较难的。另外，由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">仍然处在逐步发展的过程中。他的很多问题仍然有待进一步完善。重要的是一些文案的不足，受众面狭小，导致许多</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的使用者在使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的时候会碰上很多问题。这篇文案就是用于彻底揭示部分这些问题。希望大家能在更加顺捷的使用它。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">另外，请注意我使用的陷阱这个术语，而不是原罪。（</span><span lang=\"EN-US\">C Trap and Pitfalls&nbsp;</span><span style=\"font-family: SimSun;\">倒有很多应该是</span><span lang=\"EN-US\">Original sin</span><span style=\"font-family: SimSun;\">）</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">还在不停的发展中。很多问题可能会在以后的版本中间改进。所以在我认为的的确是问题的章节后面，我会附上知道错误的版本号。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t0\"></a><a name=\"_Toc208675457\"></a><a name=\"_Toc207687125\"><span lang=\"EN-US\">1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">我将什么列为陷阱</span></a></h1><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t1\"></a><a name=\"_Toc208675458\"></a><a name=\"_Toc207687126\"><span lang=\"EN-US\">1.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">低效的模块</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">作为一个代码级的中间件。</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">无疑是高效的，但是坦白说</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的代码不是非常完美的。</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的很多地方提供的是一个框架解决方案，为了保证框架的可移植和通用，代码中大量使用了</span><span lang=\"EN-US\">virtual&nbsp;</span><span style=\"font-family: SimSun;\">函数，</span><span lang=\"EN-US\">Bridge</span><span style=\"font-family: SimSun;\">模式，多线程下的锁操作，甚至有相当的</span><span lang=\"EN-US\">new</span><span style=\"font-family: SimSun;\">操作……，这些东西都限制</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的性能。所以个人谨慎的将</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的效率定义为中上。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">个人认为，一般情况下，如果你使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">API</span><span style=\"font-family: SimSun;\">代替系统</span><span lang=\"EN-US\">API</span><span style=\"font-family: SimSun;\">，速度应该降低</span><span lang=\"EN-US\">0.01%</span><span style=\"font-family: SimSun;\">以下，主要导致这些差役在于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的再次封装，而函数栈的调用成本应该可以几乎不计。</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的优势在高性能的系统<a href=\"http://lib.csdn.net/base/architecture\" class=\"replace_word\" title=\"大型网站架构知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">架构</a>，而不是绝对的函数性能，如果你要再考虑在加入系统框架的其它功能呢，（举一个例子，当你想把定时器优美的合入你的代码时），</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">就有足够的优势让你选择他。【注】</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">在此啰嗦一句，同样也有很多人质疑</span><span lang=\"EN-US\">STL</span><span style=\"font-family: KaiTi_GB2312;\">的性能。所有好的类库一样，他带来优势的同时也会有一定的遗憾，比如少量性能降低。但是如果说他们的性能不好，那是无稽之谈。（不信，把你认为性能差的代码给我写写看。）建议固步自封的程序员不要再干买椟还珠的事情，先去读读那些优美的代码。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但是和所有的框架一样，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">也有不少的地方的地方是性能的暗礁，你最好绕开。当然一般而言</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">会提供多条道路，重要的是你能选择正确。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t2\"></a><a name=\"_Toc208675459\"></a><a name=\"_Toc207687127\"><span lang=\"EN-US\">1.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">设计缺陷</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的有多个层次，侧记缺陷这类错误往往出现在</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的高阶封装中。同时由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">是一个跨平台的中间件。所以为了平台的兼容性，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">做了很多折中和弥补，有些是很漂亮的，但有些却不是非常理想。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t3\"></a><a name=\"_Toc208675460\"></a><a name=\"_Toc207687128\"><span lang=\"EN-US\">1.3<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">使用不便的地方</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所有的代码都是不完美的，特别是</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">这种要让无数人在无数环境下使用的软件。很多使用不便的问题都是来自我个人的一些习惯，这些算是苛责了。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t4\"></a><a name=\"_Toc208675461\"></a><a name=\"_Toc207687129\"><span lang=\"EN-US\">1.4<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">容易误解或者误用的地方</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的庞大性，很多时候大家会错误的理解使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的某些代码实现某些特性。在此将写一些曾经让我们栽跟头的阴沟写出来。另一方面，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的文档的某些介绍也存在含混，会误导大家的理解，错误的地方。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t5\"></a><a name=\"_Toc208675462\"></a><a name=\"_Toc207687130\"><span lang=\"EN-US\">2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE</span></a><span style=\"font-family: SimHei;\">的链接</span><span lang=\"EN-US\">Link</span><span style=\"font-family: SimHei;\">错误</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">很多人在</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的时候往往会出现以下的</span><span lang=\"EN-US\">Link</span><span style=\"font-family: SimSun;\">错误。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">Why do I get errors while using 'TryEnterCriticalSection'?&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">/ace/OS.i(2384) : error C2039:</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">'TryEnterCriticalSection': is not a member of '`global namespace''</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">其实这个错误不是由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">导致的，只是编译器把这个赃栽倒了</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">上。出现这个错误的原因主要是因为一些关键宏定义冲突，一般是</span><span lang=\"EN-US\">_WIN32_WINNT</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">'TryEnterCriticalSection'&nbsp;</span><span style=\"font-family: SimSun;\">这个函数是</span><span lang=\"EN-US\">NT4.0</span><span style=\"font-family: SimSun;\">后才出现的函数，如果这个宏被定义的小于</span><span lang=\"EN-US\">0x0400</span><span style=\"font-family: SimSun;\">或者没有定义，那么就会出现这个错误。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以最简单的处理方法是在自己的预定义头文件中加入一行。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#if !defined (_WIN32_WINNT)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\"># define _WIN32_WINNT 0x0400</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#endif</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">其实</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">自己对于宏的处理是比较严谨的，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">config-win32-common.h</span><span style=\"font-family: SimSun;\">中间就有这行定义，所以在一般而言，可以将</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的头文件包含定义放在在顶部，这样也可以避免这个编译错误。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">预定义头文件是一个良好的编程习惯，你可以将自己的大部分宏定义，</span><span lang=\"EN-US\">include</span><span style=\"font-family: SimSun;\">包含的本工程以外的外部</span><span lang=\"EN-US\">.h</span><span style=\"font-family: SimSun;\">文件。简言之就是预定义头文件中使用</span><span lang=\"EN-US\">#include&lt;&gt;</span><span style=\"font-family: SimSun;\">，表示包含工程以外文件，自己工程内部只使用</span><span lang=\"EN-US\">#include””</span><span style=\"font-family: SimSun;\">，表示包含当前工程目录下的文件。大部分</span><span lang=\"EN-US\">C/C++</span><span style=\"font-family: SimSun;\">的程序员都有过链接和一些预定义冲突错误消耗大量的时间，原来我也是如此，但是在掌握预定义头文件方法后，我几乎没有为这个问题折磨过。其实</span><span lang=\"EN-US\">Virsual C++&nbsp;</span><span style=\"font-family: SimSun;\">在生产</span><span lang=\"EN-US\">MFC</span><span style=\"font-family: SimSun;\">工程的时候，会自动帮你自动生产一个预定义头文件</span><span lang=\"EN-US\">stdafx.h</span><span style=\"font-family: SimSun;\">，只是我们不善利用而已。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">其实对于很多编译器，使用预定义头文件还可以加快编译速度。</span><span lang=\"EN-US\">Virusal C++</span><span style=\"font-family: KaiTi_GB2312;\">的预定义会生产一个</span><span lang=\"EN-US\">pch</span><span style=\"font-family: KaiTi_GB2312;\">文件，基本可以提高编译速度一倍。</span><span lang=\"EN-US\">Virusal C++</span><span style=\"font-family: KaiTi_GB2312;\">的工程中间有专门的预定义头文件设置。</span><span lang=\"EN-US\">C++ Builder</span><span style=\"font-family: KaiTi_GB2312;\">采用可以采用的编译宏（好像是专用的）加快编译速度。大致的原理是编译器会在对预定义头文件中包含的文件进行与处理，在外部文件没有发生改动的时候，编译器可以使用编译这些文件生成的中间文件加快编译速度。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t6\"></a><a name=\"_Toc208675463\"></a><a name=\"_Toc207687131\"><span lang=\"EN-US\">3<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">不要使用</span><span lang=\"EN-US\">ACE_Timer_Hash</span></a></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">有一个非常优美的定时器队列模型，他提供了</span><span lang=\"EN-US\">4</span><span style=\"font-family: SimSun;\">种定时器</span><span lang=\"EN-US\">Queue</span><span style=\"font-family: SimSun;\">让大家使用：</span><span lang=\"EN-US\">ACE_Timer_Heap</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">ACE_Timer_Wheel</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">ACE_High_Res_Timer</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">ACE_Timer_Hash</span><span style=\"font-family: SimSun;\">。在《</span><span lang=\"EN-US\">C++ Network Programming Volume 2 - Systematic Reuse with ACE and Frameworks</span><span style=\"font-family: SimSun;\">》中间有相应的说明，其中按照说明最诱人的的是：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Timer_Hash, which uses a hash table to manage the queue. Like the timing wheel implementation, the average-case time required to schedule, cancel, and expire timers is O(1) and its worst-case is O(n).</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但是遗憾的是，</span><span lang=\"EN-US\">ACE_Timer_Hash</span><span style=\"font-family: SimSun;\">其实是性能最差的。几乎不值得使用。我曾经也被诱惑过，但是在<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">测试</a>中间发现，文档中所述根本不属实，在一个大规模定时器的程序中，我使用</span><span lang=\"EN-US\">ACE_Timer_Hash</span><span style=\"font-family: SimSun;\">发现性能非常不理想，检查后发现</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的源代码如下：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class FUNCTOR, class ACE_LOCK, class BUCKET&gt; int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Timer_Hash_T&lt;TYPE, FUNCTOR, ACE_LOCK, BUCKET&gt;::expire (const ACE_Time_Value &amp;cur_time)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;// table_size_</span><span style=\"font-family: SimSun;\">为</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">的桶尺寸，如果要避免冲突，桶的数量应该尽量大，</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 27pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//</span><span style=\"font-family: SimSun;\">每个桶可以理解为一个</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">开链的链表</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//&nbsp;<a href=\"http://lib.csdn.net/base/go\" class=\"replace_word\" title=\"Go知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">Go</a>&nbsp;through the table and expire anything that can be expired</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">遍历所有的桶</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;for (size_t i = 0;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &lt; this-&gt;table_size_;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++i)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">在每个桶中检查是否有要进行超时处理的元素</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (!this-&gt;table_[i]-&gt;is_empty ()</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; this-&gt;table_[i]-&gt;earliest_time () &lt;= cur_time)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">…………</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">简单说明一下上面的代码，</span><span lang=\"EN-US\">ACE_Timer_Hash_T</span><span style=\"font-family: SimSun;\">采用开链的</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">方式，每个桶就是一个链表，在超时检查时所有的桶中是由有要进行超时处理的元素。所以在超时处理中</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">采用了遍历所有元素的方法。但悖论是如果你希望</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">的冲突不大，你就必须将桶的个数调整的尽量多。我在测试中将上述的程序的</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">替换为标准的的</span><span lang=\"EN-US\">ACE_Timer_Heap</span><span style=\"font-family: SimSun;\">，发现性能提高数百倍。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">冷静下来思考一下，这也是正常的。对于一个</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">的实现，保证查询的速度，也就是通过定时器</span><span lang=\"EN-US\">ID</span><span style=\"font-family: SimSun;\">进行操作的速度是足够快的。但是实际上对于定时器操作，最大的成本应该是寻找要超时的定时器，对于</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">这种<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">数据结构</a>，只能采用迭代遍历的方式……，</span>&nbsp;<span style=\"font-family: SimSun;\">所以采用</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">的低效是正常的。而原文应该改为</span><span lang=\"EN-US\">schedule, cancel,</span><span style=\"font-family: SimSun;\">的最好时间复杂度是</span><span lang=\"EN-US\">O(1)</span><span style=\"font-family: SimSun;\">，最差是</span><span lang=\"EN-US\">O(n),</span><span style=\"font-family: SimSun;\">而</span><span lang=\"EN-US\">expire</span><span style=\"font-family: SimSun;\">的时间复杂度始终是</span><span lang=\"EN-US\">O(n)</span><span style=\"font-family: SimSun;\">。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">这个问题在</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: KaiTi_GB2312;\">自己的文档</span><span lang=\"EN-US\"><a href=\"http://www.cs.wustl.edu/%7Eschmidt/Timer_Queue.html\"><u><font color=\"#0000ff\"><span lang=\"EN-US\" style=\"font-family: KaiTi_GB2312;\"><span lang=\"EN-US\">《</span></span>Design, Performance, and Optimization of Timer Strategies for Real-time ORBs<span lang=\"EN-US\" style=\"font-family: KaiTi_GB2312;\"><span lang=\"EN-US\">》</span></span></font></u></a></span><span style=\"font-family: KaiTi_GB2312;\">中间也有较为正确的描述。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个问题至少倒</span><span lang=\"EN-US\">5.6.1</span><span style=\"font-family: SimSun;\">的版本还是存在的。我个人估计也不会得到解决。</span><span lang=\"EN-US\">Hash</span><span style=\"font-family: SimSun;\">的特性摆在那儿呢，除非</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">采用更加复杂的数据结构。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t7\"></a><a name=\"_Toc208675464\"></a><a name=\"_Toc207687132\"><span lang=\"EN-US\">4<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">Reactor</span></a><span style=\"font-family: SimHei;\">定时器的精度取决于实现</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">在各个平台的默认实现都取决于平台的实现，比如在</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">下默认的</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">是</span><span lang=\"EN-US\">WFMO_REACTOR</span><span style=\"font-family: SimSun;\">，而在</span><span lang=\"EN-US\"><a href=\"http://lib.csdn.net/base/linux\" class=\"replace_word\" title=\"Linux知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">Linux</a></span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">UNIX</span><span style=\"font-family: SimSun;\">平台，默认的</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">是</span><span lang=\"EN-US\">Select_Reactor,</span><span style=\"font-family: SimSun;\">而</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的实现往往取决于使用的反应器底层实现，而这些反应器的时间精度就决定了你的定时器的时间精度。下表大致反馈了一些常用的定时器的实现。</span></p><p class=\"a0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm; margin-left: 0cm;\"><span lang=\"EN-US\"><span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>表1&nbsp;</span><span style=\"font-family: SimSun;\">常用</span><span lang=\"EN-US\">Raactor</span><span style=\"font-family: SimSun;\">的实现</span></p><table class=\"MsoTableGrid\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: Arial; border: medium none;\"><tbody><tr><td valign=\"top\" width=\"205\" style=\"border-width: 1pt; border-color: windowtext; padding: 0cm 5.4pt; width: 153.9pt;\"><p class=\"a3\"><span lang=\"EN-US\">Reactor</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: 1pt 1pt 1pt medium; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-top-color: windowtext; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a3\"><span style=\"font-family: SimSun;\">反应器的底层实现</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: 1pt 1pt 1pt medium; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-top-color: windowtext; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a3\"><span style=\"font-family: SimSun;\">时间精度</span></p></td></tr><tr><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 153.9pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ACE_Select_Reactor</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">select</span><span style=\"font-family: SimSun;\">函数</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">使用</span><span lang=\"EN-US\">struct timeval</span><span style=\"font-family: SimSun;\">结构进行超时处理</span><span lang=\"EN-US\">; timeval&nbsp;</span><span style=\"font-family: SimSun;\">结构可以精确倒微秒。</span></p></td></tr><tr><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 153.9pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Dev_Poll_Reactor</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">poll</span><span style=\"font-family: SimSun;\">或者而</span><span lang=\"EN-US\">epoll</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN\" style=\"color: black;\">timeout</span><span style=\"color: black; font-family: SimSun;\">参数的单位是毫秒。</span></p></td></tr><tr><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 153.9pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ACE_WFMO_REACTOR</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">WaitForMultipleObjects</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">dwMilliseconds&nbsp;</span><span style=\"font-family: SimSun;\">的参数单位是毫秒</span></p></td></tr><tr><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 153.9pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"205\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 153.95pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr></tbody></table><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">不过作为服务器的开发，我倒想不出什么地方需要精确到</span><span lang=\"EN-US\">0.1s</span><span style=\"font-family: SimSun;\">定时器的地方，了解一下差异性就足够了。</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t8\"></a><a name=\"_Toc208675465\"></a><a name=\"_Toc207687133\"><span lang=\"EN-US\">5<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">WFMO_Reactor</span></a><span style=\"font-family: SimHei;\">的与众不同</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">是</span><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">在</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">下的默认实现（为什么不选择</span><span lang=\"EN-US\">ACE_Select_Reactor</span><span style=\"font-family: SimSun;\">作为默认实现，可能是基于效率和强大性的考虑）</span><span lang=\"EN-US\">,WFMO_Reactor</span><span style=\"font-family: SimSun;\">的低层使用的函数是</span><span lang=\"EN-US\">WaitForMultipleObjects</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">WSAEventSelect</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">WSAEnumNetworkEvents</span><span style=\"font-family: SimSun;\">。其中</span><span lang=\"EN-US\">WaitForMultipleObjects</span><span style=\"font-family: SimSun;\">函数用于处理线程，互斥量，信号灯，事件，定时器等事件，而</span><span lang=\"EN-US\">WSAEventSelect</span><span style=\"font-family: SimSun;\">用于处理网络</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">Windows API</span><span style=\"font-family: SimSun;\">和操作系统的特性不一样，</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">在很多地方的表现和其他平台不一致。</span>&nbsp;<span style=\"font-family: SimSun;\">【注】</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】其实这两个问题在《</span><span lang=\"EN-US\">C++ Network Programming Volume 2 - Systematic Reuse with ACE and Frameworks</span><span style=\"font-family: KaiTi_GB2312;\">》中</span><span lang=\"EN-US\">4.4 The ACE_WFMO_Reactor Class</span><span style=\"font-family: KaiTi_GB2312;\">有说明。这儿算是借花献佛。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t9\"></a><a name=\"_Toc208675466\"></a><a name=\"_Toc207687134\"><span lang=\"EN-US\">5.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">WFMO_Reactor</span></a><span style=\"font-family: SimHei;\">只能处理</span><span lang=\"EN-US\">62</span><span style=\"font-family: SimHei;\">个句柄</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">WaitForMultipleObjects</span><span style=\"font-family: SimSun;\">不是一个处理大量事件的函数，其最多处理</span><span lang=\"EN-US\">64</span><span style=\"font-family: SimSun;\">个事件句柄，而</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">自身为了处理使用了</span><span lang=\"EN-US\">2</span><span style=\"font-family: SimSun;\">个句柄，所以一个</span><span lang=\"EN-US\">WFMO_Rector</span><span style=\"font-family: SimSun;\">对象只能处理。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">如果你想做大规模的网络接入，</span><span lang=\"EN-US\">62</span><span style=\"font-family: SimSun;\">个事件句柄显然是不够的，特别是要同时处理</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件时，导致这个不足的应该是</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">的设计者的一个选择。在赋予</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">强大的特性的同时，</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">的设计者只能让网络</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件的数量委屈一下了。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t10\"></a><a name=\"_Toc208675467\"></a><a name=\"_Toc207687135\"><span lang=\"EN-US\">5.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">WRITE_MASK</span></a><span style=\"font-family: SimHei;\">触发机制</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">WFMO_Reactor&nbsp;</span><span style=\"font-family: SimSun;\">选择的是</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">WSAEventSelect&nbsp;</span><span style=\"font-family: SimSun;\">函数作为网络的</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">的反应器。但是</span><span lang=\"EN-US\">WSAEventSelect</span><span style=\"font-family: SimSun;\">函数的</span><span lang=\"EN-US\">FD_WRITE</span><span style=\"font-family: SimSun;\">的事件处理和传统的</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">反应器（</span><span lang=\"EN-US\">select</span><span style=\"font-family: SimSun;\">）不同。下面是</span><span lang=\"EN-US\">MSDN</span><span style=\"font-family: SimSun;\">的描述。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">The FD_WRITE network event is handled slightly differently. An FD_WRITE network event is recorded when a socket is first connected with connect/WSAConnect or accepted with accept/WSAAccept, and then after a send fails with WSAEWOULDBLOCK and buffer space becomes available. Therefore, an application can assume that sends are possible starting from the first FD_WRITE network event setting and lasting until a send returns WSAEWOULDBLOCK. After such a failure, the application will find out that sends are again possible when an FD_WRITE network event is recorded and the associated event object is set.</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">简单翻译就是，只有在三种条件下，</span><span lang=\"EN-US\">WSAEventSelect</span><span style=\"font-family: SimSun;\">才会发出</span><span lang=\"EN-US\">FD_WRITE</span><span style=\"font-family: SimSun;\">通知，一是使用</span><span lang=\"EN-US\">connect</span><span style=\"font-family: SimSun;\">或</span><span lang=\"EN-US\">WSAConnect</span><span style=\"font-family: SimSun;\">，一个套接字成功建立连接后；二是使用</span><span lang=\"EN-US\">accept</span><span style=\"font-family: SimSun;\">或</span><span lang=\"EN-US\">WSAAccept</span><span style=\"font-family: SimSun;\">，套接字被接受以后；三是若</span><span lang=\"EN-US\">send</span><span style=\"font-family: SimSun;\">、</span><span lang=\"EN-US\">WSASend</span><span style=\"font-family: SimSun;\">、</span><span lang=\"EN-US\">sendto</span><span style=\"font-family: SimSun;\">或</span><span lang=\"EN-US\">WSASendTo</span><span style=\"font-family: SimSun;\">函数返回失败，而且错误是</span><span lang=\"EN-US\">WSAEWOULDBLOCK</span><span style=\"font-family: SimSun;\">错误后，缓冲区的空间再次变得可用时。【注】</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】这种触发方式在</span><span lang=\"EN-US\">IO</span><span style=\"font-family: KaiTi_GB2312;\">反应器或者说</span><span lang=\"EN-US\">IO</span><span style=\"font-family: KaiTi_GB2312;\">多路复用模型中应该被称为边缘触发方式。</span><span lang=\"EN-US\">select</span><span style=\"font-family: KaiTi_GB2312;\">函数好像没有这种触发方式而是水平触发方式，</span>&nbsp;<span lang=\"EN-US\">Epoll</span><span style=\"font-family: KaiTi_GB2312;\">是支持这种方式的，但是默认还是水平触发，这种方式可能有更高的效率，但是代码更加难写。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">可以这么理解，</span><span lang=\"EN-US\">WSAEventSelect</span><span style=\"font-family: SimSun;\">认为套接字基本都是可写状态，它认为你应该大胆</span><span lang=\"EN-US\">send</span><span style=\"font-family: SimSun;\">。只有</span><span lang=\"EN-US\">send</span><span style=\"font-family: SimSun;\">出现</span><span lang=\"EN-US\">WSAEWOULDBLOCK</span><span style=\"font-family: SimSun;\">失败后，你才需要使用</span><span lang=\"EN-US\">WSAEventSelect</span><span style=\"font-family: SimSun;\">反应器。【注】</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以对于</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">的，你不可能依靠注册（或者是唤醒）</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">句柄进行写操作，</span><span lang=\"EN-US\">WMFO_Reactor</span><span style=\"font-family: SimSun;\">很有可能不会去回调你的</span><span lang=\"EN-US\">handle_output</span><span style=\"font-family: SimSun;\">函数。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】对于网络套接字，只要缓冲区还有空间就可以直接发送，除非缓冲区没有空间了，才可能出现阻塞错误，所以直接</span><span lang=\"EN-US\">send</span><span style=\"font-family: KaiTi_GB2312;\">失败的可能性很小，另外反复调用注册</span><span lang=\"EN-US\">IO</span><span style=\"font-family: KaiTi_GB2312;\">句柄一类的操作其实是比较耗时的。其实先</span><span lang=\"EN-US\">send</span><span style=\"font-family: KaiTi_GB2312;\">，如果</span><span lang=\"EN-US\">send</span><span style=\"font-family: KaiTi_GB2312;\">失败再注册</span><span lang=\"EN-US\">IO</span><span style=\"font-family: KaiTi_GB2312;\">句柄到反应器的方式应该是一种更加高效的方式，高压力的通讯服务器应该选择这个编写方式。</span></p><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">我自己的通信服务器通过这个改造，提高的性能在</span><span lang=\"EN-US\">15%</span><span style=\"font-family: KaiTi_GB2312;\">左右（</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: KaiTi_GB2312;\">占用率下降）。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">的这些特点，其实很大的限制了</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的可移植性。其实个人感觉如果你对系统特性没有那么多要求，在</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">下选择</span><span lang=\"EN-US\">Select_Reactor</span><span style=\"font-family: SimSun;\">替换</span><span lang=\"EN-US\">WFMO_Reactor</span><span style=\"font-family: SimSun;\">是更好的选择。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t11\"></a><a name=\"_Toc208675468\"></a><a name=\"_Toc207687136\"><span lang=\"EN-US\">6<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">尽量使用</span><span lang=\"EN-US\">ID</span></a><span style=\"font-family: SimHei;\">取消</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimHei;\">定时器</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">Reactor&nbsp;</span><span style=\"font-family: SimSun;\">提供了两种方式取消定时器：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">virtual int cancel_timer (ACE_Event_Handler *event_handler,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dont_call_handle_close = 1);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">virtual int cancel_timer (long timer_id,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void **arg = 0,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dont_call_handle_close = 1);</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">一种是使用定时器</span><span lang=\"EN-US\">ID</span><span style=\"font-family: SimSun;\">取消定时器，这个</span><span lang=\"EN-US\">ID</span><span style=\"font-family: SimSun;\">是定时器是的返回值，一种是采用相应的</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">指针取消定时器。一般情况下使用</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">的指针取消定时器无疑是最简单的方法，但是这个方法却不是一个高效的实现。所以如果您的程序有大规模的定时器设置取消操作，建议尽量使用</span><span lang=\"EN-US\">ID</span><span style=\"font-family: SimSun;\">取消定时器。我们用</span><span lang=\"EN-US\">ACE_Timer_Heap</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">ACE_Timer_Has</span><span style=\"font-family: SimSun;\">两个</span><span lang=\"EN-US\">Timer_Queue</span><span style=\"font-family: SimSun;\">剖析一下。</span><i><span lang=\"EN-US\"></span></i></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t12\"></a><a name=\"_Toc208675469\"></a><a name=\"_Toc207687137\"><span lang=\"EN-US\">6.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE_Timer_Heap</span></a><span style=\"font-family: SimHei;\">如何根据</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimHei;\">取消</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">先选择最常用的</span><span lang=\"EN-US\">Time_Queue ACE_Timer_Heap</span><span style=\"font-family: SimSun;\">举例，其使用</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">关闭定时器的代码是：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class FUNCTOR, class ACE_LOCK&gt; int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Timer_Heap_T&lt;TYPE, FUNCTOR, ACE_LOCK&gt;::cancel (const TYPE &amp;type,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dont_call)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;// Try to locate the ACE_Timer_Node that matches the timer_id.</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">循环比较所有的的</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">的指针是否相同</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;for (size_t i = 0; i &lt; this-&gt;cur_size_; )</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this-&gt;heap_[i]-&gt;get_type () == type)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">………………</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 22.5pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">而使用</span><span lang=\"EN-US\">TIMER_ID</span><span style=\"font-family: SimSun;\">关闭的代码如下，它是通过数组下标进行的定位操作。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class FUNCTOR, class ACE_LOCK&gt; int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Timer_Heap_T&lt;TYPE, FUNCTOR, ACE_LOCK&gt;::cancel (long timer_id,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void **act,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dont_call)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">通过数组下标操作，速度当然奇快无比。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;ssize_t timer_node_slot = this-&gt;timer_ids_[timer_id];</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">跟进数组</span><span lang=\"EN-US\">ID</span><span style=\"font-family: SimSun;\">进行操作</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_Timer_Node_T&lt;TYPE&gt; *temp =</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;remove (timer_node_slot);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">对于</span><span lang=\"EN-US\">ACE_Timer_Heap</span><span style=\"font-family: SimSun;\">，采用</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">指针取消定时器的方式的平均时间复杂度应该就是</span><span lang=\"EN-US\">O(N)</span><span style=\"font-family: SimSun;\">。由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的的一个</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">可能对应多个定时器，所以必须检查所有的才能确保取消所有的相关定时器。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t13\"></a><a name=\"_Toc208675470\"></a><a name=\"_Toc207687138\"><span lang=\"EN-US\">6.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE_Timer_Hash</span></a><span style=\"font-family: SimHei;\">如何根据</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimHei;\">取消</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">对于</span><span lang=\"EN-US\">Timer_Hash</span><span style=\"font-family: SimSun;\">，其通过</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">关闭定时器的代码是：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class FUNCTOR, class ACE_LOCK, class BUCKET&gt; int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Timer_Hash_T&lt;TYPE, FUNCTOR, ACE_LOCK, BUCKET&gt;::cancel (const TYPE &amp;type,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dont_call)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;Hash_Token&lt;TYPE&gt; **timer_ids = 0;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">根据</span><span lang=\"EN-US\">Event Handler</span><span style=\"font-family: SimSun;\">有一个定时器</span><span lang=\"EN-US\">new</span><span style=\"font-family: SimSun;\">一个数组出来</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;ACE_NEW_RETURN (timer_ids,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hash_Token&lt;TYPE&gt; *[this-&gt;size_],</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;size_t pos = 0;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">根据定时器的个数再进行取消</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;for (i = 0;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &lt; this-&gt;table_size_;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++i)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_Timer_Queue_Iterator_T&lt;TYPE,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_Timer_Hash_Upcall&lt;TYPE, FUNCTOR, ACE_LOCK&gt;,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_Null_Mutex&gt; &amp;iter =</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;table_[i]-&gt;iter ();</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">可以看到</span><span lang=\"EN-US\">Timer_Hash</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">cancel</span><span style=\"font-family: SimSun;\">比</span><span lang=\"EN-US\">ACE_Timer_Heap</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">cancel</span><span style=\"font-family: SimSun;\">（</span><span lang=\"EN-US\">Event_Handler</span><span style=\"font-family: SimSun;\">）要好一点点。但是其中也有</span><span lang=\"EN-US\">new</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">delete</span><span style=\"font-family: SimSun;\">操作，这些操作也不是高效操作。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以说在大规模的定时器使用中，推荐你还是使用定时器的</span><span lang=\"EN-US\">ID</span><span style=\"font-family: SimSun;\">取消定时器更加高效的多。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t14\"></a><a name=\"_Toc208675471\"></a><a name=\"_Toc207687139\"><span lang=\"EN-US\">7<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">注意</span><span lang=\"EN-US\">ACE_Pipe</span></a><span style=\"font-family: SimHei;\">的实现</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">是一个跨平台的管道实现。标准情况来讲，采用的实现，但是在最大的两个平台</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">Linux</span><span style=\"font-family: SimSun;\">上，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的实现是采用的</span><span lang=\"EN-US\">Socket</span><span style=\"font-family: SimSun;\">实现。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Pipe::open (int buffer_size)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;ACE_TRACE (\"ACE_Pipe::open\");</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#if defined (ACE_LACKS_SOCKETPAIR) || defined (__Lynx__)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">绑定了一个本地端口，</span><span lang=\"EN-US\">0.0.0</span><span lang=\"EN-US\">.0</span><span style=\"font-family: SimSun;\">，然后找到相应的端口，用于后面的链接</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;if (acceptor.open (local_any) == -1</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| acceptor.get_local_addr (my_addr) == -1)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;result = -1;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Establish a connection within the same process.</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (connector.connect (writer, sv_addr) == -1)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = -1;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">……</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以很多管道特性所特有的东西，在这两个平台上是无法使用</span><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">实现的。比如，管道的特性可以保证在暂时没有接受者的情况下使用，而</span><span lang=\"EN-US\">Socket</span><span style=\"font-family: SimSun;\">是不可能有这个特性的。你必须保证先有接受者，后有发送者的时序。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以在这些平台上最好不用这个封装。</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t15\"></a><a name=\"_Toc208675472\"></a><a name=\"_Toc207687140\"><span lang=\"EN-US\">8<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">慎用</span><span lang=\"EN-US\">Reactor Notify</span></a><span style=\"font-family: SimHei;\">机制</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">在</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的模式，有一种辅助的通知机制</span><span lang=\"EN-US\">,Notify</span><span style=\"font-family: SimSun;\">机制，简单说就是通过通知发起者调用</span><span lang=\"EN-US\">notify</span><span style=\"font-family: SimSun;\">函数，</span><span lang=\"EN-US\">notify</span><span style=\"font-family: SimSun;\">的消息被保存在一个管道中，</span><span lang=\"EN-US\">handle_event</span><span style=\"font-family: SimSun;\">的处理中会检查这个管道中是否有通知数据，如果有就根据通知的消息，会根据默认的通知消息的类型去调用</span><span lang=\"EN-US\">hanle_input</span><span style=\"font-family: SimSun;\">等函数。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">从设计的角度将，这个机制无疑是非常优美的，对于</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">，它在</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">驱动以外，提供了一种新的驱动方式。但是从实现角度来讲，这个机制要慎用。原因有两个。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t16\"></a><a name=\"_Toc208675473\"></a><a name=\"_Toc207687141\"><span lang=\"EN-US\">8.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE Reactor</span></a><span style=\"font-family: SimHei;\">的默认</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimHei;\">方式采用的是</span><span lang=\"EN-US\">ACE_Pipe</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE Reactor</span><span style=\"font-family: SimSun;\">的默认</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">方式采用的是</span><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">，所以</span><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">在</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">Linux</span><span style=\"font-family: SimSun;\">平台上的问题，</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">机制把</span><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">的缺陷一个不少的继承了，而且问题更加多。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;/**</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;* Contains the ACE_HANDLE the ACE_Dev_Poll_Reactor is listening</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;* on, as well as the ACE_HANDLE that threads wanting the attention</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;* of the ACE_Dev_Poll_Reactor will write to.</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*/</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;ACE_Pipe notification_pipe_;</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">原来在调试</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">代码的时候，我发现只要一使用</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">，即使只使用定时器（除非明确不使用</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">），防火墙都会报警有监听端口。我曾经对此大惑不解，直到读了</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的这部分原代码。这样做的坏处有很多。第一个是由于采用的阻塞</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">。速度会慢很多，第二个由于是单线程的处理，如果在压力极大的情况下，可能出现死锁的问题。比如在有大规模的</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">的情况下，发送缓冲区很可能会被塞满（由于是单线程，这时不会有接受者），同时由于为了简化，</span><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">采用的</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">是阻塞的，所以会导致整个程序死锁。第三就是这样的情况下</span><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">会打开一个临时的端口，而且会绑定所有的</span><span lang=\"EN-US\">IP</span><span style=\"font-family: SimSun;\">（</span><span lang=\"EN-US\">0.0.0</span><span lang=\"EN-US\">.0</span><span style=\"font-family: SimSun;\">），如果对于一个安全要求严格的的场景，这个将是一个不可饶恕的错误。【注】</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】在一个安全要求严格的环境下，这个临时端口轻则可以让你的服务器轻易陷于崩溃，重则可以让你整个网络被黑客攻陷。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">不过还好的是</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的开发者估计自己也意识倒了这个麻烦。所以提供了另外一种消息队列的方式。你可以通过定义</span><span lang=\"EN-US\">ACE_HAS_REACTOR_NOTIFICATION_QUEUE</span><span style=\"font-family: SimSun;\">的宏编译</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">，这样</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">将不使用</span><span lang=\"EN-US\">ACE_Pipe</span><span style=\"font-family: SimSun;\">作为</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">消息的管道，而使用一个自己的内存队列保存</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">消息，这个队列是动态扩展的。而且由于是内存操作，性能方面没有太大问题。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">大体位置在重复编译的卫哨后面，</span><span lang=\"EN-US\">#include /**/ \"ace/pre.h\"</span><span style=\"font-family: KaiTi_GB2312;\">前面。保证这个宏起到作用。</span></p><p class=\"a2\"><span lang=\"EN-US\">#ifndef ACE_CONFIG_LINUX_H</span></p><p class=\"a2\"><span lang=\"EN-US\">#define ACE_CONFIG_LINUX_H</span></p><p class=\"a2\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a2\"><span lang=\"EN-US\">//</span><span style=\"font-family: KaiTi_GB2312;\">使用内存队列作为</span><span lang=\"EN-US\">Notify Queue</span></p><p class=\"a2\"><span lang=\"EN-US\">#define ACE_HAS_REACTOR_NOTIFICATION_QUEUE</span></p><p class=\"a2\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a2\"><span lang=\"EN-US\">#include /**/ \"ace/pre.h\"</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个问题到</span><span lang=\"EN-US\">5.6.1</span><span style=\"font-family: SimSun;\">还是存在的，估计由于历史的原因，在很长一段时间也不会得到解决。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t17\"></a><a name=\"_Toc208675474\"></a><a name=\"_Toc207687142\"><span lang=\"EN-US\">8.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">考虑不周的</span><span lang=\"EN-US\">Reactor Notify</span></a><span style=\"font-family: SimHei;\">机制</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">同上，这也应该是一个</span><span lang=\"EN-US\">BUG</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">Reactor Notify</span><span style=\"font-family: SimSun;\">的代码有考虑不周的地方。</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">机制的本质是提供了一条消息队列让大家有方法调用</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">，但是存在一种可能，在你的通知消息在消息队列的时候，</span><span lang=\"EN-US\">Event_hanlder</span><span style=\"font-family: SimSun;\">由于后面的处理可能已经</span><span lang=\"EN-US\">handle_close</span><span style=\"font-family: SimSun;\">了。但是</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">dispatch_notify</span><span style=\"font-family: SimSun;\">却没有考虑倒这一点（或者说考虑倒这一点也不好解决）。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_Select_Reactor_Notify::dispatch_notify</span><span style=\"font-family: SimSun;\">函数的代码。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Select_Reactor_Notify::dispatch_notify (ACE_Notification_Buffer &amp;buffer)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span style=\"font-family: SimSun;\">…………</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 22.5pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Event_Handler *event_handler =</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer.eh_;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool const requires_reference_counting =</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event_handler-&gt;reference_counting_policy ().value () ==</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_Event_Handler::Reference_Counting_Policy::ENABLED;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">如果此时这个</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">已经被</span><span lang=\"EN-US\">handle_close</span><span style=\"font-family: SimSun;\">了，你如何是好。。。。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (buffer.mask_)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ACE_Event_Handler::READ_MASK:</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ACE_Event_Handler::ACCEPT_MASK:</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = event_handler-&gt;handle_input (ACE_INVALID_HANDLE);</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个</span><span lang=\"EN-US\">bug</span><span style=\"font-family: SimSun;\">到</span><span lang=\"EN-US\">5.6.1</span><span style=\"font-family: SimSun;\">还没有解决。我觉得这个问题是可以解决的（暂时还没有提</span><span lang=\"EN-US\">BUG</span><span style=\"font-family: SimSun;\">），但是得到解决的方式却仍然是低效的方案（还记得取消定时器的那个缺陷吗）。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">如果你仔细看过上面的几节，你也许会发出惊叹，啊，又是</span><span lang=\"EN-US\">Reactor Notify</span><span style=\"font-family: SimSun;\">？对，又是它。看起来我好像一直在和</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">机制在做对，但它的确让我吃了无数的苦头。这部分的设计的确有一点画蛇添足的感觉，而且由于跨平台性等原因，这个东东的实现一直不如意。其实自己使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的实现（比如</span><span lang=\"EN-US\">Message_Queue</span><span style=\"font-family: SimSun;\">）一套这样的机制应该是易如反掌的事情。不苛求了。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">如果你用不到</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">机制，最好在</span><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">初始化的时候彻底关闭</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">机制。很多</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的初始化函数都提供了关闭</span><span lang=\"EN-US\">notify pipe</span><span style=\"font-family: SimSun;\">的方式。比如</span><span lang=\"EN-US\">ACE_Select_Reactor_T</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">open</span><span style=\"font-family: SimSun;\">函数的</span><span lang=\"EN-US\">disable_notify_pipe</span><span style=\"font-family: SimSun;\">参数。当其为</span><span lang=\"EN-US\">1</span><span style=\"font-family: SimSun;\">的时候表示关闭</span><span lang=\"EN-US\">notify&nbsp;</span><span style=\"font-family: SimSun;\">管道。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//disable_notify_pipe</span><span style=\"font-family: SimSun;\">参数为</span><span lang=\"EN-US\">1</span><span style=\"font-family: SimSun;\">时表示关闭</span><span lang=\"EN-US\">NOTIFY PIPE</span><span style=\"font-family: SimSun;\">，不使用他</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class ACE_SELECT_REACTOR_TOKEN&gt; int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Select_Reactor_T&lt;ACE_SELECT_REACTOR_TOKEN&gt;::open</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;(size_t size,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;int restart,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;ACE_Sig_Handler *sh,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;ACE_Timer_Queue *tq,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;int disable_notify_pipe, /*&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">等于</span><span lang=\"EN-US\">==1</span><span style=\"font-family: SimSun;\">表示关闭</span><span lang=\"EN-US\">notify</span><span style=\"font-family: SimSun;\">机制</span><span lang=\"EN-US\">&nbsp;*/</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;ACE_Reactor_Notify *notify)</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial; margin-left: 22pt; text-indent: -22pt;\"><a name=\"t18\"></a><a name=\"_Toc208675475\"></a><a name=\"_Toc207687143\"><span lang=\"EN-US\">9<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE_Dev_Poll_Reactor</span></a><span style=\"font-family: SimHei;\">的处理优先级严重偏向定时器</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">不使用</span><span lang=\"EN-US\">POLL</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">【注】</span><span style=\"font-family: SimSun;\">的人，估计不太知道这个</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE_Dev_Poll_Reactor</span><span style=\"font-family: SimSun;\">，但实际上。特别是</span><span lang=\"EN-US\">Linux</span><span style=\"font-family: SimSun;\">下的</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-family: SimSun;\">（一个</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">多路服用模型），这是</span><span lang=\"EN-US\">Linux</span><span style=\"font-family: SimSun;\">大规模接入的重要法宝，从目前的表现来看，其他平台上还没有可以超越</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-family: SimSun;\">的东西，</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">下的异步</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">的性能也还远远逊于</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-family: SimSun;\">。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">如果要使用</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-family: KaiTi_GB2312;\">而不是</span><span lang=\"EN-US\">POLL</span><span style=\"font-family: KaiTi_GB2312;\">，要使用宏</span><span lang=\"EN-US\">ACE_HAS_EVENT_POLL</span><span style=\"font-family: KaiTi_GB2312;\">编译</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: KaiTi_GB2312;\">，大体位置在重复编译的卫哨后面，</span><span lang=\"EN-US\">#include /**/ \"ace/pre.h\"</span><span style=\"font-family: KaiTi_GB2312;\">前面。保证起到作用。</span></p><p class=\"a2\"><span lang=\"EN-US\">#ifndef ACE_CONFIG_LINUX_H</span></p><p class=\"a2\"><span lang=\"EN-US\">#define ACE_CONFIG_LINUX_H</span></p><p class=\"a2\"><span lang=\"EN-US\">// ACE_HAS_EVENT_POLL</span><span style=\"font-family: KaiTi_GB2312;\">宏用于定义使用</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-family: KaiTi_GB2312;\">模块，同时注意不同</span><span lang=\"EN-US\">LINUX</span><span style=\"font-family: KaiTi_GB2312;\">平台下编译可能有少量</span></p><p class=\"a2\"><span lang=\"EN-US\">//</span><span style=\"font-family: KaiTi_GB2312;\">不同。我曾经使用过的一个内核</span><span lang=\"EN-US\">2.4</span><span style=\"font-family: KaiTi_GB2312;\">的</span><span lang=\"EN-US\">Slackware</span><span style=\"font-family: KaiTi_GB2312;\">平台，要在编译</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: KaiTi_GB2312;\">的时候加入</span>&nbsp;<span lang=\"EN-US\">–lepoll</span><span style=\"font-family: KaiTi_GB2312;\">，可能是由于</span></p><p class=\"a2\"><span lang=\"EN-US\">//</span><span style=\"font-family: KaiTi_GB2312;\">其是打补丁增加的功能</span></p><p class=\"a2\"><span lang=\"EN-US\">#define ACE_HAS_EVENT_POLL</span></p><p class=\"a2\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a2\"><span lang=\"EN-US\">#include /**/ \"ace/pre.h\"</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但也许是由于这个东西过新还是由于设计者是一个定于时间要求很敏感的人。的设计明显的是定时器优先。但是了解</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">POLL</span><span style=\"font-family: SimSun;\">的人都知道，</span><span lang=\"EN-US\">UNIX</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">Linux</span><span style=\"font-family: SimSun;\">设计这两个咚咚的目的就是解决大规模</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">复用。不是为了保证定时器优先，所以我对这个设计很是不解，郁闷。其大体思路为，</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">1.)&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">先检查定时器超时的队列，计算最小的超时时间，用于</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">等待。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">2.)&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">触发</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">3.)&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">处理超时的</span><span lang=\"EN-US\">Handler</span><span style=\"font-family: SimSun;\">，如果有超时的事件，返回（</span><span lang=\"EN-US\">1</span><span style=\"font-family: SimSun;\">）。这点我看得最郁闷。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">4.)&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">再分发处理</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">可以看到在处理超时句柄的时候，</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE_Dev_Poll_Reactor</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">发现有超时的事件会返回到检查超时队列。所以如果在</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">Reactor</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">同时有定时处理，</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">IO</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">的优先级会很低。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">其实这个的设计者也知道这个问题。他在代码中间做了如下的记录。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Dev_Poll_Reactor::dispatch (Token_Guard &amp;guard)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;// Handle timers early since they may have higher latency</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;// constraints than I/O handlers.&nbsp;&nbsp;Ideally, the order of</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;// dispatching should be a strategy...</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;if ((result = this-&gt;dispatch_timer_handler (guard)) != 0)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;return result;</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">EPOLL</span><span style=\"font-family: SimSun;\">的特性，使用它大部分都是为了处理大规模的</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">请求，定时器其实只有少量的需求，不是我们需求的重点。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个问题到最近的</span><span lang=\"EN-US\">5.6.1</span><span style=\"font-family: SimSun;\">版本没有得到解决。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">我曾经反馈过这个问题。但是得到没有明确的解答。解决这个问题的方法其实也很简单，自己重载这个类，然后自己实现相应的函数。触发</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件后立即分发</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件，而且加入了一个</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">的优先级别。在多次</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">处理的循环后在进入时间事件处理。保证时间处理的粒度在</span><span lang=\"EN-US\">1s</span><span style=\"font-family: SimSun;\">以内基本就可以了。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t19\"></a><a name=\"_Toc208675476\"></a><a name=\"_Toc207687144\"><span lang=\"EN-US\">10<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">Event_Handler</span></a><span style=\"font-family: SimHei;\">在程序退出前应该自己关闭</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">在程序退出的【注】，我们往往不会自己关闭</span><span lang=\"EN-US\">Event_Handler</span><span style=\"font-family: SimSun;\">，而寄希望</span><span lang=\"EN-US\">Reactor&nbsp;</span><span style=\"font-family: SimSun;\">的清理。但是实际情况会复杂很多。使用的时候必须当心。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】是否要在退出的时候清理所有分配的内存？在普通的操作系统中，程序的退出会回收所有的分配内存。所以很多人会逃避在最后阶段的清理分配的内存。但是这实在不是一个良好的喜欢。一方面对于很多</span><span lang=\"EN-US\">OS</span><span style=\"font-family: KaiTi_GB2312;\">（比如嵌入系统）不会回收内存资源，一些内核资源（</span><span lang=\"EN-US\">UNIX</span><span style=\"font-family: KaiTi_GB2312;\">）也不会在进程退出后释放，编程就应该要养成清理的好习惯，更何况不进行释放在内存检查的软件一般会报错，如果不清理会干扰我们对于内存泄露的定位。</span></p></div><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t20\"></a><a name=\"_Toc208675477\"></a><a name=\"_Toc207687145\"><span lang=\"EN-US\">10.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">Reactor</span></a><span style=\"font-family: SimHei;\">的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimHei;\">可能不会关闭</span><span lang=\"EN-US\">Event_Handler</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">理论上讲，</span><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">提供了一个</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">函数，所有的</span><span lang=\"EN-US\">Event_Handler</span><span style=\"font-family: SimSun;\">应该统一在这个函数进行关闭。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">采用的是模式，封装了不同</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的实现。这些实现的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">函数未存在一定的差异性。就我的阅读和尝试来看，</span><span lang=\"EN-US\">Select_Reactor</span><span style=\"font-family: SimSun;\">在</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">函数关闭了所有的</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">句柄相关的</span><span lang=\"EN-US\">Event_Handler</span><span style=\"font-family: SimSun;\">，而</span><span lang=\"EN-US\">Dev_Poll_Reactor</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">实现就没有关闭。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">Select_Reactor</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">代码。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class ACE_SELECT_REACTOR_TOKEN&gt; int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Select_Reactor_T&lt;ACE_SELECT_REACTOR_TOKEN&gt;::close (void)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">在</span><span lang=\"EN-US\">handler_rep</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">函数会关闭所有的</span><span lang=\"EN-US\">register</span><span style=\"font-family: SimSun;\">的句柄的</span><span lang=\"EN-US\">handler</span><span style=\"font-family: SimSun;\">，调用他们的</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//handle_close</span><span style=\"font-family: SimSun;\">函数</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;this-&gt;handler_rep_.close ();</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">Dev_Poll_Reactor</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">的调用了函数</span><span lang=\"EN-US\">ACE_Dev_Poll_Reactor_Handler_Repository::close</span><span style=\"font-family: SimSun;\">，而后有逐步调用了</span><span lang=\"EN-US\">unbind_all</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">remove_reference</span><span style=\"font-family: SimSun;\">。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//close</span><span style=\"font-family: SimSun;\">会经过多级调用到</span><span lang=\"EN-US\">ACE_Dev_Poll_Reactor_Handler_Repository:: unbind_all</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//unbind</span><span style=\"font-family: SimSun;\">被</span><span lang=\"EN-US\">unbind_all</span><span style=\"font-family: SimSun;\">函数调用</span><span lang=\"EN-US\">decr_refcnt == true</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Dev_Poll_Reactor_Handler_Repository::unbind (ACE_HANDLE handle,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool decr_refcnt)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;// remove_reference</span><span style=\"font-family: SimSun;\">函数没有调用</span><span lang=\"EN-US\">handle_close</span><span style=\"font-family: SimSun;\">，而是减去了引用计数</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;if (decr_refcnt)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;handlers_[handle].event_handler-&gt;remove_reference ();</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Event_Handler::Reference_Count</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Event_Handler::remove_reference (void)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">如果打开了引用计数，则使用应用计数方式管理方式。但是代码默认不采用应用计数模式</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">所以下面的代码都无法执行</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;if (reference_counting_required)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 36pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//</span><span style=\"font-family: SimSun;\">减去引用计数</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reference_Count result =</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--this-&gt;reference_count_;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">如果已经没用引用个数了，删除自己。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (result == 0)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete this;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">可以看到</span><span lang=\"EN-US\">ACE_Event_Handler</span><span style=\"font-family: SimSun;\">的代码默认不采用应用计数模式，（</span><span lang=\"EN-US\">eference_counting_required</span><span style=\"font-family: SimSun;\">默认为</span><span lang=\"EN-US\">DISABLED</span><span style=\"font-family: SimSun;\">）而</span><span lang=\"EN-US\">Dev_Poll_Reactor</span><span style=\"font-family: SimSun;\">却非要使用引用计数模式去清理</span><span lang=\"EN-US\">Event_Handler</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">我对</span><span lang=\"EN-US\">Dev_Poll_Reactor</span><span style=\"font-family: SimSun;\">为什么要设计成这样表示不解。也对</span><span lang=\"EN-US\">Dev_Poll_Reactor</span><span style=\"font-family: SimSun;\">提交过</span><span lang=\"EN-US\">BUG</span><span style=\"font-family: SimSun;\">，但是</span><span lang=\"EN-US\">Dev_Poll_Reactor</span><span style=\"font-family: SimSun;\">的开发者不认为这样有什么不妥，本人</span><span lang=\"EN-US\">E</span><span style=\"font-family: SimSun;\">文羞涩，无法说服具体的开发人员，不过在提交</span><span lang=\"EN-US\">BUG</span><span style=\"font-family: SimSun;\">时，居然得到了</span><span lang=\"EN-US\">Douglas</span><span style=\"font-family: SimSun;\">反馈（他开始时认同我的看法），对于他们的执着和认真还是表示敬仰。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t21\"></a><a name=\"_Toc208675478\"></a><a name=\"_Toc207687146\"><span lang=\"EN-US\">10.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">可能会导致重复释放引发</span><span lang=\"EN-US\">Coredump</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个问题是在工作中调试一个</span><span lang=\"EN-US\">BUG</span><span style=\"font-family: SimSun;\">出现的。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">在测试一个服务器的时候发现</span><span lang=\"EN-US\">Coredump</span><span style=\"font-family: SimSun;\">发生</span><span lang=\"EN-US\">kill</span><span style=\"font-family: SimSun;\">进程，让其退出在之后，会出现</span><span lang=\"EN-US\">Coredump</span><span style=\"font-family: SimSun;\">文件。</span><span lang=\"EN-US\">Coredump</span><span style=\"font-family: SimSun;\">显示出现问题的地方在。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 0cm; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#1&nbsp;&nbsp;0x0805bc7b in ~ACE_Timer_Heap_T (this=0x82d3ec8) at /usr/local/ACE_wrappers/ace/Timer_Queue_T.cpp:442</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 0cm; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#2&nbsp;&nbsp;0x0805b86d in ~ACE_Singleton (this=0x82cca70) at egg_application.cpp:52</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 0cm; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#3&nbsp;&nbsp;0x08056785 in ACE_Singleton&lt;EggSvrdAppliction, ACE_Null_Mutex&gt;::cleanup (this=0x82dfb90)</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于希望改变</span><span lang=\"EN-US\">ACE_Time_Queue</span><span style=\"font-family: SimSun;\">的特性（数量），我替换</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的默认</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">，所以必须自己销毁自己管理的</span><span lang=\"EN-US\">TimeQueue</span><span style=\"font-family: SimSun;\">。而在外部最后销毁的时候出现</span><span lang=\"EN-US\">Coredump</span><span style=\"font-family: SimSun;\">。由于和</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">相关，我检查了所有的</span><span lang=\"EN-US\">Timer</span><span style=\"font-family: SimSun;\">相关的</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">，发现有一个</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">没有自己主动调用</span><span lang=\"EN-US\">handler_close</span><span style=\"font-family: SimSun;\">释放，这个</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">只有定时器，没有注册任何</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">事件。修改代码为主动释放后，再次测试就发现</span><span lang=\"EN-US\">Coredump</span><span style=\"font-family: SimSun;\">的问题得到解决。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">我检查了一下原有代码堆栈的调用顺序，找到了问题原因。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">(1)ACE_Reactor::close</span><span style=\"font-family: SimSun;\">，实际调用</span><span lang=\"EN-US\">ACE_Select_Reactor::close</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">(2) Select_Reactor::close&nbsp;</span><span style=\"font-family: SimSun;\">尝试关闭所有的</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">句柄相关的</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">，但由于</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">是外部传入的参数，所以不清理</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">(3)Time_Queue</span><span style=\"font-family: SimSun;\">清理，</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">的析构函数被调用，</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">的析构函数会释放所有的定时器相关的</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">。而他的释放还会调用</span><span lang=\"EN-US\">hanlder_close</span><span style=\"font-family: SimSun;\">。但是这是</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">对象已经销毁了。所以造成了</span><span lang=\"EN-US\">Coredump</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">注意由于</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的封装了</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">定时器，</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">句柄，</span><span lang=\"EN-US\">Notify</span><span style=\"font-family: SimSun;\">机制等回调接口。所以</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">可能只关联到</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">句柄，也可能只关联定时器，同时</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的模型决定了他的内部管理是复杂的。而在释放的过程中很可能会发生交错的问题，而，像上面问题的</span><span lang=\"EN-US\">Event_handler</span><span style=\"font-family: SimSun;\">就只关联的定时器，所以在</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">的时候没有关闭。从而导致在后面的清理工作中产生时序问题。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">最简单的方式还是自己在程序退出前清理释放所有的</span><span lang=\"EN-US\">Event_handler.</span><span style=\"font-family: SimSun;\">再调用</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t22\"></a><a name=\"_Toc208675479\"></a><a name=\"_Toc207687147\"><span lang=\"EN-US\">11<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">调整系统时钟导致</span><span lang=\"EN-US\">ACE</span></a><span style=\"font-family: SimHei;\">定时器丢失</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于我们采用的服务器一般都是靠纽扣电池作为能源驱动和记录时钟，一般在运行一段时间后都会出现时间误差。所以很多大规模的分布系统都有校时操作，特别是一些对时钟要求精确的分布式系统（比如计费等），往往都会有一个主机提供精确时钟服务（其可能采用</span><span lang=\"EN-US\">GPS</span><span style=\"font-family: SimSun;\">校时），其他服务器通过这台服务器校时，校时操作一般都是直接改变系统时钟。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的定时器都是采用</span><span lang=\"EN-US\">Event_Handler</span><span style=\"font-family: SimSun;\">进行处理，而</span><span lang=\"EN-US\">Event_Handler</span><span style=\"font-family: SimSun;\">一般而言都是采用绝对时间作为记录超时的时间戳，但是绝对时间的方式在系统时钟被调整的时候，会导致“丢失”部分定时器的处理，导致一些问题。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">在设置定时器时，</span><span lang=\"EN-US\">schedule_timer</span><span style=\"font-family: SimSun;\">函数通过</span><span lang=\"EN-US\">gettimeofday</span><span style=\"font-family: SimSun;\">得到定时器时间点的时间。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class ACE_SELECT_REACTOR_TOKEN&gt; long</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Select_Reactor_T&lt;ACE_SELECT_REACTOR_TOKEN&gt;::schedule_timer</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;(ACE_Event_Handler *handler,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;const void *arg,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;const ACE_Time_Value &amp;delay_time,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;const ACE_Time_Value &amp;interval)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;// schedule_timer</span><span style=\"font-family: SimSun;\">记录的是系统时间</span><span lang=\"EN-US\">,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;if (0 != this-&gt;timer_queue_)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;return this-&gt;timer_queue_-&gt;schedule</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(handler,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timer_queue_-&gt;gettimeofday () + delay_time,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">在派发定时器的过程中也是调用</span><span lang=\"EN-US\">gettimeofday</span><span style=\"font-family: SimSun;\">函数。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class FUNCTOR, class ACE_LOCK&gt; ACE_INLINE int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Timer_Queue_T&lt;TYPE, FUNCTOR, ACE_LOCK&gt;::expire (void)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;if (!this-&gt;is_empty ())</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;return this-&gt;expire (this-&gt;gettimeofday () + timer_skew_);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">可以看出，如果在</span><span lang=\"EN-US\">schedule_timer</span><span style=\"font-family: SimSun;\">后，将系统时钟向前调节（调慢）以后，原有的定时器将要经过更多的时间才能触发。从而导致这段时间内定时器无法触发。从而造成定时器丢失。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个问题的解决方法有</span><span lang=\"EN-US\">2</span><span style=\"font-family: SimSun;\">个，简单方法是将系统时钟校准的频度提高，保证每次校准的时候，系统的时钟出现的偏差都不会影响时钟的定时器触发。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">另外一种是</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">Timer_Queue</span><span style=\"font-family: SimSun;\">自己提供的方法，通过上面的代码我们可以发现，其实</span><span lang=\"EN-US\">ACE_Timer_Queue_T::gettimeofday</span><span style=\"font-family: SimSun;\">是一个调用的是一个函数指针。默认使用</span><span lang=\"EN-US\">ACE_OS:: gettimeofday</span><span style=\"font-family: SimSun;\">函数，这个函数可以替换的。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;void gettimeofday (ACE_Time_Value (*gettimeofday)(void));</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">提供一个依赖于操作系统的高解析定时器，</span><span lang=\"EN-US\">ACE_High_Res_Timer</span><span style=\"font-family: SimSun;\">，这个类是通过</span><span lang=\"EN-US\">OS</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">TICK</span><span style=\"font-family: SimSun;\">数量来得到更加精确的时钟的【注】。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】</span><span lang=\"EN-US\">OS</span><span style=\"font-family: KaiTi_GB2312;\">在启动后，都会有一个</span><span lang=\"EN-US\">TICK</span><span style=\"font-family: KaiTi_GB2312;\">在不断的计数，这个</span><span lang=\"EN-US\">TICK</span><span style=\"font-family: KaiTi_GB2312;\">就像一个打点计数器，每次增加</span><span lang=\"EN-US\">1.</span><span style=\"font-family: KaiTi_GB2312;\">一般计数周期就是一个</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: KaiTi_GB2312;\">周期。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">TICK</span><span style=\"font-family: SimSun;\">不会随着你调整系统时钟而调整。所以可以看做是一个相对值。</span><span lang=\"EN-US\">ACE_High_Res_Timer</span><span style=\"font-family: SimSun;\">可以根据相对值计算得到非常精确的程序运行时钟，。直接使用</span><span lang=\"EN-US\">ACE_High_Res_Timer:: gettimeofday_hr</span><span style=\"font-family: SimSun;\">函数作为</span><span lang=\"EN-US\">ACE_Timer_Queue_T::gettimeofday</span><span style=\"font-family: SimSun;\">函数指针。并且在程序的开始部分使用函数，</span><span lang=\"EN-US\">ACE_High_Res_Timer::global_scale_factor ()</span><span style=\"font-family: SimSun;\">，用于激活高精度定时器。【注】</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】这个方法得益于原来公司的两位同事</span><span lang=\"EN-US\">zhangtianhu</span><span style=\"font-family: KaiTi_GB2312;\">和</span><span lang=\"EN-US\">liaobincai</span><span style=\"font-family: KaiTi_GB2312;\">的一个终结。在此怀念一下和他们共事的日子。另外，我没有仔细研究过这个方法，由于获取</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: KaiTi_GB2312;\">的</span><span lang=\"EN-US\">TICK</span><span style=\"font-family: KaiTi_GB2312;\">的获取很有可能是一个内核操作，效率可能不高。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">采用上述的两个方法基本可以避免这个问题。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t23\"></a><a name=\"_Toc208675480\"></a><a name=\"_Toc207687148\"><span lang=\"EN-US\">12<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE</span></a><span style=\"font-family: SimHei;\">的</span><span lang=\"EN-US\">CDR</span><span style=\"font-family: SimHei;\">中的字节对齐问题</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">大家应该都知道计算机中间都有字节对齐问题。</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: SimSun;\">访问内存的时候，如果从特定的地址开始访问一般可以加快速度，比如在</span><span lang=\"EN-US\">32</span><span style=\"font-family: SimSun;\">位机器上，如果一个</span><span lang=\"EN-US\">32</span><span style=\"font-family: SimSun;\">位的整数被放在能被</span><span lang=\"EN-US\">32</span><span style=\"font-family: SimSun;\">模除等于</span><span lang=\"EN-US\">0</span><span style=\"font-family: SimSun;\">的地址上，只需要访问一次，而如果不在，可能要访问两次。但是这样就要求一些数据从特定的地址开始，而不是顺序排放（中间会有一些空余的地址），这就是字节对齐。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">而</span><span lang=\"EN-US\">ACE CDR</span><span style=\"font-family: SimSun;\">的估计也是为了加快速度，从而在</span><span lang=\"EN-US\">CDR</span><span style=\"font-family: SimSun;\">编码上默认也使用了字节对齐。所以在</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">CDR</span><span style=\"font-family: SimSun;\">编解码过程中，传入的参数地址最好是能符合字节对齐规则，否则可能会编解码错误。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_OutputCDR</span><span style=\"font-family: SimSun;\">构造函数会调用一个函数</span><span lang=\"EN-US\">mb_align</span><span style=\"font-family: SimSun;\">调整传入的地址参数成为地址对齐地址。但是其的调整函数</span><span lang=\"EN-US\">ACE_ptr_align_binary</span><span style=\"font-family: SimSun;\">不知处于什么考虑，不是按照机器的对齐长度而是采用的</span><span lang=\"EN-US\">&nbsp;ACE_CDR::MAX_ALIGNMENT</span><span style=\"font-family: SimSun;\">（</span><span lang=\"EN-US\">64bit</span><span style=\"font-family: SimSun;\">，长度为</span><span lang=\"EN-US\">8BYTPES</span><span style=\"font-family: SimSun;\">）作为参数地址。那么</span><span lang=\"EN-US\">ACE_OutputCDR</span><span style=\"font-family: SimSun;\">的内部地址是按照</span><span lang=\"EN-US\">8</span><span style=\"font-family: SimSun;\">字节作为对齐的，但是</span><span lang=\"EN-US\">ACE_InputCDR</span><span style=\"font-family: SimSun;\">却没有将内部地址调整为模除</span><span lang=\"EN-US\">64</span><span style=\"font-family: SimSun;\">等于</span><span lang=\"EN-US\">0</span><span style=\"font-family: SimSun;\">的地址上，而只是调整为模除</span><span lang=\"EN-US\">32</span><span style=\"font-family: SimSun;\">（在</span><span lang=\"EN-US\">32</span><span style=\"font-family: SimSun;\">位机器上）等于</span><span lang=\"EN-US\">0</span><span style=\"font-family: SimSun;\">的地址。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">void</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_CDR::mb_align (ACE_Message_Block *mb)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#if !defined (ACE_CDR_IGNORE_ALIGNMENT)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">如果使用字节对齐方式，使用最大的对齐方式调整内存。调整为模除</span><span lang=\"EN-US\">64</span><span style=\"font-family: SimSun;\">等于</span><span lang=\"EN-US\">0</span><span style=\"font-family: SimSun;\">的地址上。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;char * const start = ACE_ptr_align_binary (mb-&gt;base (),</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_CDR::MAX_ALIGNMENT);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">使用一段简单的代码可以测试发现这个问题。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">char *tmp_buffer = new char [2048];</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//</span><span style=\"font-family: SimSun;\">使用一个无法对齐的参数作为</span><span lang=\"EN-US\">ACE_InputCDR</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">ACE_OutputCDR</span><span style=\"font-family: SimSun;\">的参数地址，</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">char *tmp_data = tmp_buffer +1;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">// output_cdr</span><span style=\"font-family: SimSun;\">调整了对齐的起始地址为</span><span lang=\"EN-US\">8</span><span style=\"font-family: SimSun;\">字节的默认</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_OutputCDR output_cdr(tmp_data,512);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_InputCDR input_cdr(tmp_data,512);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_CDR::ULong cdr_long = 123;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">bool bret =false;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">bret = output_cdr.write_ulong(cdr_long);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">// cdr_long&nbsp;</span><span style=\"font-family: SimSun;\">不等于</span><span lang=\"EN-US\">123</span><span style=\"font-family: SimSun;\">，而是一个错误无效数据。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">bret = input_cdr.read_ulong(cdr_long);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">其实如果编解码的</span><span lang=\"EN-US\">BUFF</span><span style=\"font-family: SimSun;\">都采用相同的对齐方式，那么理论上也不应该出现问题，最多是出现为了对齐而进行填补的空隙，但是这样能带来</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: SimSun;\">的效率提升，也是好事。但是由于</span><span lang=\"EN-US\">ACE_OutputCDR</span><span style=\"font-family: SimSun;\">的一个地址调整。却可能导致编解码的</span><span lang=\"EN-US\">BUFFER</span><span style=\"font-family: SimSun;\">不一致，我不能肯定这到底是一个错误还是作者有他自己的考虑。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个问题到</span><span lang=\"EN-US\">5.6.1</span><span style=\"font-family: SimSun;\">还存在。我已经提交了问题报告。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">当然有一个方法解决这个问题。就是定义宏</span><span lang=\"EN-US\">ACE_CDR_IGNORE_ALIGNMENT</span><span style=\"font-family: SimSun;\">【注】，只要定义了这个宏，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">就不会使用字节对齐处理</span><span lang=\"EN-US\">CDR</span><span style=\"font-family: SimSun;\">编码。使用这个方法的，编码占用空间会压缩一些，但效率上可能低一点（其实未必，因为为了字节对齐还要耗费一些计算时间），</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">【注】</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: KaiTi_GB2312;\">不知道为什么在代码中使用两个不使用字节对齐的宏，一个是在</span><span lang=\"EN-US\">CDR_Base.h CDR_Base.cpp&nbsp;</span><span style=\"font-family: KaiTi_GB2312;\">文件中使用的是</span><span lang=\"EN-US\">ACE_CDR_IGNORE_ALIGNMENT</span><span style=\"font-family: KaiTi_GB2312;\">，在</span><span lang=\"EN-US\">CDR_Stream.cpp</span><span style=\"font-family: KaiTi_GB2312;\">和</span><span lang=\"EN-US\">CDR_Stream.h</span><span style=\"font-family: KaiTi_GB2312;\">文件上使用的宏</span><span lang=\"EN-US\">ACE_LACKS_CDR_ALIGNMENT</span><span style=\"font-family: KaiTi_GB2312;\">。</span></p><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">我一般将两个宏都定义上。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t24\"></a><a name=\"_Toc208675481\"></a><a name=\"_Toc207687149\"><span lang=\"EN-US\">13<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">尽量使用</span><span lang=\"EN-US\">STL</span></a><span style=\"font-family: SimHei;\">而不是</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimHei;\">的容器</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个纯属个人感觉（偏见）。我有如下理由不使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的容器：</span></p><p class=\"MsoListBullet\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm;\"><span lang=\"EN-US\" style=\"font-size: 9pt; line-height: 18px; font-family: Wingdings;\">l<span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimSun;\">一些实现不符合大家对于容器的认识，比如</span><span lang=\"EN-US\">ACE_DLList</span><span style=\"font-family: SimSun;\">，在其中存放的居然是对象的指针而不是拷贝。你还必须记住去释放</span><span lang=\"EN-US\">ACE_DLList</span><span style=\"font-family: SimSun;\">内部管理的指针。</span></p><p class=\"MsoListBullet\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm;\"><span lang=\"EN-US\" style=\"font-size: 9pt; line-height: 18px; font-family: Wingdings;\">l<span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">容器的迭代器不符合</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">的要求，从而造成</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的容器无法使用</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">的各种模板<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">算法</a>和函数。总不能因为</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">容器失去</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">算法这片森林吧。</span></p><p class=\"MsoListBullet\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm;\"><span lang=\"EN-US\" style=\"font-size: 9pt; line-height: 18px; font-family: Wingdings;\">l<span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimSun;\">现在的编译器上已经非常普遍实现了</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">，想找一个还不支持</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">的编译器应该都不容易了。</span></p><p class=\"MsoListBullet\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm;\"><span lang=\"EN-US\" style=\"font-size: 9pt; line-height: 18px; font-family: Wingdings;\">l<span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的容器中间有大量指针，所以</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的容器也不可能用在共享内存中。其的应用场景和</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">没有本质区别。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的文档《</span><span lang=\"EN-US\">The.ACE.Programmers.Guide</span><span style=\"font-family: SimSun;\">》中间也说过：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">That being said, the standard C++ containers are recommended for application development when you are using ACE.</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以在可以使用</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">的情况下，还是优先使用</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t25\"></a><a name=\"_Toc208675482\"></a><a name=\"_Toc207687150\"><span lang=\"EN-US\">14<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE</span></a><span style=\"font-family: SimHei;\">的日志的不如意</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的日志部分是一个非常漂亮的实现</span><span lang=\"EN-US\">,</span><span style=\"font-family: SimSun;\">在多线程和多进程模型下都能较好的效率和安全使用。但是却又少量的不足，让人意犹未尽。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t26\"></a><a name=\"_Toc208675483\"></a><a name=\"_Toc207687151\"><span lang=\"EN-US\">14.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">无法替换的时间戳格式</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">日志对于时间戳的格式是固定的，采用的是格式，这个格式在西方人看起来估计还比较顺眼，在东方人眼中却不如人意。更好的方式当然是时间戳的函数可以重载。或者用函数对象（指针）作为参数传入。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">虽然这部分代码可以重载解决这个问题，但是要大动干戈只修正这个问题感觉却又不值得的。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t27\"></a><a name=\"_Toc208675484\"></a><a name=\"_Toc207687152\"><span lang=\"EN-US\">14.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">日志策略的初始化方式别扭</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">提供了一个日志策略类</span><span lang=\"EN-US\">ACE_Logging_Strategy</span><span style=\"font-family: SimSun;\">辅助大家定义日志策略。但是他的初始化参数却是命令行参数，而不是变量参数。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">int</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Logging_Strategy::init (int argc, ACE_TCHAR *argv[])</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">你必须使用这样的命令行去初始化日志策略模块。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">-m1024 -N10 -fSTDERR|OSTREAM -s../log/c4ad.log</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">试问有几个服务器的开发人员会将这些日志策略的初始化放到命令行参数上去。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t28\"></a><a name=\"_Toc208675485\"></a><a name=\"_Toc207687153\"><span lang=\"EN-US\">14.3<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">没有按天（时间）分割日志文件的方式</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_Logging_Strategy</span><span style=\"font-family: SimSun;\">的日志文件的分割策略采用的是按照文件大小分割文件，文件的序号采用滚动的，但这种日志分割方式无法根据文件时间了解日志内容，（由于文件序号要滚动，序号文件的最后修改时间都一样），你只能</span><span lang=\"EN-US\">grep</span><span style=\"font-family: SimSun;\">所有的日志寻找你要的内容。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">而在我看来，最好日志分割方式肯定是按照日期进行分割日志文件。每天创建一个新的日志文件，可以方便分割日志。清理和管理的工作量大大降低。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t29\"></a><a name=\"_Toc208675486\"></a><a name=\"_Toc207687154\"><span lang=\"EN-US\">14.4<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">日志槽的方式</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_Logging_Strategy</span><span style=\"font-family: SimSun;\">采用的是日志槽的方式</span><span lang=\"EN-US\">Enable</span><span style=\"font-family: SimSun;\">或者</span><span lang=\"EN-US\">Disable</span><span style=\"font-family: SimSun;\">某些级别的日志。但是感觉多少有点不自然的，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">自己的日志级别本身就是分级的。个人感觉应该是如果日志输出的日志级别大于定义的级别就能输出应该是一个更好的选择。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">解决</span><span lang=\"EN-US\">ACE_Logging_Strategy</span><span style=\"font-family: SimSun;\">的问题最好的办法还是扩展这个类。实现自己的日志策略类。</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t30\"></a><a name=\"_Toc208675487\"></a><a name=\"_Toc207687155\"><span lang=\"EN-US\">15<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE_Time_Value</span></a><span style=\"font-family: SimHei;\">的赋值效率</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_Time_Value</span><span style=\"font-family: SimSun;\">是使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">会大量使用类。但是他的部分函数没有高效的实现。比如构造函数：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_INLINE</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Time_Value::ACE_Time_Value (time_t sec, suseconds_t usec)</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">set</span><span style=\"font-family: SimSun;\">函数</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_INLINE void</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Time_Value::set (time_t sec, suseconds_t usec)</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">为了规范用户的赋值，在这些函数的最后都会调用</span><span lang=\"EN-US\">normalize</span><span style=\"font-family: SimSun;\">函数。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">void ACE_Time_Value::normalize (void)</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但如果你的赋值的微秒数值不合适（过大）时，</span><span lang=\"EN-US\">normalize</span><span style=\"font-family: SimSun;\">却不是一个高效实现。下面简单摘取</span><span lang=\"EN-US\">normalize</span><span style=\"font-family: SimSun;\">的一段代码。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">void</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Time_Value::normalize (void)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\"></span>&nbsp;</p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">如果赋值的大于微秒数值大于</span><span lang=\"EN-US\">1s</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;if (this-&gt;tv_.tv_usec &gt;= ACE_ONE_SECOND_IN_USECS)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*! /todo This loop needs some optimization.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">作者都认为这个代码要优化</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">那么进入循环，每次减去</span><span lang=\"EN-US\">1000000</span><span style=\"font-family: SimSun;\">的微秒单位，在秒的单位</span><span lang=\"EN-US\">+1</span><span style=\"font-family: SimSun;\">，上帝呀。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 45pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">do</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++this-&gt;tv_.tv_sec;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;tv_.tv_usec -= ACE_ONE_SECOND_IN_USECS;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (this-&gt;tv_.tv_usec &gt;= ACE_ONE_SECOND_IN_USECS);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">…………</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">很不理解为什么会写成如此的低效。为什么不直接使用除法呢，我很不理解。所以如果你在代码的主循环中如果使用了</span><span lang=\"EN-US\">ACE_Time_Value</span><span style=\"font-family: SimSun;\">，使用上面的那些函数就可能掉入陷阱。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">解决方法是尽量使用函数</span><span lang=\"EN-US\">sec</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">usec</span><span style=\"font-family: SimSun;\">赋值，这些函数不会调用</span><span lang=\"EN-US\">normalize</span><span style=\"font-family: SimSun;\">，这两个函数会直接赋值。如果非要使用上面的那些函数方式，也一定不要使用过大的（错误的）时间参数。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个问题到</span><span lang=\"EN-US\">5.6.1</span><span style=\"font-family: SimSun;\">还没有得到修正。</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t31\"></a><a name=\"_Toc208675488\"></a><a name=\"_Toc207687156\"><span lang=\"EN-US\">16<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">非阻塞网络函数封装不一致</span></a></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的非阻塞网络函数参数设计有不合理的地方。</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE_SOCK_Stream</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">和</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE_SOCK_Connector</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">在非阻塞的的调用的接口对于</span><span lang=\"EN-US\">ACE_Time_Value *timeout</span><span style=\"font-family: SimSun;\">参数的使用不一致，一个要使用</span><span lang=\"EN-US\">NULL</span><span style=\"font-family: SimSun;\">，一个却要使用</span><span lang=\"EN-US\">ACE_Time_Value::zero</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 22pt;\"><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE_SOCK_Stream</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">，非阻塞调用</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">send</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">函数的时候【注】，</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">timeout</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">参数必须填写为</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">NULL</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">。它最后调用的是</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE::send</span><span style=\"font-size: 11pt; color: black; line-height: 22px; font-family: SimSun;\">。将</span><span lang=\"EN-US\">ACE_Time_Value</span><span style=\"font-family: SimSun;\">填写为</span><span lang=\"EN-US\">ACE_Time_Value::zero&nbsp;</span><span style=\"font-family: SimSun;\">（</span><span lang=\"EN-US\">0,0</span><span style=\"font-family: SimSun;\">）是不行的。如果填写</span><span lang=\"EN-US\">ACE_Time_Value::zero</span><span style=\"font-family: SimSun;\">，会大大降低这个非阻塞调用的性能。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ssize_t</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE::send (ACE_HANDLE handle,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void *buf,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t n,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int flags,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ACE_Time_Value *timeout)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;if (timeout == 0)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;return ACE_OS::send (handle, (const char *) buf, n, flags);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">…………</span><span lang=\"EN-US\"></span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;timeout);</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">注意使用非阻塞的的</span><span lang=\"EN-US\">IO</span><span style=\"font-family: KaiTi_GB2312;\">要调用</span><span lang=\"EN-US\">recv</span><span style=\"font-family: KaiTi_GB2312;\">，</span><span lang=\"EN-US\">send</span><span style=\"font-family: KaiTi_GB2312;\">函数，而不要调用</span><span lang=\"EN-US\">recv_n,send_n</span><span style=\"font-family: KaiTi_GB2312;\">这些函数接口，这些函数接口如果</span><span lang=\"EN-US\">timeout</span><span style=\"font-family: KaiTi_GB2312;\">参数传递</span><span lang=\"EN-US\">NULL</span><span style=\"font-family: KaiTi_GB2312;\">，表示阻塞。</span></p><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">另外非阻塞</span><span lang=\"EN-US\">IO</span><span style=\"font-family: KaiTi_GB2312;\">还是要自己设置</span><span lang=\"EN-US\">Socket</span><span style=\"font-family: KaiTi_GB2312;\">的选项。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但是</span><span lang=\"EN-US\" style=\"font-size: 11pt; color: black; line-height: 22px;\">ACE_SOCK_Connector</span><span style=\"font-family: SimSun;\">却采用另外一个封装方式，其是传入一个</span><span lang=\"EN-US\">NULL</span><span style=\"font-family: SimSun;\">表示阻塞，而传入</span><span lang=\"EN-US\">ACE_Time_Value::zero&nbsp;</span><span style=\"font-family: SimSun;\">（</span><span lang=\"EN-US\">0,0</span><span style=\"font-family: SimSun;\">）表示进行非阻塞链接操作。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;* @param timeout&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pointer to an @c ACE_Time_Value object with amount</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of time to wait to connect. If the pointer is 0</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then the call blocks until the connection attempt</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is complete, whether it succeeds or fails.&nbsp;&nbsp;If</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*timeout == {0, 0} then the connection is done</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using nonblocking mode.&nbsp;&nbsp;In this case, if the</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection can't be made immediately, this method</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returns -1 and errno == EWOULDBLOCK.</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;int connect (ACE_SOCK_Stream &amp;new_stream,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ACE_Addr &amp;remote_sap,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ACE_Time_Value *timeout = 0,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ACE_Addr &amp;local_sap = ACE_Addr::sap_any,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int reuse_addr = 0,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int flags = 0,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int perms = 0,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int protocol = 0);</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">大家在处理这些</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">时务必当心。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t32\"></a><a name=\"_Toc208675489\"></a><a name=\"_Toc207687157\"><span lang=\"EN-US\">17<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">过于前卫的</span><span lang=\"EN-US\">Makefile</span></a><span style=\"font-family: SimHei;\">方式</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这个</span><span lang=\"EN-US\">”</span><span style=\"font-family: SimSun;\">陷阱</span><span lang=\"EN-US\">”</span><span style=\"font-family: SimSun;\">的说法有点吹毛求疵，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">提供了一种很前卫的</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">方式，他定义了</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">的基础变量，以及包括规则。如果使用他来辅助</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">的书写</span><span lang=\"EN-US\">,</span><span style=\"font-family: SimSun;\">特别是在跨平台开发中，你可以大大节省</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">开发时间。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">BIN&nbsp;&nbsp;&nbsp;= hello_ace</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">BUILD = $(VBIN)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">SRC = $(addsuffix .cpp,$(BIN))</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">LIBS = -lMyOtherLib</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">LDFLAGS = -L$(PROJ_ROOT)/lib</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#---------------------------------------------------</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#Include macros and targets</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#---------------------------------------------------</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">include $(ACE_ROOT)/include/makeinclude/macros.GNU</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">include $(ACE_ROOT)/include/makeinclude/rules.common.GNU</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">include $(ACE_ROOT)/include/makeinclude/rules.bin.GNU</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">include $(ACE_ROOT)/include/makeinclude/rules.local.GNU</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但是麻烦就在于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的这些</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">方法几乎没有一个文档帮助说明，我一直无法理解</span><span lang=\"EN-US\">$VBIN</span><span style=\"font-family: SimSun;\">到底是什么。这也许，另外，定义到规则这一层也大大限制了大家对</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">的扩展能力。这就有一点点高不成低不就的味道了，</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">的新手几乎不可能了解</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">Makefile,</span><span style=\"font-family: SimSun;\">老手又会因为特殊的需求得不到满足而踌躇。而我个人一般只使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">定义的</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">变量。这些变量大部分在</span><span lang=\"EN-US\">wrapper_macros.GNU</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">platform_macros.GNU</span></p><p class=\"a0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm; margin-left: 0cm;\"><span lang=\"EN-US\"><span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>表2&nbsp;</span><span lang=\"EN-US\">ACE Mafile</span><span style=\"font-family: SimSun;\">的变量定义</span></p><table class=\"MsoTableGrid\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: Arial; border: medium none;\"><tbody><tr><td valign=\"top\" width=\"151\" style=\"border-width: 1pt; border-color: windowtext; padding: 0cm 5.4pt; width: 4cm;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">变量</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: 1pt 1pt 1pt medium; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-top-color: windowtext; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">描述</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">AR</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ar&nbsp;</span><span style=\"font-family: SimSun;\">命令的名字</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ARFLAGS&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ar&nbsp;</span><span style=\"font-family: SimSun;\">的参数</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">CC&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">C</span><span style=\"font-family: SimSun;\">编译器的命令的</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">CXX&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">编译器的命令</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">RC&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">资源编译器命令的名字</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">COMPILE.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">编译</span><span lang=\"EN-US\">C</span><span style=\"font-family: SimSun;\">文件的命令行</span><span lang=\"EN-US\">,&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">一般为</span><span lang=\"EN-US\">:$(CC) $(CFLAGS) $(CPPFLAGS) -c</span></p></td></tr><tr style=\"height: 44.5pt;\"><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext; height: 44.5pt;\"><p class=\"a4\"><span lang=\"EN-US\"><a href=\"http://compile.cc/\">COMPILE.cc</a>&nbsp;&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext; height: 44.5pt;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">编译</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">文件的命令行</span><span lang=\"EN-US\">,</span><span style=\"font-family: SimSun;\">一般为</span><span lang=\"EN-US\">:$(CXX) $(CCFLAGS) $(CPPFLAGS) $(PTDIRS) –c&nbsp;</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\"><a href=\"http://compileeso.cc/\">COMPILEESO.cc</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">$(CXX) $(CCFLAGS) $(CPPFLAGS) $(PTDIRS),</span><span style=\"font-family: SimSun;\">没太搞明白，不知道为什么和</span><span lang=\"EN-US\">SO</span><span style=\"font-family: SimSun;\">有关，好像是为了修正错误增加的。不理也罢</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">CPPFLAGS&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">C,C++</span><span style=\"font-family: SimSun;\">语言编译的预标志，比如</span><span lang=\"EN-US\">DEFINDE</span><span style=\"font-family: SimSun;\">等</span><span lang=\"EN-US\">. CPPFLAGS += $(DEFFLAGS) $(INCLDIRS)</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">CFLAGS&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">C</span><span style=\"font-family: SimSun;\">语言编译选项</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">CCFLAGS&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">语言编译选项</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">DCFLAGS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Debugging&nbsp;</span><span style=\"font-family: SimSun;\">程序的</span><span lang=\"EN-US\">C</span><span style=\"font-family: SimSun;\">语言编译选项</span><span lang=\"EN-US\">,</span><span style=\"font-family: SimSun;\">一般在有</span><span lang=\"EN-US\">debug=1</span><span style=\"font-family: SimSun;\">变量时有效</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">DCCFLAGS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Debugging&nbsp;</span><span style=\"font-family: SimSun;\">程序的</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">语言编译选项</span><span lang=\"EN-US\">,</span><span style=\"font-family: SimSun;\">一般在有</span><span lang=\"EN-US\">debug=1</span><span style=\"font-family: SimSun;\">变量时有效</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">DEFFLAGS</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">C++&nbsp;</span><span style=\"font-family: SimSun;\">预处理的</span><span lang=\"EN-US\">DEFINE</span><span style=\"font-family: SimSun;\">部分</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">DLD&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">dynamic linker&nbsp;</span><span style=\"font-family: SimSun;\">动态库</span><span lang=\"EN-US\">link</span><span style=\"font-family: SimSun;\">命令的名字，</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">LD&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">linker&nbsp;</span><span style=\"font-family: SimSun;\">命令的名字</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">IDL&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">CORBA IDL compiler&nbsp;</span><span style=\"font-family: SimSun;\">命令的名字</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">INCLDIRS</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">INCLUDE</span><span style=\"font-family: SimSun;\">的头文件</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">LDFLAGS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ld linker flags</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">LINK.c&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">链接</span><span lang=\"EN-US\">C</span><span style=\"font-family: SimSun;\">文件的命令行</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\"><a href=\"http://link.cc/\">LINK.cc</a></span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">链接</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">文件的命令行</span><span lang=\"EN-US\">,</span><span style=\"font-family: SimSun;\">一般为</span><span lang=\"EN-US\">:$(PURELINK) $(PRELINK) $(LD) $(CCFLAGS) $(CPPFLAGS) $(PTDIRS)</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">MAKEFLAGS&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Flags that are passed into the compilation from the commandline</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">OCFLAGS&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Optimizing&nbsp;</span><span style=\"font-family: SimSun;\">程序的</span><span lang=\"EN-US\">C</span><span style=\"font-family: SimSun;\">语言编译选项</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">OCCFLAGS&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Optimizing&nbsp;</span><span style=\"font-family: SimSun;\">程序的</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">语言编译选项</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PIC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PIC</span><span style=\"font-family: SimSun;\">就是</span><span lang=\"EN-US\">position independent code</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PCFLAGS</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">profiling&nbsp;</span><span style=\"font-family: SimSun;\">程序的</span><span lang=\"EN-US\">C</span><span style=\"font-family: SimSun;\">语言编译选项</span><span lang=\"EN-US\">&nbsp;profiling</span><span style=\"font-family: SimSun;\">是什么不要问我。</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PCCFLAGS</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">profiling&nbsp;</span><span style=\"font-family: SimSun;\">程序的</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">语言编译选项</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PRELINK</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">LINK</span><span style=\"font-family: SimSun;\">之前执行的命令</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PURELINK</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">purify&nbsp;</span><span style=\"font-family: SimSun;\">执行的命令，</span><span lang=\"EN-US\">purify</span><span style=\"font-family: SimSun;\">是什么不要问我。</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PWD&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">得到当前目录的命令</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">PTDIRS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">模板文件的路径定义</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">RM&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">删除工具的命令</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ACE_MKDIR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">递归创建的目录</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">SOFLAGS&nbsp;</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">生成</span><span lang=\"EN-US\">.so</span><span style=\"font-family: SimSun;\">库时候的参数</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\"><a href=\"http://solink.cc/\">SOLINK.cc</a></span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">生成</span><span lang=\"EN-US\">.so</span><span style=\"font-family: SimSun;\">库时候的命令行</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">VAR</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Variant identifier suffix</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">VDIR</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Directory for object code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.obj/</span></p></td></tr><tr><td valign=\"top\" width=\"151\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 4cm; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">VSHDIR</span></p></td><td valign=\"top\" width=\"465\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 348.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Directory for shared object code&nbsp;&nbsp;&nbsp;.shobj/</span></p></td></tr></tbody></table><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">看起来变量很多，其实要记住和使用的可以很少，你需要留意的主要是</span><span lang=\"EN-US\">.cc</span><span style=\"font-family: SimSun;\">结尾的变量就可以了。我们可以使用</span><span lang=\"EN-US\">ACE MakreFile</span><span style=\"font-family: SimSun;\">的变量，方便我们的</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">开发。比如：</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">我的</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">，就使用了</span><span lang=\"EN-US\">$(<a href=\"http://link.cc/\">LINK.cc</a>), $(<a href=\"http://compile.cc/\">COMPILE.cc</a>)</span><span style=\"font-family: SimSun;\">两个宏。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#</span><span style=\"font-family: SimSun;\">使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">wrapper_macros.GNU</span><span style=\"font-family: SimSun;\">的定义变量</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#</span><span style=\"font-family: SimSun;\">得到</span><span lang=\"EN-US\">C,CPP</span><span style=\"font-family: SimSun;\">文件的列表</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">SRC_FILE = $(wildcard ./*.cpp )</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#</span><span style=\"font-family: SimSun;\">通过</span><span lang=\"EN-US\">.C,.CPP</span><span style=\"font-family: SimSun;\">文件名称得到</span><span lang=\"EN-US\">.O</span><span style=\"font-family: SimSun;\">文件名称，</span><span lang=\"EN-US\">.o&nbsp;</span><span style=\"font-family: SimSun;\">文件放在</span><span lang=\"EN-US\">../../object/exampleexe/</span><span style=\"font-family: SimSun;\">目录下</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">O_FILE = $(patsubst ./%.cpp, ../../object/exampleexe/%.o, $(CPP_FILE))</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#</span><span style=\"font-family: SimSun;\">输出文件</span><span lang=\"EN-US\">exe_file</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">OUTFILE = ../../bin/exampleexe</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\"># LIB_ALL</span><span style=\"font-family: SimSun;\">为</span>&nbsp;<span lang=\"EN-US\">–l</span><span style=\"font-family: SimSun;\">文件和</span><span lang=\"EN-US\">-L</span><span style=\"font-family: SimSun;\">目录的定义</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">$(OUTFILE): $(O_FILE)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;$(<a href=\"http://link.cc/\">LINK.cc</a>) -o$(OUTFILE) $(O_FILE)&nbsp;&nbsp;$(LIB_ALL)&nbsp;&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#.o</span><span style=\"font-family: SimSun;\">输出文件放在</span><span lang=\"EN-US\">../../object/</span><span style=\"font-family: SimSun;\">目录下</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">../../object/exampleexe/%.o : ./%.cpp</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;$(<a href=\"http://compile.cc/\">COMPILE.cc</a>) $(INC_ALL) $&lt; -o $@&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">clean:</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;$RM -f $(OUTFILE) $(O_FILE)</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">是不是也很酷，轻松实现</span><span lang=\"EN-US\">Makefile</span><span style=\"font-family: SimSun;\">的跨越平台移植。</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t33\"></a><a name=\"_Toc208675490\"></a><a name=\"_Toc207687158\"><span lang=\"EN-US\">18<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">共享内存的与位置无关分配？</span></a></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">在文档《</span><span lang=\"EN-US\">ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming</span><span style=\"font-family: SimSun;\">》中介绍了一种与位置无关的共享内存分配，但是实际上这种方式并不是太理想。按照文章中的介绍的方式，其实主要是采用</span><span lang=\"EN-US\">ALWAYS_FIXED</span><span style=\"font-family: SimSun;\">参数，使用制定的基地址作为共享内存的地址。同时使用辅助类保证</span><span lang=\"EN-US\">2</span><span style=\"font-family: SimSun;\">个进程使用相对地址使用共享内存。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_MMAP_Memory_Pool_Options options</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ACE_DEFAULT_BASE_ADDR,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_MMAP_Memory_Pool_Options::ALWAYS_FIXED);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_NEW_RETURN (g_allocator,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALLOCATOR (BACKING_STORE,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BACKING_STORE,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;options),</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_DEBUG ((LM_DEBUG,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_TEXT (\"Mapped to base address %@/n\"),</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_allocator-&gt;base_addr ()));</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showRecords ();</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但是，首先要求大家能使用相同的基地址，按照</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">给出的例子。其给出默认基地址一个宏</span><span lang=\"EN-US\">ACE_DEFAULT_BASE_ADDR(</span><span style=\"font-family: SimSun;\">在</span><span lang=\"EN-US\">Linux</span><span style=\"font-family: SimSun;\">下是</span><span lang=\"EN-US\">0x80000000)</span><span style=\"font-family: SimSun;\">。因为地址空间管理都是操作系统的负责的事情，所以要求使用同一块共享内存的</span><span lang=\"EN-US\">2</span><span style=\"font-family: SimSun;\">个进程分配的基地址是一样的是很不靠谱的事情。采用这种方式可能有</span><span lang=\"EN-US\">2</span><span style=\"font-family: SimSun;\">个后果，第一如果你要使用多个共享内存，你要自己计算管理进程空间，第二你程序可移植性很低，甚至会出现在一台机器上可以运行，在另外</span><span lang=\"EN-US\">1</span><span style=\"font-family: SimSun;\">台机器无法运行。所以大家慎用这个特性比较好。把程序的可靠运行寄托于运气好，这不应该是一个程序员的作风。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以对于共享内存，如果希望实现与位置无关的分配，我个人的忠告如下：</span></p><p class=\"MsoListBullet\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm;\"><span lang=\"EN-US\" style=\"font-size: 9pt; line-height: 18px; font-family: Wingdings;\">l<span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimSun;\">一开始分配足够的空间，不要再进行扩展【注】。因为扩展共享内存可能意味着原来所有的共享内存相关指针会失效。</span></p><p class=\"MsoListBullet\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm;\"><span lang=\"EN-US\" style=\"font-size: 9pt; line-height: 18px; font-family: Wingdings;\">l<span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimSun;\">各自进程管理自己的地址空间，共享内存内部不要保存任何指针（特别不要在共享内存内保存指针），所有的地址都使用相对值。这样才能保证重入，和基础地址变化下不出现问题。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: 1pt medium medium; border-style: solid none none; padding: 1pt 0cm 0cm; border-top-color: black;\"><p class=\"a1\"><span lang=\"EN-US\">&nbsp;</span></p></div><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border-width: medium medium 1pt; border-style: none none solid; padding: 0cm 0cm 1pt; border-bottom-color: black;\"><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">《</span><span lang=\"EN-US\">ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming</span><span style=\"font-family: KaiTi_GB2312;\">》中间还提出过处理共享内存池封装，但考虑到涉及所有的共享内存地址的都要调整。不是太认可这种方式。</span></p><p class=\"a2\"><span style=\"font-family: KaiTi_GB2312;\">另外由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: KaiTi_GB2312;\">的容器都使用了指针，不建议在共享内存中使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: KaiTi_GB2312;\">的容器。</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t34\"></a><a name=\"_Toc208675491\"><span lang=\"EN-US\">19<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">自己初始化</span><span lang=\"EN-US\">Timer_Queue</span></a><span style=\"font-family: SimHei;\">的尺寸</span></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">如果你的应用有大量的定时器，你最好自己控制</span><span lang=\"EN-US\">Timer_Queue</span><span style=\"font-family: SimSun;\">的尺寸。原因如下。默认的</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">Timer_Queue</span><span style=\"font-family: SimSun;\">初始化的尺寸不大，一般只有</span><span lang=\"EN-US\">44</span><span style=\"font-family: SimSun;\">个。而原有的尺寸不能满足你的要求的时候，</span><span lang=\"EN-US\">Timer_Queue</span><span style=\"font-family: SimSun;\">会自动增长，以</span><span lang=\"EN-US\">Timer_Heap</span><span style=\"font-family: SimSun;\">为例，增长的方式是扩大一倍空间。在性能要求严格环境下，多次增长队列的尺寸对性能会造成一定的冲击。下面是空间调整函数</span><span lang=\"EN-US\">grow_heap</span><span style=\"font-family: SimSun;\">的部分代码剖析。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class FUNCTOR, class ACE_LOCK&gt; void</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Timer_Heap_T&lt;TYPE, FUNCTOR, ACE_LOCK&gt;::grow_heap (void)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">调整为最大尺寸的两倍</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;size_t new_size = this-&gt;max_size_ * 2;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 22.5pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;ACE_Timer_Node_T&lt;TYPE&gt; **new_heap = 0;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//NEW</span><span style=\"font-family: SimSun;\">新的空间，将原有的空间的数据拷贝回来。</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;ACE_NEW (new_heap,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_Timer_Node_T&lt;TYPE&gt; *[new_size]);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;ACE_OS::memcpy (new_heap,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;heap_,</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;max_size_ * sizeof *new_heap);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;delete [] this-&gt;heap_;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;this-&gt;heap_ = new_heap;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">后面还有多个空间要扩展和调整</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;this-&gt;max_size_ = new_size;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">其实这和</span><span lang=\"EN-US\">std::vector</span><span style=\"font-family: SimSun;\">一样，如果你知道要使用多少空间，先调用</span><span lang=\"EN-US\">reserve</span><span style=\"font-family: SimSun;\">预分配空间会大大加快后面的执行速度。如果你知道要使用多少个定时器，告知底层，它会帮你提前分配好空间，否则他会采用他认为合理的方式和尺寸。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">所以最好的方法是你先估算你大致需要使用的</span><span lang=\"EN-US\">Timer</span><span style=\"font-family: SimSun;\">数量，在初始化是告诉</span><span lang=\"EN-US\">Timer_Queue</span><span style=\"font-family: SimSun;\">。但是</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">没有办法通过使用参数调整</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">的大小，你必须自己进行替换</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">来实现目的。方法大致如下：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 20pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\" style=\"font-size: 10pt; color: black;\">ACE_Timer_Queue&nbsp;</span><span lang=\"EN-US\">*timer_queue_=NULL;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//</span><span style=\"font-family: SimSun;\">根据自己的需要调整</span><span lang=\"EN-US\">Time_Queue</span><span style=\"font-family: SimSun;\">的尺寸</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">timer_queue_ = new ACE_Timer_Heap(maxaccept + maxconnect + 16);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;ACE_Reactor::instance(new ACE_Reactor(new ACE_Select_Reactor(NULL,timer_queue_,1),1),1);</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这样你就替换了</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">Timer_Queue</span><span style=\"font-family: SimSun;\">，同时你要记住在程序运行退出前自己释放的你申请的</span><span lang=\"EN-US\">timer_queue_;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t35\"></a><a name=\"_Toc208675492\"></a><a name=\"_Toc207687159\"><span lang=\"EN-US\">20<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">杂项</span></a></h1><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这一节列一些</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">使用中要注意的一些问题。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t36\"></a><a name=\"_Toc208675493\"></a><a name=\"_Toc207687160\"><span lang=\"EN-US\">20.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE_Reactor</span></a><span style=\"font-family: SimHei;\">的初始化应尽量提前</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于为了一些自己需要的特性，我一般会自己初始化</span><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">，而不是让系统默认初始化。要注意必须在程序的最开始就初始化</span><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的很多代码都会使用</span><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">，包括日志的策略类。所以</span><span lang=\"EN-US\">ACE_Reactor</span><span style=\"font-family: SimSun;\">必须在这些代码前面，否则会出现奇怪的错误，比如无法响应某些</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">，我至少掉到这个陷阱里面</span><span lang=\"EN-US\">5</span><span style=\"font-family: SimSun;\">次。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t37\"></a><a name=\"_Toc208675494\"></a><a name=\"_Toc207687161\"><span lang=\"EN-US\">20.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE_SOCK_Stream</span></a><span style=\"font-family: SimHei;\">不会在析构关闭</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">有</span><span lang=\"EN-US\">OO</span><span style=\"font-family: SimSun;\">基础的程序都会放资源的释放放入析构中间去。所以我看到</span><span lang=\"EN-US\">ACE_SOCK_Stream</span><span style=\"font-family: SimSun;\">也以为他的在析构中关闭</span><span lang=\"EN-US\">Socket</span><span style=\"font-family: SimSun;\">的句柄，但是事实是</span><span lang=\"EN-US\">ACE_SOCK_Stream</span><span style=\"font-family: SimSun;\">必须自己显式调用</span><span lang=\"EN-US\">close</span><span style=\"font-family: SimSun;\">函数关闭</span><span lang=\"EN-US\">Socket</span><span style=\"font-family: SimSun;\">句柄。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">当然，这倒不是</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的设计缺陷，而是</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">ACE_SOCK_Stream</span><span style=\"font-family: SimSun;\">是一个可以出现在堆栈，可以作为参数传递，进行赋值的类，如果在析构中关闭，就无法实现这些功能了。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">实现决定设计。辨证呀。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t38\"></a><a name=\"_Toc208675495\"><span lang=\"EN-US\">20.3<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">handle_events</span></a><span style=\"font-family: SimHei;\">函数的</span><span lang=\"EN-US\">ACE_Time_Value</span><span style=\"font-family: SimHei;\">参数</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">handle_events</span><span style=\"font-family: SimSun;\">参数里面的有一个</span><span lang=\"EN-US\">ACE_Time_Value</span><span style=\"font-family: SimSun;\">参数，注意这个参数是一个传入传出参数。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;virtual int handle_events (ACE_Time_Value &amp;max_wait_time);</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">Reactor</span><span style=\"font-family: SimSun;\">内部同时要管理定时器和</span><span lang=\"EN-US\">IO</span><span style=\"font-family: SimSun;\">句柄，所以</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">很可能不能等待你制定的时间长度，所以他会在传出参数告诉你剩余的等待时间。这时你可以让</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">继续等待剩余时间。但在主循环处理中，你不能这样做，因为经过多次调用后，</span><span lang=\"EN-US\">ACE_Time_Value</span><span style=\"font-family: SimSun;\">参数会变成</span><span lang=\"EN-US\">0</span><span style=\"font-family: SimSun;\">（</span><span lang=\"EN-US\">ACE_Time_Value::zero</span><span style=\"font-family: SimSun;\">）。这是会导致</span><span lang=\"EN-US\">hanlde_events</span><span style=\"font-family: SimSun;\">空转，会导致</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: SimSun;\">占用率很高。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">对于大部分主循环的程序，都不需要这样做，而应该重新制定一个等待时间。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t39\"></a><a name=\"_Toc208675496\"><span lang=\"EN-US\">20.4<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">正确理解</span><span lang=\"EN-US\">ACE_Singleton</span></a><span style=\"font-family: SimHei;\">的加锁</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">ACE_Singleton</span><span style=\"font-family: SimSun;\">的模板参数是可以带一个锁参数的。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class ACE_LOCK&gt;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">class ACE_Singleton : public ACE_Cleanup</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">但你可能会错误理解这个锁参数的用途。</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">typedef ACE_Singleton&lt;Manager, ACE_Thread_Mutex&gt; MANAGER;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">MANAGER::instance()-&gt;ProcessFunA();</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">初学者可能会疑惑加锁的是不是</span><span lang=\"EN-US\">ProcessFunA</span><span style=\"font-family: SimSun;\">，的处理被加锁了。但是实际上</span><span lang=\"EN-US\">ACE_Singleton</span><span style=\"font-family: SimSun;\">的锁只保护</span><span lang=\"EN-US\">ACE_Singleton</span><span style=\"font-family: SimSun;\">内部的指针分配和销毁不出现重入。也就是保护</span><span lang=\"EN-US\">instance</span><span style=\"font-family: SimSun;\">函数内部的指针分配和释放部分。代码剖析如下：</span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">template &lt;class TYPE, class ACE_LOCK&gt; TYPE *</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">ACE_Singleton&lt;TYPE, ACE_LOCK&gt;::instance (void)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"font-family: SimSun;\">加锁部分的代码，使用</span><span lang=\"EN-US\">GUARD</span><span style=\"font-family: SimSun;\">方式保护</span><span lang=\"EN-US\">new</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_GUARD_RETURN (ACE_LOCK, ace_mon, *lock, 0);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (singleton == 0)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACE_NEW_RETURN (singleton, (ACE_Singleton&lt;TYPE, ACE_LOCK&gt;), 0);</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">……</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;return &amp;singleton-&gt;instance_;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">}</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">其实理解函数栈调用的兄弟应该很容易理解这个问题，</span><span lang=\"EN-US\">ProcessFunA&nbsp;</span><span style=\"font-family: SimSun;\">函数入栈的时候</span><span lang=\"EN-US\">instance</span><span style=\"font-family: SimSun;\">函数已经出栈了。</span><span lang=\"EN-US\">instance</span><span style=\"font-family: SimSun;\">函数内部加（解）的锁无法影响后续的调用。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t40\"></a><a name=\"_Toc208675497\"><span lang=\"EN-US\">20.5<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=\"EN-US\">ACE_DEBUG</span></a><span style=\"font-family: SimHei;\">的两层括号</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这儿只是分析（猜测）一下</span><span lang=\"EN-US\">ACE_DEBUG</span><span style=\"font-family: SimSun;\">两层括号的来由。用习惯了</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">下面跟踪宏</span><span lang=\"EN-US\">TRACE</span><span style=\"font-family: SimSun;\">的人开始用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的调试宏</span><span lang=\"EN-US\">ACE_DEBUG</span><span style=\"font-family: SimSun;\">的宏都会有点不习惯，因为你必须写两层括号。</span><span lang=\"EN-US\"></span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#if defined (ACE_NLOGGING)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#define ACE_DEBUG(X) do {} while (0)&nbsp;&nbsp;&nbsp;/*</span><span style=\"font-family: SimSun;\">注意</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">定义的是</span><span lang=\"EN-US\">(X)*/</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#define ACE_DEBUG(X) /</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;do { /</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); /</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;ace___-&gt;log X; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*</span><span style=\"font-family: SimSun;\">注意这儿，这个奇怪的写法</span><span lang=\"EN-US\">*/</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">&nbsp;&nbsp;} while (0)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#endif</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//</span><span style=\"font-family: SimSun;\">使用实例，</span><span lang=\"EN-US\" style=\"color: black;\"></span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\" style=\"color: black;\">ACE_DEBUG</span><span lang=\"EN-US\">((<span style=\"color: black;\">LM_ERROR</span>,\"i=%d./n\",i++));</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">比较起来，对于</span><span lang=\"EN-US\">Windows</span><span style=\"font-family: SimSun;\">下的</span><span lang=\"EN-US\">TRACE</span><span style=\"font-family: SimSun;\">宏的定义如下：</span><span lang=\"EN-US\"></span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#ifdef _DEBUG<span style=\"color: black;\"></span></span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#define TRACE ATLTRACE</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#define TRACE&nbsp;&nbsp;&nbsp;__noop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* MSVC</span><span style=\"font-family: SimSun;\">特有的一个标识符，用于忽视后面的参数</span>&nbsp;<span lang=\"EN-US\">*/</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#endif&nbsp;</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">而</span><span lang=\"EN-US\">ACE_DEBUG</span><span style=\"font-family: SimSun;\">的定义比</span><span lang=\"EN-US\">TRACE</span><span style=\"font-family: SimSun;\">的定义是多一层</span><span lang=\"EN-US\">(X)</span><span style=\"font-family: SimSun;\">的，所以你必须写两层括号，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">实际上将内层括号的内容全部作为宏参数使用了。</span><span lang=\"EN-US\"></span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">我曾经对这两层括号疑惑了很久。因为我觉得可以采用其他方法绕开两个括号，（你可以写一个日志类尝试一下）</span><span lang=\"EN-US\"></span></p><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; border: 1pt solid windowtext; padding: 1pt 4pt; background-color: rgb(217, 217, 217);\"><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#if defined (ACE_NLOGGING)</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">//&nbsp;</span><span style=\"font-family: SimSun;\">直接定义为一个函数的名字，当然这儿还要改写其他的很多代码</span><span lang=\"EN-US\"></span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#define Z_DEBUG&nbsp;&nbsp;ACE_Log_Msg::instance ()-&gt;log&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#else</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#define Z_DEBUG</span></p><p class=\"a9\" style=\"background-color: rgb(217, 217, 217); text-indent: 18pt; background-position: initial initial; background-repeat: initial initial;\"><span lang=\"EN-US\">#endif</span></p></div><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这样的在没有定义</span><span lang=\"EN-US\">ACE_NLOGGING</span><span style=\"font-family: SimSun;\">的时候，</span><span lang=\"EN-US\">Z_DEBUG(<span style=\"color: black;\">LM_ERROR</span>,\"i=%d./n\",i++);</span><span style=\"font-family: SimSun;\">会被替换成，</span><span lang=\"EN-US\">(<span style=\"color: black;\">LM_ERROR</span>,\"i=%d./n\",i++)</span><span style=\"font-family: SimSun;\">，这样也不会有任何输出效果。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">直到有一次发现</span><span lang=\"EN-US\">GCC2.9</span><span style=\"font-family: SimSun;\">的环境下编译类似代码，</span><span lang=\"EN-US\">GCC</span><span style=\"font-family: SimSun;\">会对这样的代码会产生告警，我大致明白了</span><span lang=\"EN-US\">ACE_DEBUG</span><span style=\"font-family: SimSun;\">设计者的苦衷。只有双层括号的方法才能彻底让这行代码不起任何告警。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">另外使用两层括号也有性能上的好处，大家注意代码被替换成</span><span lang=\"EN-US\">(<span style=\"color: black;\">LM_ERROR</span>,\"i=%d./n\",i++)</span><span style=\"font-family: SimSun;\">后，</span><span lang=\"EN-US\">i++</span><span style=\"font-family: SimSun;\">的代码还是要执行，在我自己测试中，即使是在</span><span lang=\"EN-US\">GCC</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">O3</span><span style=\"font-family: SimSun;\">级别的优化编译中，这样的代码也不会被优化掉。而如果采用</span><span lang=\"EN-US\">ACE_DEBUG</span><span style=\"font-family: SimSun;\">的设计，统一替换为</span><span lang=\"EN-US\">do {} while (0)</span><span style=\"font-family: SimSun;\">，这行代码则必然将被优化掉。而对于</span><span lang=\"EN-US\">MSVC</span><span style=\"font-family: SimSun;\">的编译器，他提供一个特别的标识符</span><span lang=\"EN-US\">__noop</span><span style=\"font-family: SimSun;\">帮助编译器优化。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span lang=\"EN-US\">&nbsp;</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t41\"></a><a name=\"_Toc208675498\"></a><a name=\"_Toc207687162\"><span lang=\"EN-US\">21<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">总结和如何用好</span><span lang=\"EN-US\">ACE</span></a></h1><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t42\"></a><a name=\"_Toc208675499\"></a><a name=\"_Toc207687163\"><span lang=\"EN-US\">21.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">实践，不断尝试</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">大学毕业生中能成为好的程序员绝对不是纯粹考试得高分死记公式拿奖学金的同学</span>&nbsp;<span style=\"font-family: SimSun;\">，而是那些熬夜写代码的狂人，哈哈。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">计算机是一门实践科学，你只有不断尝试才能进步。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t43\"></a><a name=\"_Toc208675500\"></a><a name=\"_Toc207687164\"><span lang=\"EN-US\">21.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">阅读的</span><span lang=\"EN-US\">ACE</span></a><span style=\"font-family: SimHei;\">代码</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">好像是</span><span lang=\"EN-US\">Linus</span><span style=\"font-family: SimSun;\">（虽然他好像有点抵触</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">，哈哈），好像是</span><span lang=\"EN-US\">Linus Torvalds</span><span style=\"font-family: SimSun;\">在回答一个提问者时说：“请去阅读我的代码”。了解一个实现，发现问题的最好方式还是阅读源代码。代码面前，了无秘密。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">当然</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的代码阅读起来不是一件那么舒心的事情。开发者们采用的是一些非常传统的</span><span lang=\"EN-US\">UNIX</span><span style=\"font-family: SimSun;\">习惯，比如对齐方式采用</span><span lang=\"EN-US\">2</span><span style=\"font-family: SimSun;\">个空格缩进，单行</span><span lang=\"EN-US\">if</span><span style=\"font-family: SimSun;\">语句不用</span><span lang=\"EN-US\">{}</span><span style=\"font-family: SimSun;\">包含，稍显奇特的</span><span lang=\"EN-US\">inc</span><span style=\"font-family: SimSun;\">文件方式，另外，为了支持跨平台特性，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的代码用了大量的宏。这都无疑增加了阅读的难度。不过总体说了，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的代码比较起</span><span lang=\"EN-US\">Linux</span><span style=\"font-family: SimSun;\">内核代码和很多其他类库的代码还是好的多，至少注释很清晰，而且</span><span lang=\"EN-US\">Doxgen</span><span style=\"font-family: SimSun;\">生产的文档很酷，也够用。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t44\"></a><a name=\"_Toc208675501\"></a><a name=\"_Toc207687165\"><span lang=\"EN-US\">21.3<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">了解操作系统和平台特性</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">由于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">是一个跨平台实现。如果你了解平台的实现。不光你阅读代码的速度会快很多，也会让你对实现的困惑就会越少，让你的代码避开效率的陷阱，你的实现就会越高效。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t45\"></a><a name=\"_Toc208675502\"></a><a name=\"_Toc207687166\"><span lang=\"EN-US\">21.4<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">好好学习</span><span lang=\"EN-US\">C++</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">不需要</span><span lang=\"EN-US\">OO</span><span style=\"font-family: SimSun;\">的封装，不用美妙的设计模式，没有对效率的执着追求，没有惊艳的范化设计，用</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">干什么？但没有这些信仰，也就不会有</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">，而且没有这些信仰要程序员做什么？</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t46\"></a><a name=\"_Toc208675503\"></a><a name=\"_Toc207687167\"><span lang=\"EN-US\">21.5<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">慎用高阶特性</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">在</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的使用过程中，发现</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的主要问题出在一些高阶实现上。所以如果你要使用高阶特性最好能了解背后的实现。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t47\"></a><a name=\"_Toc208675504\"><span lang=\"EN-US\">21.6<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">为</span><span lang=\"EN-US\">ACE</span></a><span style=\"font-family: SimHei;\">作出贡献</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">多用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">，将发现的问题反馈给</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的开发者和</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">社区。</span></p><h1 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t48\"></a><a name=\"_Toc208675505\"></a><a name=\"_Toc207687168\"><span lang=\"EN-US\">22<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">后记</span></a></h1><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t49\"></a><a name=\"_Toc208675506\"></a><a name=\"_Toc207687169\"><span lang=\"EN-US\">22.1<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">作者介绍</span></a></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">笔名：雁渡寒潭</span><span lang=\"EN-US\">(<a href=\"mailto:insailer@gmail.com\">insailer@gmail.com</a>)</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">曾星</span><span lang=\"EN-US\">&nbsp;&nbsp;</span><span style=\"font-family: SimSun;\">腾讯公司互动娱乐后台开发程序员，目前从事游戏后台设计开发</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">个人兴趣范围：大规模分布系统的架构设计，高容量，大压力的服务器设计；跨平台开发；<a href=\"http://lib.csdn.net/base/mysql\" class=\"replace_word\" title=\"MySQL知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">数据库</a>的设计，原理和调优；多核（</span><span lang=\"EN-US\">CPU</span><span style=\"font-family: SimSun;\">）环境下的程序设计；</span><span lang=\"EN-US\">OO</span><span style=\"font-family: SimSun;\">和设计模式；</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">和</span><span lang=\"EN-US\">STL</span><span style=\"font-family: SimSun;\">以及模板，</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">。欢迎大家交流。</span></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t50\"></a><a name=\"_Toc208675507\"></a><a name=\"_Toc207687171\"><span lang=\"EN-US\">22.2<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">参考文档</span></a></h2><p class=\"a0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px; text-indent: 0cm; margin-left: 0cm;\"><span lang=\"EN-US\"><span style=\"font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>表3&nbsp;</span><span style=\"font-family: SimSun;\">参考的文档</span></p><table class=\"MsoTableGrid\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: Arial; border: medium none;\"><tbody><tr><td valign=\"top\" width=\"271\" style=\"border-width: 1pt; border-color: windowtext; padding: 0cm 5.4pt; width: 203.4pt;\"><p class=\"a3\"><span style=\"font-family: SimSun;\">参考书目</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: 1pt 1pt 1pt medium; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-top-color: windowtext; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a3\"><span style=\"font-family: SimSun;\">作者</span><span lang=\"EN-US\">/</span><span style=\"font-family: SimSun;\">译者</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: 1pt 1pt 1pt medium; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-top-color: windowtext; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a3\"><span style=\"font-family: SimSun;\">说明</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">《</span><span lang=\"EN-US\">C++ Network Programming Volume 1_Mastering Complexity With ACE and Patterns</span><span style=\"font-family: SimSun;\">》</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Douglas C. Schmidt, Stephen D. Huston</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">很多问题在这本书的副栏都有描述，如果你看的很认真，也许不会想我这样碰暗礁。</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">《</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">网络编程卷</span><span lang=\"EN-US\">1</span><span style=\"font-family: SimSun;\">：运用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">和模式消除复杂性》</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">於春景</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">《</span><span lang=\"EN-US\">C++ Network Programming Volume 2 - Systematic Reuse with ACE and Frameworks</span><span style=\"font-family: SimSun;\">》</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Douglas C. Schmidt, Stephen D. Huston</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">很多问题在这本书的副栏都有描述，如果你看的很认真，也许不会想我这样碰暗礁。</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">《</span><span lang=\"EN-US\">C++</span><span style=\"font-family: SimSun;\">网络编程，卷</span><span lang=\"EN-US\">2</span><span style=\"font-family: SimSun;\">，基于</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">和框架的系统化复用》</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">马维达</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">《</span><span lang=\"EN-US\">The.ACE.Programmers.Guide</span><span style=\"font-family: SimSun;\">》</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">Stephen D. Huston, James CE Johnson, Umar Syyid</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">《</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">程序员指南》</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">马维达</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">《</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">自适配通信环境中文技术文档》</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span style=\"font-family: SimSun;\">马维达</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr><tr><td valign=\"top\" width=\"271\" style=\"border-width: medium 1pt 1pt; border-top-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; border-left-color: windowtext; width: 203.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ACE html</span></p></td><td valign=\"top\" width=\"200\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 150pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">用</span><span lang=\"EN-US\">Doxgen</span><span style=\"font-family: SimSun;\">自动生成的文档</span></p></td><td valign=\"top\" width=\"145\" style=\"border-width: medium 1pt 1pt medium; border-top-style: none; border-left-style: none; border-right-color: windowtext; padding: 0cm 5.4pt; width: 108.4pt; border-bottom-color: windowtext;\"><p class=\"a4\"><span lang=\"EN-US\">&nbsp;</span></p></td></tr></tbody></table><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><a name=\"_Toc207687170\"><span lang=\"EN-US\">&nbsp;</span></a></p><h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><a name=\"t51\"></a><a name=\"_Toc208675508\"><span lang=\"EN-US\">22.3<span style=\"font-weight: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: SimHei;\">文章说明和版权</span></a><span style=\"font-family: SimHei;\">声明</span></h2><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">此文档是耗费两年时间总结一些自己在使用</span><span lang=\"EN-US\">ACE</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">7</span><span style=\"font-family: SimSun;\">年中发现的一些问题，在凑够了</span><span lang=\"EN-US\">20</span><span style=\"font-family: SimSun;\">个标题后才进行发布。后面也许会根据自己的一些新的发现修正补充一下文档，也许。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">本着自由的精神，阅读者可以无须授权就可以自由的转载这个文档，我只保留作者的署名权利，也就是说，你转载只需保留这段说明和文档的完整性（但你不能修改这个文档，谢谢）。</span></p><p class=\"MsoNormal\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: SimSun;\">这篇文档也是为了回馈一下这些年来为自由软件奋斗的人，也谢谢周围陪我一起玩</span><span lang=\"EN-US\">ACE&nbsp;</span><span style=\"font-family: SimSun;\">的</span><span lang=\"EN-US\">Rong</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">Sonicmao</span><span style=\"font-family: SimSun;\">，</span><span lang=\"EN-US\">Awayfang</span><span style=\"font-family: SimSun;\">等兄弟们。最后感谢一下</span><span lang=\"EN-US\">Annie</span><span style=\"font-family: SimSun;\">，她忍受了我整理文档而不陪她看电视。</span></p>"
    }
  ]
}
{
  "title": "fork函数",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 14pt;\"><strong>&nbsp;一、fork入门知识</strong></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个进程，包括代码、数据和分配给进程的资源。fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br>&nbsp;&nbsp;&nbsp; 一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp; 我们来看一个例子：</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><div class=\"dp-highlighter bg_cpp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-cpp\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">/*</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;fork_test.c</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;version&nbsp;1</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;Created&nbsp;on:&nbsp;2010-5-29</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Author:&nbsp;wangth</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*/</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;unistd.h&gt;</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;stdio.h&gt;&nbsp;</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"datatypes\">int</span>&nbsp;main&nbsp;()&nbsp;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">{&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;pid_t&nbsp;fpid;&nbsp;<span class=\"comment\">//fpid表示fork函数返回的值</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;count=0;&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;fpid=fork();&nbsp;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>&nbsp;(fpid&nbsp;&lt;&nbsp;0)&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"error&nbsp;in&nbsp;fork!\"</span>);&nbsp;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;<span class=\"keyword\">if</span>&nbsp;(fpid&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"i&nbsp;am&nbsp;the&nbsp;child&nbsp;process,&nbsp;my&nbsp;process&nbsp;id&nbsp;is&nbsp;%d/n\"</span>,getpid());&nbsp;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"我是爹的儿子/n\"</span>);<span class=\"comment\">//对某些人来说中文看着更直白。</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;{&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"i&nbsp;am&nbsp;the&nbsp;parent&nbsp;process,&nbsp;my&nbsp;process&nbsp;id&nbsp;is&nbsp;%d/n\"</span>,getpid());&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"我是孩子他爹/n\"</span>);&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"统计结果是:&nbsp;%d/n\"</span>,count);&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span style=\"color: rgb(0, 0, 255);\">运行结果是：</span><br>&nbsp;&nbsp;&nbsp;&nbsp;i am the child process, my process id is 5574<br>&nbsp;&nbsp;&nbsp; 我是爹的儿子<br>&nbsp;&nbsp;&nbsp; 统计结果是: 1<br>&nbsp;&nbsp;&nbsp; i am the parent process, my process id is 5573<br>&nbsp;&nbsp;&nbsp; 我是孩子他爹<br>&nbsp;&nbsp;&nbsp; 统计结果是: 1</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br>&nbsp;&nbsp;&nbsp; 在语句fpid=fork()之前，只有一个进程在执行这段代码，但在这条语句之后，就变成两个进程在执行了，这两个进程的几乎完全相同，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">将要执行的下一条语句都是if(fpid&lt;0)……<br>&nbsp;&nbsp;&nbsp; 为什么两个进程的fpid不同呢，这与fork函数的特性有关。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px; color: rgb(0, 0, 255);\"><strong>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</strong><br>&nbsp;&nbsp;&nbsp; 1）在父进程中，fork返回新创建子进程的进程ID；<br>&nbsp;&nbsp;&nbsp; 2）在子进程中，fork返回0；<br>&nbsp;&nbsp;&nbsp; 3）如果出现错误，fork返回一个负值；</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp; 在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;引用一位网友的话来解释fpid的值为什么在父子进程中不同。“其实就相当于链表，进程形成了链表，父进程的fpid(p 意味point)指向子进程的进程id,</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">因为子进程没有子进程，所以其fpid为0.</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br><strong><span style=\"color: rgb(0, 0, 255);\">fork出错可能有两种原因：</span></strong><br><span style=\"color: rgb(0, 0, 255);\">&nbsp;&nbsp;&nbsp; 1）当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。</span><br><span style=\"color: rgb(0, 0, 255);\">&nbsp;&nbsp;&nbsp; 2）系统内存不足，这时errno的值被设置为ENOMEM。</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br>&nbsp;&nbsp;&nbsp; 创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程执行没有固定的先后顺序，哪个进程先执行要看系统的进程调度策略。<br>&nbsp;&nbsp;&nbsp; 每个进程都有一个独特（互不相同）的进程标识符（process ID），可以通过getpid（）函数获得，还有一个记录父进程pid的变量，可以通过getppid（）函数获得变量的值。<br><span style=\"color: rgb(0, 0, 255);\">fork执行完毕后，出现两个进程，</span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><img src=\"quiver-image-url/DDE97643D8B63817B09F846B8BF86D5F.png\" alt=\"\" width=\"417\" height=\"285\"></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp; 有人说两个进程的内容完全一样啊，怎么打印的结果不一样啊，那是因为判断条件的原因，上面列举的只是进程的代码和指令，还有变量啊。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br>&nbsp;&nbsp;&nbsp; 执行完fork后，进程1的变量为count=0，fpid！=0（父进程）。进程2的变量为count=0，fpid=0（子进程），这两个进程的变量都是独立的，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">存在不同的地址中，不是共用的，这点要注意。可以说，我们就是通过fpid来识别和操作父子进程的。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br>&nbsp;&nbsp;&nbsp; 还有人可能疑惑为什么不是从#include处开始复制代码的，这是因为fork是把进程当前的情况拷贝一份，执行fork时，进程已经执行完了int count=0;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">fork只拷贝下一个要执行的代码到新的进程。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 14pt;\"><strong>二、fork进阶知识</strong></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;先看一份代码：</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><div class=\"dp-highlighter bg_cpp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-cpp\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">/*</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;fork_test.c</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;version&nbsp;2</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;Created&nbsp;on:&nbsp;2010-5-29</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Author:&nbsp;wangth</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*/</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;unistd.h&gt;</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;stdio.h&gt;</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"datatypes\">int</span>&nbsp;main(<span class=\"keyword\">void</span>)&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">{&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;i=0;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"i&nbsp;son/pa&nbsp;ppid&nbsp;pid&nbsp;&nbsp;fpid/n\"</span>);&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"comment\">//ppid指当前进程的父进程pid</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"comment\">//pid指当前进程的pid,</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"comment\">//fpid指fork返回给当前进程的值</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(i=0;i&lt;2;i++){&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pid_t&nbsp;fpid=fork();&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(fpid==0)&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"%d&nbsp;child&nbsp;&nbsp;%4d&nbsp;%4d&nbsp;%4d/n\"</span>,i,getppid(),getpid(),fpid);&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"%d&nbsp;parent&nbsp;%4d&nbsp;%4d&nbsp;%4d/n\"</span>,i,getppid(),getpid(),fpid);&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp; 运行结果是：<br>&nbsp;&nbsp;&nbsp;&nbsp;i son/pa ppid pid&nbsp; fpid<br>&nbsp;&nbsp;&nbsp; 0 parent 2043 3224 3225<br>&nbsp;&nbsp;&nbsp; 0 child&nbsp; 3224 3225&nbsp;&nbsp;&nbsp; 0<br>&nbsp;&nbsp;&nbsp; 1 parent 2043 3224 3226<br>&nbsp;&nbsp;&nbsp; 1 parent 3224 3225 3227<br>&nbsp;&nbsp;&nbsp; 1 child&nbsp;&nbsp;&nbsp;&nbsp; 1 3227&nbsp;&nbsp;&nbsp; 0<br>&nbsp;&nbsp;&nbsp; 1 child&nbsp;&nbsp;&nbsp;&nbsp; 1 3226&nbsp;&nbsp;&nbsp; 0&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br>&nbsp;&nbsp;&nbsp; 这份代码比较有意思，我们来认真分析一下：<br>&nbsp;&nbsp;&nbsp;&nbsp;第一步：在父进程中，指令执行到for循环中，i=0，接着执行fork，fork执行完后，系统中出现两个进程，分别是p3224和p3225</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">（后面我都用pxxxx表示进程id为xxxx的进程）。可以看到父进程p3224的父进程是p2043，子进程p3225的父进程正好是p3224。我们用一个链表来表示这个关系：<br>&nbsp;&nbsp;&nbsp;&nbsp;p2043-&gt;p3224-&gt;p3225&nbsp;<br>&nbsp;&nbsp;&nbsp; 第一次fork后，p3224（父进程）的变量为i=0，fpid=3225（fork函数在父进程中返向子进程id），代码内容为：</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><div class=\"dp-highlighter bg_c-sharp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-c\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"keyword\">for</span>(i=0;i&lt;2;i++){&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;pid_t&nbsp;fpid=fork();<span class=\"comment\">//执行完毕，i=0，fpid=3225</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(fpid==0)&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"%d&nbsp;child&nbsp;&nbsp;%4d&nbsp;%4d&nbsp;%4d/n\"</span>,i,getppid(),getpid(),fpid);&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"%d&nbsp;parent&nbsp;%4d&nbsp;%4d&nbsp;%4d/n\"</span>,i,getppid(),getpid(),fpid);&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp; p3225（子进程）的变量为i=0，fpid=0（fork函数在子进程中返回0），代码内容为：</span></p><div class=\"dp-highlighter bg_c-sharp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-c\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"keyword\">for</span>(i=0;i&lt;2;i++){&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;pid_t&nbsp;fpid=fork();<span class=\"comment\">//执行完毕，i=0，fpid=0</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(fpid==0)&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"%d&nbsp;child&nbsp;&nbsp;%4d&nbsp;%4d&nbsp;%4d/n\"</span>,i,getppid(),getpid(),fpid);&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"%d&nbsp;parent&nbsp;%4d&nbsp;%4d&nbsp;%4d/n\"</span>,i,getppid(),getpid(),fpid);&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;所以打印出结果：<br>&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;parent 2043 3224 3225<br>&nbsp;&nbsp;&nbsp; 0 child&nbsp; 3224 3225&nbsp;&nbsp;&nbsp; 0<br>&nbsp;&nbsp;&nbsp;&nbsp;第二步：假设父进程p3224先执行，当进入下一个循环时，i=1，接着执行fork，系统中又新增一个进程p3226，对于此时的父进程，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">p2043-&gt;p3224（当前进程）-&gt;p3226（被创建的子进程）。<br>&nbsp;&nbsp;&nbsp; 对于子进程p3225，执行完第一次循环后，i=1，接着执行fork，系统中新增一个进程p3227，对于此进程，p3224-&gt;p3225（当前进程）-&gt;p3227（被创建的子进程）。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">从输出可以看到p3225原来是p3224的子进程，现在变成p3227的父进程。父子是相对的，这个大家应该容易理解。只要当前进程执行了fork，该进程就变成了父进程了，就打印出了parent。<br><span style=\"color: rgb(0, 0, 255);\">&nbsp; 所以打印出结果是：</span><br>&nbsp;&nbsp;&nbsp;&nbsp;1 parent 2043 3224 3226<br>&nbsp;&nbsp;&nbsp; 1 parent 3224 3225 3227&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;第三步：第二步创建了两个进程p3226，p3227，这两个进程执行完printf函数后就结束了，因为这两个进程无法进入第三次循环，无法fork，该执行return 0;了，其他进程也是如此。<br>&nbsp;&nbsp;&nbsp; 以下是p3226，p3227打印出的结果：<br>&nbsp;&nbsp;&nbsp;&nbsp;1 child&nbsp;&nbsp;&nbsp;&nbsp; 1 3227&nbsp;&nbsp;&nbsp; 0<br>&nbsp;&nbsp;&nbsp; 1 child&nbsp;&nbsp;&nbsp;&nbsp; 1 3226&nbsp;&nbsp;&nbsp; 0&nbsp;<br>&nbsp;&nbsp;&nbsp; 细心的读者可能注意到p3226，p3227的父进程难道不该是p3224和p3225吗，怎么会是1呢？这里得讲到进程的创建和死亡的过程，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">在p3224和p3225执行完第二个循环后，main函数就该退出了，也即进程该死亡了，因为它已经做完所有事情了。p3224和p3225死亡后，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">p3226，p3227就没有父进程了，这在操作系统是不被允许的，所以p3226，p3227的父进程就被置为p1了，p1是永远不会死亡的，至于为什么，</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">这里先不介绍，留到“三、fork高阶知识”讲。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><br>&nbsp;&nbsp;&nbsp; 总结一下，这个程序执行的流程如下：</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><img src=\"quiver-image-url/FF806E28654D7A39BD0E80ADD4026547.jpg\" alt=\"\" width=\"369\" height=\"198\"></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp; 这个程序最终产生了3个子进程，执行过6次printf（）函数。<br>&nbsp;&nbsp;&nbsp; 我们再来看一份代码：</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><div class=\"dp-highlighter bg_cpp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-cpp\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">/*</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;fork_test.c</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;version&nbsp;3</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;Created&nbsp;on:&nbsp;2010-5-29</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Author:&nbsp;wangth</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*/</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;unistd.h&gt;</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;stdio.h&gt;</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"datatypes\">int</span>&nbsp;main(<span class=\"keyword\">void</span>)&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">{&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;i=0;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(i=0;i&lt;3;i++){&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pid_t&nbsp;fpid=fork();&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(fpid==0)&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"son/n\"</span>);&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"father/n\"</span>);&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它的执行结果是：<br>&nbsp;&nbsp;&nbsp;&nbsp;father<br>&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp; son&nbsp;<br>&nbsp;&nbsp;&nbsp; 这里就不做详细解释了，只做一个大概的分析。<br>&nbsp;&nbsp;&nbsp; for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i=0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; father&nbsp;&nbsp;&nbsp;&nbsp; father&nbsp;&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;son&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;son<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; son&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; father&nbsp;&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;son<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;son&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; father<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; son<br>&nbsp;&nbsp;&nbsp; 其中每一行分别代表一个进程的运行打印结果。<br>&nbsp;&nbsp;&nbsp; 总结一下规律，对于这种N次循环的情况，执行printf函数的次数为2*（1+2+4+……+2<sup>N-1</sup>）次，创建的子进程数为1+2+4+……+2<sup>N-1</sup>个。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><strong>(感谢gao_jiawei网友指出的错误，原本我的结论是“执行printf函数的次数为2*（1+2+4+……+2<sup>N</sup>）次，创建的子进程数为1+2+4+……+2<sup>N&nbsp;</sup>”，这是错的)</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;网上有人说N次循环产生2*（1+2+4+……+2<sup>N</sup>）个进程，这个说法是不对的，希望大家需要注意。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp; 数学推理见<a href=\"http://202.117.3.13/wordpress/?p=81\">http://202.117.3.13/wordpress/?p=81</a>（该博文的最后）。<br>&nbsp;&nbsp;&nbsp; 同时，大家如果想测一下一个程序中到底创建了几个子进程，最好的方法就是调用printf函数打印该进程的pid，也即调用printf(\"%d/n\",getpid());或者通过printf(\"+/n\");</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">来判断产生了几个进程。有人想通过调用printf(\"+\");来统计创建了几个进程，这是不妥当的。具体原因我来分析。<br>&nbsp;&nbsp;&nbsp; 老规矩，大家看一下下面的代码：</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><div class=\"dp-highlighter bg_cpp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-cpp\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">/*</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;fork_test.c</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;version&nbsp;4</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;Created&nbsp;on:&nbsp;2010-5-29</span>&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Author:&nbsp;wangth</span>&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"comment\">&nbsp;*/</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;unistd.h&gt;</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;stdio.h&gt;</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"datatypes\">int</span>&nbsp;main()&nbsp;{&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;pid_t&nbsp;fpid;<span class=\"comment\">//fpid表示fork函数返回的值</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//printf(\"fork!\");</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"fork!/n\"</span>);&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;fpid&nbsp;=&nbsp;fork();&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>&nbsp;(fpid&nbsp;&lt;&nbsp;0)&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"error&nbsp;in&nbsp;fork!\"</span>);&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;<span class=\"keyword\">if</span>&nbsp;(fpid&nbsp;==&nbsp;0)&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"I&nbsp;am&nbsp;the&nbsp;child&nbsp;process,&nbsp;my&nbsp;process&nbsp;id&nbsp;is&nbsp;%d/n\"</span>,&nbsp;getpid());&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"I&nbsp;am&nbsp;the&nbsp;parent&nbsp;process,&nbsp;my&nbsp;process&nbsp;id&nbsp;is&nbsp;%d/n\"</span>,&nbsp;getpid());&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(0, 0, 255);\">执行结果如下：</span><br>&nbsp;&nbsp;&nbsp;&nbsp;fork!<br>&nbsp;&nbsp;&nbsp; I am the parent process, my process id is 3361<br>&nbsp;&nbsp;&nbsp; I am the child process, my process id is 3362&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;如果把语句printf(\"fork!/n\");注释掉，执行printf(\"fork!\");<br>&nbsp;&nbsp;&nbsp; 则新的程序的执行结果是：<br>&nbsp;&nbsp;&nbsp;&nbsp;fork!I am the parent process, my process id is 3298<br>&nbsp;&nbsp;&nbsp; fork!I am the child process, my process id is 3299&nbsp;</span></span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\"><br>&nbsp;&nbsp;&nbsp; 程序的唯一的区别就在于一个/n回车符号，为什么结果会相差这么大呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;这就跟printf的缓冲机制有关了，printf某些内容时，操作系统仅仅是把该内容放到了stdout的缓冲队列里了,并没有实际的写到屏幕上。</span></span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">但是,只要看到有/n 则会立即刷新stdout,因此就马上能够打印了。<br>&nbsp;&nbsp;&nbsp; 运行了printf(\"fork!\")后,“fork!”仅仅被放到了缓冲里,程序运行到fork时缓冲里面的“fork!”&nbsp; 被子进程复制过去了。因此在子进程度stdout</span></span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">缓冲里面就也有了fork! 。所以,你最终看到的会是fork!&nbsp; 被printf了2次！！！！<br>&nbsp;&nbsp;&nbsp; 而运行printf(\"fork! /n\")后,“fork!”被立即打印到了屏幕上,之后fork到的子进程里的stdout缓冲里不会有fork! 内容。因此你看到的结果会是fork! 被printf了1次！！！！<br>&nbsp;&nbsp;&nbsp;&nbsp;所以说printf(\"+\");不能正确地反应进程的数量。<br>&nbsp;&nbsp;&nbsp; 大家看了这么多可能有点疲倦吧，不过我还得贴最后一份代码来进一步分析fork函数。</span></span></span></p><div class=\"dp-highlighter bg_cpp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-cpp\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;stdio.h&gt;</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;unistd.h&gt;</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"datatypes\">int</span>&nbsp;main(<span class=\"datatypes\">int</span>&nbsp;argc,&nbsp;<span class=\"datatypes\">char</span>*&nbsp;argv[])&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">{&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;fork();&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;fork()&nbsp;&amp;&amp;&nbsp;fork()&nbsp;||&nbsp;fork();&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;fork();&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp; 问题是不算main这个进程自身，程序到底创建了多少个进程。<br>&nbsp;&nbsp;&nbsp; 为了解答这个问题，我们先做一下弊，先用程序验证一下，到此有多少个进程。</span></span></span></p><div class=\"dp-highlighter bg_c-sharp\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><ol class=\"dp-c\" start=\"1\"><li class=\"alt\"><span style=\"font-size: 16px;\"><span class=\"preprocessor\">#include&nbsp;&lt;stdio.h&gt;</span>&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\"><span class=\"keyword\">int</span>&nbsp;main(<span class=\"keyword\">int</span>&nbsp;argc,&nbsp;<span class=\"keyword\">char</span>*&nbsp;argv[])&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">{&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;fork();&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;fork()&nbsp;&amp;&amp;&nbsp;fork()&nbsp;||&nbsp;fork();&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;fork();&nbsp;&nbsp;</span></li><li class=\"alt\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;printf(<span class=\"string\">\"+/n\"</span>);&nbsp;&nbsp;</span></li><li><span style=\"font-size: 16px;\">}&nbsp;&nbsp;</span></li></ol></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(0, 0, 255);\">答案是总共20个进程，除去main进程，还有19个进程。</span><br>&nbsp;&nbsp;&nbsp; 我们再来仔细分析一下，为什么是还有19个进程。<br>&nbsp;&nbsp;&nbsp; 第一个fork和最后一个fork肯定是会执行的。<br>&nbsp;&nbsp;&nbsp; 主要在中间3个fork上，可以画一个图进行描述。<br>&nbsp;&nbsp;&nbsp; 这里就需要注意&amp;&amp;和||运算符。<br>&nbsp;&nbsp;&nbsp; A&amp;&amp;B，如果A=0，就没有必要继续执行&amp;&amp;B了；A非0，就需要继续执行&amp;&amp;B。<br>&nbsp;&nbsp;&nbsp; A||B，如果A非0，就没有必要继续执行||B了，A=0，就需要继续执行||B。<br>&nbsp;&nbsp;&nbsp; fork()对于父进程和子进程的返回值是不同的，按照上面的A&amp;&amp;B和A||B的分支进行画图，可以得出5个分支。</span></span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"quiver-image-url/49C5699CBB0F00D391BE75ADBC72F52E.png\" alt=\"\" height=\"419\" width=\"1011\"></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp; 加上前面的fork和最后的fork，总共4*5=20个进程，除去main主进程，就是19个进程了。</span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 14pt;\"><span lang=\"EN-US\"><span lang=\"EN-US\"><strong>三、fork高阶知识</strong></span></span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这一块我主要就fork函数讲一下操作系统进程的创建、死亡和调度等。因为时间和精力限制，我先写到这里，下次找个时间我争取把剩下的内容补齐。</span></span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">&nbsp;</span></span></span></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 16px;\"><span lang=\"EN-US\"><span lang=\"EN-US\">原文地址：<a href=\"http://blog.csdn.net/jason314/article/details/5640969\">http://blog.csdn.net/jason314/article/details/5640969</a></span></span></span></p>"
    }
  ]
}
{
  "title": "两种方式创建你自己的 Docker 基本映像",
  "cells": [
    {
      "type": "text",
      "data": "<div class=\"h hm\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><h1 class=\"ph\" id=\"article_title\"><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">欢迎大家，今天我们学习一下 docker 基本映像以及如何构建我们自己的 docker 基本映像。</span><a href=\"https://www.docker.com/\" style=\"font-size: 14px;\">Docker</a><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">&nbsp;</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">是一个开源项目，提供了一个可以打包、装载和运行任何应用的轻量级容器的开放平台。它没有语言支持、框架和打包系统的限制，从小型的家用电脑到高端服务 器，在何时何地都可以运行。这使它们可以不依赖于特定软件栈和供应商，像一块块积木一样部署和扩展网络应用、数据库和后端服务。</span><br></h1></div><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">Docker 映像是不可更改的只读层。Docker 使用&nbsp;<strong>Union File System</strong>&nbsp;在只读文件系统上增加可读写的文件系统，但所有更改都发生在最顶层的可写层，而其下的只读映像上的原始文件仍然不会改变。由于映像不会改变，也就没有状 态。基本映像是没有父类的那些映像。Docker 基本映像主要的好处是它允许我们有一个独立运行的 Linux 操作系统。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><img src=\"quiver-image-url/5D71055942788CAFA62DF85FC271968B.png\" alt=\"\" height=\"600\" width=\"800\"></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">下面是我们如何可以创建自定义的基本映像的方式。</p><h3 id=\"toc_1\" style=\"color: rgb(0, 0, 0); font-family: Arial;\">1. 使用 Tar 创建 Docker 基本映像</h3><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">我们可以使用 tar 构建我们自己的基本映像，我们从一个运行中的 Linux 发行版开始，将其打包为基本映像。这过程可能会有些不同，它取决于我们打算构建的发行版。在 Debian 发行版中，已经预带了 debootstrap。在开始下面的步骤之前，我们需要安装 debootstrap。debootstrap 用来获取构建基本系统需要的包。这里，我们构建基于 Ubuntu 14.04 \"Trusty\" 的映像。要完成这些，我们需要在终端或者 shell 中运行以下命令。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"color: rgb(0, 0, 0); font-size: 14px;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$ sudo debootstrap trusty trusty </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"str\">/dev/</span><span class=\"kwd\">null</span></code></li><li class=\"L1\"><code><span class=\"pln\">$ sudo tar </span><span class=\"pun\">-</span><span class=\"pln\">C trusty </span><span class=\"pun\">-</span><span class=\"pln\">c </span><span class=\"pun\">.</span><span class=\"pln\"> </span><span class=\"pun\">|</span><span class=\"pln\"> sudo docker </span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\"> trusty</span></code></li></ol></pre><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><img src=\"quiver-image-url/217C54F399C90798879A46E6D1322616.png\" alt=\"使用debootstrap构建docker基本映像\" width=\"577\" height=\"69\"></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">上面的命令为当前文件夹创建了一个 tar 文件并输出到标准输出中，\"docker import - trusty\" 通过管道从标准输入中获取这个 tar 文件并根据它创建一个名为 trusty 的基本映像。然后，如下所示，我们将运行映像内部的一条测试命令。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"color: rgb(0, 0, 0); font-size: 14px;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$  docker run trusty cat </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">lsb</span><span class=\"pun\">-</span><span class=\"pln\">release</span></code></li></ol></pre><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><a href=\"https://github.com/docker/docker/blob/master/contrib/mkimage-busybox.sh\">Docker GitHub Repo</a>&nbsp;中有一些允许我们快速构建基本映像的事例脚本.</p><h3 id=\"toc_2\" style=\"color: rgb(0, 0, 0); font-family: Arial;\">2. 使用Scratch构建基本映像</h3><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">在 Docker registry 中，有一个被称为 Scratch 的使用空 tar 文件构建的特殊库：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"color: rgb(0, 0, 0); font-size: 14px;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$ tar cv </span><span class=\"pun\">--</span><span class=\"pln\">files</span><span class=\"pun\">-</span><span class=\"kwd\">from</span><span class=\"pln\"> </span><span class=\"pun\">/</span><span class=\"pln\">dev</span><span class=\"pun\">/</span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"pun\">|</span><span class=\"pln\"> docker </span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\"> scratch</span></code></li></ol></pre><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><img src=\"quiver-image-url/F4396E9D3BC1F97776A78A38BEFA3590.png\" alt=\"使用scratch构建docker基本映像\" width=\"677\" height=\"52\"></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">我们可以使用这个映像构建新的小容器：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"color: rgb(0, 0, 0); font-size: 14px;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">FROM scratch</span></code></li><li class=\"L1\"><code><span class=\"pln\">ADD script</span><span class=\"pun\">.</span><span class=\"pln\">sh </span><span class=\"pun\">/</span><span class=\"pln\">usr</span><span class=\"pun\">/</span><span class=\"kwd\">local</span><span class=\"pun\">/</span><span class=\"pln\">bin</span><span class=\"pun\">/</span><span class=\"pln\">run</span><span class=\"pun\">.</span><span class=\"pln\">sh</span></code></li><li class=\"L2\"><code><span class=\"pln\">CMD </span><span class=\"pun\">[</span><span class=\"str\">\"/usr/local/bin/run.sh\"</span><span class=\"pun\">]</span></code></li></ol></pre><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">上面的 Dockerfile 文件来自一个很小的映像。这里，它首先从一个完全空的文件系统开始，然后它复制新建的 /usr/local/bin/run.sh 为 script.sh ，然后运行脚本 /usr/local/bin/run.sh。</p><h3 id=\"toc_3\" style=\"color: rgb(0, 0, 0); font-family: Arial;\">结尾</h3><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">这这个教程中，我们学习了如何构建一个开箱即用的自定义 Docker 基本映像。构建一个 docker 基本映像是一个很简单的任务，因为这里有很多已经可用的包和脚本。如果我们想要在里面安装想要的东西，构建 docker 基本映像非常有用。如果有任何疑问，建议或者反馈，请在下面的评论框中写下来。非常感谢！享受吧 :-)</p>"
    }
  ]
}
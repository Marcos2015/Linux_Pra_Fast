{
  "title": "Managing Data in Containers",
  "cells": [
    {
      "type": "text",
      "data": "<embed id=\"xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd\" type=\"application/thunder_download_plugin\" height=\"0\" width=\"0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-size: 1em; color: rgb(85, 85, 85); font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, STHeiti, 'Microsoft Yahei', sans-serif; line-height: 1.6;\">前面已经介绍了许多基础的知识，现在我们来一起学习如何管理Docker容器里面以及容器之间的数据</span><div class=\"article fmt\" style=\"font-size: 14px; box-sizing: border-box; overflow: hidden; line-height: 1.6; word-wrap: break-word; color: rgb(51, 51, 51); font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, STHeiti, 'Microsoft Yahei', sans-serif;\"><p style=\"box-sizing: border-box; margin: 18px 0px;\">先介绍两种原始的方法来管理Docker中的应用:</p><ul style=\"box-sizing: border-box; margin: 18px 0px; padding-left: 30px;\"><li style=\"box-sizing: border-box;\">ata volumes</li><li style=\"box-sizing: border-box;\">Data volume container</li></ul><h2 id=\"articleHeader0\" style=\"box-sizing: border-box; font-family: inherit; line-height: 1.2; color: inherit; margin: 28px 0px 18px; font-size: 1.42857em; padding-bottom: 8px; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(204, 204, 204);\">Data volumes</h2><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\"><code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">data volumns</code>是专门设计的工具，它绕过了UFS直接工作与一个或多个容器。它为数据持久和分享提供了许多功能：</p></blockquote><ul style=\"box-sizing: border-box; margin: 18px 0px; padding-left: 30px;\"><li style=\"box-sizing: border-box;\">容器被创建时，卷（volumn）被初始化。如果基础镜像在指定的挂载点包含数据，这些数据也会被复制到新容器的卷中。</li><li style=\"box-sizing: border-box;\">数据卷可以在多个容器间分享和复用</li><li style=\"box-sizing: border-box;\">可以直接更改卷里面的数据</li><li style=\"box-sizing: border-box;\">更新镜像时对容器数据卷的更改将不会被包含到新的镜像中</li><li style=\"box-sizing: border-box;\">即使容器被删除，数据卷依然存在</li></ul><p style=\"box-sizing: border-box; margin: 18px 0px;\">数据卷的设计被用来持久化数据，让数据能够独立于容器的生命周期。因此当删除容器时Docker也不会自动删除数据卷。</p><h3 id=\"articleHeader1\" style=\"box-sizing: border-box; font-family: inherit; line-height: 1.2; color: inherit; margin: 28px 0px 18px; font-size: 1.14286em;\">Adding a data volume</h3><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\">增加数据卷</p></blockquote><p style=\"box-sizing: border-box; margin: 18px 0px;\"><code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">docker create -v</code>和<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">docker run -v</code>中的<strong style=\"box-sizing: border-box;\">-v</strong>标记来给容器添加数据卷，我们可以在一条命令中多次使用<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">-v</code>标记来添加多个数据卷，下面的例子挂载了一个数据卷在我们的web应用容器中。</p><pre class=\"hljs sql\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">docker run -d -P <span class=\"hljs-comment\" style=\"box-sizing: border-box; color: rgb(147, 161, 161);\">--name web -v /webapp training/webapp python app.py</span>\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">这条命令执行后会在容器中创建一个新的卷<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">webapp</code></p><h3 id=\"articleHeader2\" style=\"box-sizing: border-box; font-family: inherit; line-height: 1.2; color: inherit; margin: 28px 0px 18px; font-size: 1.14286em;\">Mount a Host Directory as a Data Volume</h3><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\">为数据卷挂在主机目录</p></blockquote><p style=\"box-sizing: border-box; margin: 18px 0px;\">除了使用-v标记来创建卷之外，你还可以挂载Docker守护进程主机的目录到容器中。</p><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box;\">注意：</span>如果你使用Boot2Docker，那么你的Docker守护进程只能被限制访问OSX/windows特定的文件目录。Boot2Docker会努力自动分享OSX中的<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/users</code>目录和windows中的<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">C:users</code>目录。因此你可以通过<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">docker run -v /Users/&lt;path&gt;:/&lt;container path&gt;</code>&nbsp;... (OSX)或者<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">docker run -v /c/Users/&lt;path&gt;:/&lt;container path ...</code>(Windows).来挂在文件或目录。所有的其它路径（不是/users和C：users）都来自Boot2Docker虚拟机中的文件系统。</p></blockquote><pre class=\"hljs nginx\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><span class=\"hljs-title\" style=\"box-sizing: border-box; color: rgb(133, 153, 0);\">docker</span> run -d -P --name web -v /src/<span class=\"hljs-url\" style=\"box-sizing: border-box;\">webapp:/opt/webapp</span> training/webapp python app.py\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">上述命令会把主机的<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/src/webapp</code>目录挂在到容器中的<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/opt/webapp</code>下</p><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box;\">注意：</span>如果<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/opt/webapp</code>目录已经存在与容器的镜像中，那么<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/opt/webapp</code>中的内容会被主机上的<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/src/webapp</code>中的数据替换，这个和mount命令是一致的。</p></blockquote><p style=\"box-sizing: border-box; margin: 18px 0px;\">数据卷挂在数据对测试非常有用，比如我们可以把源代码挂在到容器中，然后修改代码看看应用会发生什么。主机上的目录必须是绝对路径，如果这个目录不存在Docker会自动去创建1个。</p><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box;\">注意：</span>不能在<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">Dockerfile</code>中来配置挂载目录，因为<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">Dockerfile</code>的目的是更方便的来一直和分享镜像，而主机目录依赖于主机，（对于一个目录，在不同的主机上可能绝对路径不一致）所以Dockerfile中目录挂载不会适用于所有的主机</p></blockquote><p style=\"box-sizing: border-box; margin: 18px 0px;\">挂载的数据卷默认是可读写的，当然我们可以通过命令标记来让它<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">只读</code></p><pre class=\"hljs nginx\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><span class=\"hljs-title\" style=\"box-sizing: border-box; color: rgb(133, 153, 0);\">docker</span> run -d -P --name web -v /src/<span class=\"hljs-url\" style=\"box-sizing: border-box;\">webapp:/opt/webapp:ro</span> training/webapp python app.py\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">上述命令中我们通过<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">ro</code>选项来让数据卷只读</p><h3 id=\"articleHeader3\" style=\"box-sizing: border-box; font-family: inherit; line-height: 1.2; color: inherit; margin: 28px 0px 18px; font-size: 1.14286em;\">Mount a Host File as a Data Volume</h3><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\">挂载主机文件作为数据卷</p></blockquote><p style=\"box-sizing: border-box; margin: 18px 0px;\"><code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">-v</code>标记还可以用来挂在来自主机的文件，而不仅仅是目录</p><pre class=\"hljs nginx\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"><span class=\"hljs-title\" style=\"box-sizing: border-box; color: rgb(133, 153, 0);\">docker</span> run --rm -it -v ~/.bash_<span class=\"hljs-url\" style=\"box-sizing: border-box;\">history:/.bash_history</span> ubuntu /bin/bash\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">上述命令会带你到一个新容器的shell界面，你会有来自主机的bash历史。因为容器和主机共享了一个<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">.bash_history</code>文件，所以你在容器中的命令历史和主机中的历史都会记录到<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">.bash_history</code>中，这样当你退出容器中时，你在容器中的命令历史被保存下来了，在主机的shell历史记录中仍然能够看到容器中的历史。</p><p style=\"box-sizing: border-box; margin: 18px 0px;\"><img src=\"quiver-image-url/D862A75BBBB984ECB7F40D0B6BA70D96.png\" alt=\"\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; position: static !important;\" width=\"615\" height=\"426\"></p><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box;\">注意：</span>人们会使用很多工具来编辑文件，<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">vi</code>，<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">sed --in-place</code>，这些都会导致文件的索引节点改变。Docker 1.1.0之前，文件修改会报如<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">sed: cannot rename ./sedKdJ9Dy: Device or resource busy</code>这样的错误。但是在Docker 1.1.0之后，挂载文件让文件修改变得非常简单而不需要再去挂在包含这个文件的父目录了。</p></blockquote><h2 id=\"articleHeader4\" style=\"box-sizing: border-box; font-family: inherit; line-height: 1.2; color: inherit; margin: 28px 0px 18px; font-size: 1.42857em; padding-bottom: 8px; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(204, 204, 204);\">Creating and mounting a Data Volume Container</h2><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\">创建一个专门防数据的数据卷容器</p></blockquote><p style=\"box-sizing: border-box; margin: 18px 0px;\">如果你有一些持久化的数据需要在容器之间共享，或者想从非持久化容器使用持久化数据。最好的办法是创建名为<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">Data</code>的卷容器，把数据都挂在到Data容器里<br style=\"box-sizing: border-box;\">我们创建一个能分享数据的命名容器，他不运行任何应用，它重复使用<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">training/postgres</code>镜像以便所有的容器使用同一个层，这样可以节省磁盘空间。</p><pre class=\"hljs sql\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">docker <span class=\"hljs-operator\" style=\"box-sizing: border-box;\"><span class=\"hljs-keyword\" style=\"box-sizing: border-box; color: rgb(133, 153, 0);\">create</span> -v /dbdata <span class=\"hljs-comment\" style=\"box-sizing: border-box; color: rgb(147, 161, 161);\">--name dbdata training/postgres /bin/true</span>\n</span></code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">我们使用<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">--volumes-from</code>标记来绑定<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/dbdata</code>卷到另一个容器</p><pre class=\"hljs cs\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">docker run -d --volumes-<span class=\"hljs-keyword\" style=\"box-sizing: border-box; color: rgb(133, 153, 0);\">from</span> dbdata --name db1 training/postgres\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">或者</p><pre class=\"hljs cs\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">docker run -d --volumes-<span class=\"hljs-keyword\" style=\"box-sizing: border-box; color: rgb(133, 153, 0);\">from</span> dbdata --name db2 training/postgres\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">在是上述的例子中，我们在容器中挂在了<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/dbdata</code>卷，如果恰巧镜像<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">training/postgres</code>中也有<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/dbdata</code>这个目录，那么容器会隐藏<strong style=\"box-sizing: border-box;\">镜像的目录，而让容器中的/dbdata目录可见</strong>，新建多个数据容器同样是隐藏镜像的文件而显示容器中的文件，这种机制实现了数据卷的数据共享。<br style=\"box-sizing: border-box;\">你可以在一条命令中使用多个<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">--volumes-from</code>标记参数把多个容器的数据卷绑定在一起。<br style=\"box-sizing: border-box;\">上述的代码中db1和db2是挂载dbdata这个容器来扩展的，你也可以挂载db1或者db2来扩展你的数据卷。</p><pre class=\"hljs cs\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\"> docker run -d --name db3 --volumes-<span class=\"hljs-keyword\" style=\"box-sizing: border-box; color: rgb(133, 153, 0);\">from</span> db1 training/postgres\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">如果你想删除包含挂载数据卷的容器，甚至是初始化的容器<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">dbdata</code>，或者是由<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">dbdata</code>扩展的db1和db2，容器会删除，但是数据卷会留下。使用<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">docker rm -v</code>来删除容器的数据卷。</p><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box;\">注意：</span>当你删除容器没有使用<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">-v</code>标记的时候，Docker不会提示警告。没有使用<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">-v</code>标记删除容器，会让残留的<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">volumns</code>变得“无家可归”（就是没有容器再引用这个数据卷）。这样的卷很难删除而且会占用很多空间，我们正在努力改善数据卷的管理，你可以通过<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">pull request #8484</code>来跟进我们的进程。</p></blockquote><h2 id=\"articleHeader5\" style=\"box-sizing: border-box; font-family: inherit; line-height: 1.2; color: inherit; margin: 28px 0px 18px; font-size: 1.42857em; padding-bottom: 8px; border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(204, 204, 204);\">Backup, restore, or migrate data volumes</h2><blockquote style=\"box-sizing: border-box; padding: 10.5px 21px; margin-top: 18px; margin-bottom: 18px; font-size: 1em; border-left-width: 5px; border-color: rgb(0, 142, 89); color: rgb(85, 85, 85);\"><p style=\"box-sizing: border-box; margin: 0px;\">我们可以利用数据卷来有效的备份、恢复和迁移数据</p></blockquote><pre class=\"hljs ruby\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">docker run --volumes-from dbdata -v <span class=\"hljs-variable\" style=\"box-sizing: border-box; color: rgb(181, 137, 0);\">$(</span>pwd)<span class=\"hljs-symbol\" style=\"box-sizing: border-box; color: rgb(203, 75, 22);\">:/backup</span> ubuntu tar cvf /backup/backup.tar /dbdata\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">命令中我们启动了一个新的容器，它共享了来自<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">dbdata</code>容器的数据卷。然后我们挂在了一个本地主机的目录<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/backup</code>。最后我们使用<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">tar</code>命令把<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/dbdata</code>中的数据压缩成<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">dbdata.jar</code>放到<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">/backup</code>中。执行结束我们就完成了数据卷的数据备份工作。</p><p style=\"box-sizing: border-box; margin: 18px 0px;\">数据恢复</p><pre class=\"hljs ruby\" style=\"box-sizing: border-box; overflow: auto; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 10px; margin-top: 18px; margin-bottom: 18px; line-height: 1.3; word-break: break-all; color: rgb(101, 123, 131); background-color: rgb(246, 246, 246); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; position: relative; max-height: 500px;\"><code class=\"language\" style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 1em; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">docker run -v /dbdata --name dbdata2 ubuntu /bin/bash\ndocker run --volumes-from dbdata2 -v <span class=\"hljs-variable\" style=\"box-sizing: border-box; color: rgb(181, 137, 0);\">$(</span>pwd)<span class=\"hljs-symbol\" style=\"box-sizing: border-box; color: rgb(203, 75, 22);\">:/backup</span> busybox tar xvf /backup/backup.tar\n</code></pre><p style=\"box-sizing: border-box; margin: 18px 0px;\">创建一个新的容器<code style=\"box-sizing: border-box; font-family: Consolas, Menlo, Monaco, 'Courier New', monospace; font-size: 0.92857em; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(246, 246, 246);\">dbdata2</code>，解压文件到新的容器的数据卷。</p></div><div class=\"clearfix\" style=\"font-size: 14px; box-sizing: border-box; color: rgb(51, 51, 51); font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, STHeiti, 'Microsoft Yahei', sans-serif; line-height: 21px;\"><ul class=\"taglist--inline pull-left\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; list-style: none; padding: 0px; font-size: 0px; float: left !important;\"><li class=\"tagPopup\" style=\"box-sizing: border-box; padding: 0px; font-size: 13px; display: inline-block; margin-right: 0px;\"><a class=\"tag\" href=\"http://segmentfault.com/t/docker/blogs\" data-toggle=\"popover\" data-img=\"http://sfault-avatar.b0.upaiyun.com/269/397/2693973775-1040000000366352_huge100\" data-placement=\"top\" data-original-title=\"docker\" data-id=\"1040000000366352\" style=\"box-sizing: border-box; background-color: rgb(231, 242, 237); color: rgb(1, 126, 102); text-decoration: none; outline: 0px; display: inline-block; padding: 0px 8px; height: 24px; line-height: 24px; text-align: center;\">docker</a></li></ul></div>"
    }
  ]
}
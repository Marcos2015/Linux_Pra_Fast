{
  "title": "Docker终极指南",
  "cells": [
    {
      "type": "text",
      "data": "<embed id=\"xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd\" type=\"application/thunder_download_plugin\" height=\"0\" width=\"0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><a class=\"text\" href=\"http://dockone.io/topic/Docker\" style=\"font-family: 'Helvetica Neue', STHeiti, 'Microsoft YaHei', Helvetica, Arial, sans-serif; box-sizing: border-box; background-color: rgb(153, 207, 255); color: rgb(255, 255, 255); text-decoration: none; cursor: pointer; height: 20px; line-height: 16px; padding: 2px 5px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline !important; background-position: 0px 0px;\">Docker</a><div class=\"aw-mod aw-question-detail\" style=\"font-size: 14px; box-sizing: border-box; margin-bottom: 30px; padding: 10px 20px 0px; color: rgb(102, 102, 102); font-family: 'Helvetica Neue', STHeiti, 'Microsoft YaHei', Helvetica, Arial, sans-serif; line-height: 22.399999618530273px;\"><div class=\"mod-head\" style=\"box-sizing: border-box; position: relative; padding-bottom: 14px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(245, 245, 245);\"><h1 style=\"box-sizing: border-box; margin: 0px; font-size: 20px; font-weight: 500; line-height: 30px; color: rgb(51, 51, 51); max-width: 600px;\">Docker终极指南&nbsp;</h1></div><div class=\"mod-body\" style=\"box-sizing: border-box; margin-bottom: 20px;\"><div class=\"content markitup-box\" style=\"box-sizing: border-box; position: relative; z-index: 1; line-height: 25.200000762939453px; padding: 10px 0px; word-wrap: break-word !important;\">【编者的话】Docker入门的好文章，之前在微博上就有很多人推荐，也是2015年的新文章，DockerOne作了翻译。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">Docker是一个相对较新且发展非常快速的项目，可用来创建非常轻量的“虚拟机”。注意，这里的引号非常重要，Docker创建的并非真正的虚拟机，而更像是打了激素的chroot，嗯，是大量的激素。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">在我们继续之前，我先说下，截至目前（2015年1月4日），<a href=\"https://docs.docker.com/installation/windows/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker只能在Linux上工作</a>，暂不支持Windows或OSX（译者注：不直接支持）。我稍后会讲到Docker的架构，你会明白其中的原因。所以，如果想在非Linux平台上使用Docker，你需要在虚拟机里运行Linux。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">本教程有三个目标：说明<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">Docker解决的问题</span>、说明它<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">如何解决这个问题</span>、以及说明它<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">使用了哪些技术</span>来解决这个问题。这不是一篇教你怎么运行安装Docker的教程，<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-getting-started\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker</a><a href=\"http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-1-an-introduction\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">此类</a><a href=\"http://c2journal.com/2013/08/22/step-by-step-guide-to-docker-on-ubuntu/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">教程</a><a href=\"http://www.alexecollins.com/first-steps-with-docker/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">已经</a><a href=\"https://docs.docker.com/articles/basics/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">有</a><a href=\"https://coreos.com/docs/launching-containers/building/getting-started-with-docker/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">很多</a>，包括<a href=\"https://www.docker.com/tryit/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker作者的在线互动教程</a>（译者注：作者很喜欢在一个句子里引用多个链接，下同）。本文最后有一个步骤说明，目的是用一个明确的现实世界的例子来串联文章中所有的理论，但不会太过详细。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h2 style=\"box-sizing: border-box; font-weight: 500; line-height: 30px; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.75em;\">Docker能做什么？</h2>Docker可以解决虚拟机能够解决的问题，同时也能够解决虚拟机由于资源要求过高而无法解决的问题。Docker能处理的事情包括：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\">隔离应用依赖</li><li style=\"box-sizing: border-box; line-height: 25px;\">创建应用镜像并进行复制</li><li style=\"box-sizing: border-box; line-height: 25px;\">创建容易分发的即启即用的应用</li><li style=\"box-sizing: border-box; line-height: 25px;\">允许实例简单、快速地扩展</li><li style=\"box-sizing: border-box; line-height: 25px;\">测试应用并随后销毁它们</li></ul><br style=\"box-sizing: border-box;\">Docker背后的想法是创建<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">软件程序可移植的轻量容器</span>，让其可以在任何安装了Docker的机器上运行，而不用关心底层操作系统，就像野心勃勃的造船者们成功创建了集装箱而不需要考虑装在哪种船舶上一样。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h2 style=\"box-sizing: border-box; font-weight: 500; line-height: 30px; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.75em;\">Docker究竟做了什么？</h2>这一节我不会说明Docker使用了哪些技术来完成它的工作，或有什么具体的命令可用，这些放在了最后一节，这里我将说明的是Docker提供的资源和抽象。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">Docker两个最重要的概念是<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">镜像</span>和<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">容器</span>。除此之外，<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">链接</span>和<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">数据卷</span>也很重要。我们先从镜像入手。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">镜像</h3>Docker的镜像类似虚拟机的快照，但更轻量，非常非常轻量（下节细说）。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">创建Docker镜像有几种方式，多数是在一个现有镜像基础上创建新镜像，因为几乎你需要的任何东西都有了公共镜像，包括所有主流Linux发行版，你应该不会找不到你需要的镜像。不过，就算你想从头构建一个<a href=\"https://docs.docker.com/terms/image/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">镜像</a>，<a href=\"https://docs.docker.com/articles/baseimages/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">也有</a><a href=\"https://docs.google.com/document/d/1f8iflnFSZxAU9FhoLQPEVlSKhVPXbtCaqTVPTTJb9yo/edit#heading=h.rqnwbrorxiua\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">好几种</a><a href=\"https://github.com/docker/docker/tree/master/contrib\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">方法</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">要创建一个镜像，你可以拿一个镜像，对它进行修改来创建它的子镜像。实现前述目的的方式有两种：在一个文件中指定一个基础镜像及需要完成的修改；或通过“运行”一个镜像，对其进行修改并提交。不同方式各有优点，不过一般会使用文件来指定所做的变化。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">镜像拥有唯一ID，以及一个供人阅读的名字和标签对。镜像可以命名为类似ubuntu:latest、ubuntu:precise、django:1.6、django:1.7等等。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">容器</h3>现在说容器了。你可以从镜像中创建容器，这等同于从快照中创建虚拟机，不过更轻量。应用是由容器运行的。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">举个例子，你可以下载一个Ubuntu的镜像（有个叫<a href=\"https://registry.hub.docker.com/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker registry</a>的镜像公共仓库），通过安装Gunicorn和Django应用及其依赖项来完成对它的修改，然后从该镜像中创建一个容器，在它启动后运行你的应用。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150109/7e456b0341559afa06a6076625c4edde.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/CB1EA50E018C168BF2FD0EC32E692C39.png\" class=\"img-polaroid\" title=\"1.png\" alt=\"1.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"585\" height=\"183\"></a></div><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">容器与虚拟机一样，是隔离的（有一点要注意，我稍后会讨论到）。它们也拥有一个唯一ID和唯一的供人阅读的名字。容器对外公开服务是必要的，因此Docker允许公开容器的特定端口。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150109/a846617cf45d4ccc36d907ef40abe592.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/C9DF6761FAA9A9A936FC64DDC2293207.png\" class=\"img-polaroid\" title=\"2.png\" alt=\"2.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"706\" height=\"376\"></a></div><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">与虚拟机相比，容器有一个很大的差异，它们被设计用来<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">运行单进程</span>，无法很好地模拟一个完整的环境（如果那是你需要的，请看看<a href=\"https://linuxcontainers.org/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">LXC</a>）。你可能会尝试<a href=\"https://github.com/phusion/baseimage-docker\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">运行runit</a>或supervisord实例来启动多个进程，但（以我的愚见）<a href=\"http://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">这真的</a><a href=\"https://docs.docker.com/reference/commandline/cli/#exec\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">没有必要</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">单进程与多进程<a href=\"http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">之争</a><a href=\"https://github.com/phusion/baseimage-docker#wait-i-thought-docker-is-about-running-a-single-process-in-a-container\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">非常</a><a href=\"https://devopsu.com/blog/docker-misconceptions/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">精彩</a>。你应该知道的是，Docker设计者极力推崇“一个容器一个进程的方式”，如果你要选择在一个容器中运行多个进程，那唯一情况是：出于调试目的，运行类似ssh的东西来访问运行中的容器，不过<a href=\"https://docs.docker.com/reference/commandline/cli/#exec\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker exec</a>命令解决了这个问题。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">【容器和虚拟机的第二个巨大差异是：当你停止一个虚拟机时，可能除了一些临时文件，没有文件会被删除；当你停止一个Docker容器，对初始<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">状态</span>（创建容器所用的镜像的状态）做的所有<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">变化</span>都会<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">丢失</span>。】（译者注：<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">该论述不正确，已与作者确认，感谢<a href=\"http://dockerone.com/people/lostsnow\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">lostsnow</a>指正</span>）<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">容器是设计来运行一个<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">应用</span>的，而非一台机器。你可能会把容器当虚拟机用，但如我们所见，你将失去很多的灵活性，因为Docker提供了用于<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">分离应用与数据</span>的工具，使得你可以快捷地更新运行中的代码/系统，而不影响数据。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">数据卷</h3><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">数据卷</span>让你可以不受容器生命周期影响进行数据持久化。它们表现为容器内的空间，但实际保存在容器之外，从而允许你在不影响数据的情况下销毁、重建、修改、丢弃容器。Docker允许你定义<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">应用</span>部分和<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">数据</span>部分，并提供工具让你可以将它们<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">分开</span>。使用Docker时必须做出的最大思维变化之一就是：<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">容器应该是短暂和一次性的</span>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">卷是针对容器的，你可以使用同一个镜像创建多个容器并定义不同的卷。卷保存在运行Docker的宿主文件系统上，你可以指定卷存放的目录，或让Docker保存在默认位置。保存在其他类型文件系统上的都不是一个卷，稍后再具体说。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150109/16069b19876f5e59a5d0e77a7053fff3.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/9A29710B1353FE6BD5ACCA15E9E541E6.png\" class=\"img-polaroid\" title=\"3.png\" alt=\"3.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"990\" height=\"376\"></a></div><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">卷还可以用来在容器间共享数据，<a href=\"https://docs.docker.com/userguide/dockervolumes/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">建议你阅读卷的文档做进一步了解</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">链接</h3><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">链接</span>是Docker的另一个重要部分。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">容器启动时，将被分配一个随机的私有IP，其它容器可以使用这个IP地址与其进行通讯。这点非常重要，原因有二：一是它提供了容器间相互通信的渠道，二是<a href=\"https://docs.docker.com/articles/networking/#communication-between-containers\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">容器将共享一个本地网络</a>。我曾经碰到一个问题，在同一台机器上为两个客户启动两个elasticsearch容器，但保留集群名称为默认设置，结果这两台elasticsearch服务器立马变成了一个自主集群。注：限制容器间通讯是可行的，<a href=\"https://docs.docker.com/articles/networking/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">请阅读Docker的高级网络文档做进一步了解</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">要开启容器间通讯，Docker允许你在创建一个新容器时引用其它现存容器，在你刚创建的容器里被引用的容器将获得一个（你指定的）别名。我们就说，这两个容器<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">链接在了一起</span>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">因此，如果DB容器已经在运行，我可以创建web服务器容器，并在创建时引用这个DB容器，给它一个别名，比如dbapp。在这个新建的web服务器容器里，我可以在任何时候使用主机名dbapp与DB容器进行通讯。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">Docker更进一步，要求你声明容器在被链接时要开放哪些端口给其他容器，否则将没有端口可用。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150109/9b6c96106a808c09988fb60f777ddad2.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/35EFD4F22D6B73116256374F0748E8C7.png\" class=\"img-polaroid\" title=\"4.png\" alt=\"4.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"987\" height=\"379\"></a></div><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">Docker镜像的可移植性</h3>在创建镜像时有一点要注意。Docker允许你在一个镜像中指定卷和端口。从这个镜像创建的容器继承了这些设置。但是，Docker不允许你在镜像上指定任何不可移植的内容。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">例如，你可以在镜像里定义卷，只要它们被保存在Docker使用的默认位置。这是因为如果你在宿主文件系统里指定了一个特定目录来保存卷，其他使用这个镜像的宿主无法保证这个目录是存在的。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">你可以定义要公开的端口，但仅限那些在创建链接时公开给其他容器的端口，你不能指定公开给宿主的端口，因为你无从知晓使用那个镜像的宿主有哪些端口可用。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">你也不能在镜像上定义链接。使用链接要求通过名字引用其他容器，但你无法预知每个使用那个镜像的宿主如何命名容器。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">镜像必须完全可移植，Docker不允许例外。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">以上就是主要的部分，创建镜像、用它们创建容器、在需要时暴露端口和创造卷、通过链接将几个容器连接在一起。不过，这一切如何能在不引起额外支出条件下达成？<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h2 style=\"box-sizing: border-box; font-weight: 500; line-height: 30px; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.75em;\">Docker如何完成它需要完成的东西？</h2>两个词：<a href=\"http://en.wikipedia.org/wiki/Cgroups\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">cgroups</a>和<a href=\"http://en.wikipedia.org/wiki/Union_mount\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">union文件系统</a>。Docker使用cgroup来提供容器隔离，而union文件系统用于保存镜像并使容器变得短暂。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">Cgroups</h3>这是Linux内核功能，它让两件事情变成可能：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\">限制Linux<a href=\"http://en.wikipedia.org/wiki/Process_group\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">进程组</a>的资源占用（内存、CPU）</li><li style=\"box-sizing: border-box; line-height: 25px;\">为进程组制作 PID、UTS、IPC、网络、用户及装载命名空间</li></ul><br style=\"box-sizing: border-box;\">这里的关键词是命名空间。比如说，一个PID命名空间允许它里面的进程使用隔离的PID，并与主PID命名空间独立开来，因此你可以在一个PID命名空间里拥有自己的PID为1的初始化进程。其他命名空间与此类似。然后你可以使用cgroup创建一个环境，进程可以在其中运行，并与操作系统的其他进程隔离开，但这里的关键点是这个环境上的进程使用的是<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">已经加载和运行的内核</span>，因此额外支出与运行其他进程几乎是一样的。Chroot之于cgroup就好像<a href=\"http://s2.hubimg.com/u/4338299_f248.jpg\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">我</a>之于<a href=\"http://schmoesknow.com/wp-content/uploads/2014/09/The-Hulk-Wallpaper-the-incredible-hulk-31051324-1680-1050.jpg\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">绿巨人（The Hulk）</a>、<a href=\"http://vignette3.wikia.nocookie.net/batman/images/9/93/Batman_The_Dark_Knight_Vol_2-6_Cover-1_Teaser.jpg\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">贝恩（Bane）</a>和<a href=\"http://images4.alphacoders.com/316/31698.jpg\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">毒液（Venom）</a>的组合（译者注：本文作者非常瘦弱，后三者都非常强壮）。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">Union文件系统</h3>Union文件系统允许通过union装载来达到一个分层的积累变化。在union文件系统里，文件系统可以被装载在其他文件系统之上，其结果就是一个变化的分层的积累变化。每个装载的文件系统表示前一个文件系统之后的变化集合，就像是一个diff。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150109/80f162ad554833229628f1753cd501d0.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/F2472A3319598C2806DADF586A9DE0DE.png\" class=\"img-polaroid\" title=\"5.png\" alt=\"5.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"987\" height=\"379\"></a></div><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">当你下载一个镜像，修改它，然后保存成新版本，你只是创建了加载在包裹基础镜像的初始层上的一个新的union文件系统。这使得Docker镜像非常轻，比如：你的DB、Nginx和Syslog镜像都可以共享同一个Ubuntu基础，每一个镜像保存的只是在它们需要的功能的基础上的变化。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">截至2015年1月4日，Docker允许在union文件系统中使用<a href=\"http://en.wikipedia.org/wiki/AUFS\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">aufs</a>、<a href=\"http://en.wikipedia.org/wiki/Btrfs#Union_mounting_.2F_seed_devices\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">btrfs</a>或<a href=\"http://en.wikipedia.org/wiki/Device_mapper\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">设备映射（device mapper）</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">镜像</h3>我们来看一下postgresql的一个镜像：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">[{\n\"AppArmorProfile\":&nbsp;\"\",\n\"Args\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;\"postgres\"\n],\n\"Config\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"AttachStderr\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"AttachStdin\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"AttachStdout\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Cmd\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"postgres\"\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;\"CpuShares\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Cpuset\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Domainname\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Entrypoint\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/docker-entrypoint.sh\"\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;\"Env\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"PATH=/usr/lib/postgresql/9.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"LANG=en_US.utf8\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"PG_MAJOR=9.3\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"PG_VERSION=9.3.5-1.pgdg70&nbsp;1\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"PGDATA=/var/lib/postgresql/data\"\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;\"ExposedPorts\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"5432/tcp\":&nbsp;{}\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;\"Hostname\":&nbsp;\"6334a2022f21\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Image\":&nbsp;\"postgres\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"MacAddress\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Memory\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"MemorySwap\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"NetworkDisabled\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"OnBuild\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"OpenStdin\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"PortSpecs\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"StdinOnce\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Tty\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"User\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Volumes\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/var/lib/postgresql/data\":&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;\"WorkingDir\":&nbsp;\"\"\n},\n\"Created\":&nbsp;\"2015-01-03T23:56:12.354896658Z\",\n\"Driver\":&nbsp;\"devicemapper\",\n\"ExecDriver\":&nbsp;\"native-0.2\",\n\"HostConfig\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"Binds\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"CapAdd\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"CapDrop\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"ContainerIDFile\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Devices\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Dns\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"DnsSearch\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"ExtraHosts\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"IpcMode\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Links\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"LxcConf\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"NetworkMode\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"PortBindings\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Privileged\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"PublishAllPorts\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"RestartPolicy\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"MaximumRetryCount\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Name\":&nbsp;\"\"\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;\"SecurityOpt\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"VolumesFrom\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"bestwebappever.dev.db-data\"\n&nbsp;&nbsp;&nbsp;&nbsp;]\n},\n\"HostnamePath\":&nbsp;\"/mnt/docker/containers/6334a2022f213f9534b45df33c64437081a38d50c7f462692b019185b8cbc6da/hostname\",\n\"HostsPath\":&nbsp;\"/mnt/docker/containers/6334a2022f213f9534b45df33c64437081a38d50c7f462692b019185b8cbc6da/hosts\",\n\"Id\":&nbsp;\"6334a2022f213f9534b45df33c64437081a38d50c7f462692b019185b8cbc6da\",\n\"Image\":&nbsp;\"aaab661c1e3e8da2d9fc6872986cbd7b9ec835dcd3886d37722f1133baa3d2db\",\n\"MountLabel\":&nbsp;\"\",\n\"Name\":&nbsp;\"/bestwebappever.dev.db\",\n\"NetworkSettings\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"Bridge\":&nbsp;\"docker0\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Gateway\":&nbsp;\"172.17.42.1\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"IPAddress\":&nbsp;\"172.17.0.176\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"IPPrefixLen\":&nbsp;16,\n&nbsp;&nbsp;&nbsp;&nbsp;\"MacAddress\":&nbsp;\"02:42:ac:11:00:b0\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"PortMapping\":&nbsp;null,&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\"Ports\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"5432/tcp\":&nbsp;null\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},\n\"Path\":&nbsp;\"/docker-entrypoint.sh\",\n\"ProcessLabel\":&nbsp;\"\",\n\"ResolvConfPath\":&nbsp;\"/mnt/docker/containers/6334a2022f213f9534b45df33c64437081a38d50c7f462692b019185b8cbc6da/resolv.conf\",\n\"State\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"Error\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"ExitCode\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"FinishedAt\":&nbsp;\"0001-01-01T00:00:00Z\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"OOMKilled\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Paused\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Pid\":&nbsp;21654,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Restarting\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Running\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"StartedAt\":&nbsp;\"2015-01-03T23:56:42.003405983Z\"\n},\n\"Volumes\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"/var/lib/postgresql/data\":&nbsp;\"/mnt/docker/vfs/dir/5ac73c52ca86600a82e61279346dac0cb3e173b067ba9b219ea044023ca67561\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"postgresql_data\":&nbsp;\"/mnt/docker/vfs/dir/abace588b890e9f4adb604f633c280b9b5bed7d20285aac9cc81a84a2f556034\"\n},\n\"VolumesRW\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"/var/lib/postgresql/data\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"postgresql_data\":&nbsp;true\n}\n}\n]\n</pre><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">也就是说，镜像只是一个json，它指定了从该镜像运行的容器的特性，union装载点保存在哪里，要公开什么端口等等。每个镜像与一个union文件系统相关联，每个Docker上的union文件系统都有<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">一个上层</span>，就像是计算机科技树（<a href=\"http://gardening.stackexchange.com/questions/13609/how-do-you-tell-if-a-tree-is-male-or-female\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">不像其他树有一大堆的家族</a>）。如果它看起来有点吓人或有些东西串不起来，不要担心，这只是出于教学目的，你并不会直接处理这些文件。<br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">容器</h3>容器之所以是短暂的，是因为当你从镜像上创建一个容器，Docker会创建一个空白的union文件系统加载在与该镜像关联的union文件系统之上。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">由于union文件系统是空白的，这意味着没有变化会被应用到镜像的文件系统上，当你创建一些变化时，文件就能体现出来，但是当容器停止，该容器的union文件系统会被丢弃，留下的是你启动时的原始镜像文件系统。除非你创建一个新的镜像，或制作一个卷，你所做的变化在容器停止时都会消失。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">卷所做的是在容器内指定一个目录，以便在union文件系统之外保存它。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">这是一个<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">bestwebappever</span>的容器：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">[{\n\"AppArmorProfile\":&nbsp;\"\",\n\"Args\":&nbsp;[],\n\"Config\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"AttachStderr\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"AttachStdin\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"AttachStdout\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Cmd\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/sbin/my_init\"\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;\"CpuShares\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Cpuset\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Domainname\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Entrypoint\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Env\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"DJANGO_CONFIGURATION=Local\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"HOME=/root\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"TALPOR_ENVIRONMENT=local\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"TALPOR_DIR=/opt/bestwebappever\"\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;\"ExposedPorts\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"80/tcp\":&nbsp;{}\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;\"Hostname\":&nbsp;\"44a87fdaf870\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Image\":&nbsp;\"talpor/bestwebappever:dev\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"MacAddress\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Memory\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"MemorySwap\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"NetworkDisabled\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"OnBuild\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"OpenStdin\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"PortSpecs\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"StdinOnce\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Tty\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"User\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Volumes\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/opt/bestwebappever\":&nbsp;{}\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;\"WorkingDir\":&nbsp;\"/opt/bestwebappever\"\n},\n\"Created\":&nbsp;\"2015-01-03T23:56:15.378511619Z\",\n\"Driver\":&nbsp;\"devicemapper\",\n\"ExecDriver\":&nbsp;\"native-0.2\",\n\"HostConfig\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"Binds\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/home/german/bestwebappever/:/opt/bestwebappever:rw\"\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;\"CapAdd\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"CapDrop\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"ContainerIDFile\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Devices\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Dns\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"DnsSearch\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"ExtraHosts\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"IpcMode\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Links\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/bestwebappever.dev.db:/bestwebappever.dev.app/db\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/bestwebappever.dev.redis:/bestwebappever.dev.app/redis\"\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;\"LxcConf\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"NetworkMode\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"PortBindings\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"80/tcp\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"HostIp\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"HostPort\":&nbsp;\"8887\"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;\"Privileged\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"PublishAllPorts\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"RestartPolicy\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"MaximumRetryCount\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Name\":&nbsp;\"\"\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;\"SecurityOpt\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"VolumesFrom\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"bestwebappever.dev.requirements-data\"\n&nbsp;&nbsp;&nbsp;&nbsp;]\n},\n\"HostnamePath\":&nbsp;\"/mnt/docker/containers/44a87fdaf870281e86160e9e844b8987cfefd771448887675fed99460de491c4/hostname\",\n\"HostsPath\":&nbsp;\"/mnt/docker/containers/44a87fdaf870281e86160e9e844b8987cfefd771448887675fed99460de491c4/hosts\",\n\"Id\":&nbsp;\"44a87fdaf870281e86160e9e844b8987cfefd771448887675fed99460de491c4\",\n\"Image\":&nbsp;\"b84804fac17b61fe8f344359285186f1a63cd8c0017930897a078cd09d61bb60\",\n\"MountLabel\":&nbsp;\"\",\n\"Name\":&nbsp;\"/bestwebappever.dev.app\",\n\"NetworkSettings\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"Bridge\":&nbsp;\"docker0\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"Gateway\":&nbsp;\"172.17.42.1\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"IPAddress\":&nbsp;\"172.17.0.179\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"IPPrefixLen\":&nbsp;16,\n&nbsp;&nbsp;&nbsp;&nbsp;\"MacAddress\":&nbsp;\"02:42:ac:11:00:b3\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"PortMapping\":&nbsp;null,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Ports\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"80/tcp\":&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"HostIp\":&nbsp;\"0.0.0.0\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"HostPort\":&nbsp;\"8887\"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;}\n},\n\"Path\":&nbsp;\"/sbin/my_init\",\n\"ProcessLabel\":&nbsp;\"\",\n\"ResolvConfPath\":&nbsp;\"/mnt/docker/containers/44a87fdaf870281e86160e9e844b8987cfefd771448887675fed99460de491c4/resolv.conf\",\n\"State\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"Error\":&nbsp;\"\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"ExitCode\":&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;\"FinishedAt\":&nbsp;\"0001-01-01T00:00:00Z\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"OOMKilled\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Paused\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Pid\":&nbsp;21796,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Restarting\":&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;\"Running\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"StartedAt\":&nbsp;\"2015-01-03T23:56:47.537259546Z\"\n},\n\"Volumes\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"/opt/bestwebappever\":&nbsp;\"/home/german/bestwebappever\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"requirements_data\":&nbsp;\"/mnt/docker/vfs/dir/bc14bec26ca311d5ed9f2a83eebef872a879c9e2f1d932470e0fd853fe8be336\"\n},\n\"VolumesRW\":&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;\"/opt/bestwebappever\":&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;\"requirements_data\":&nbsp;true\n}\n}\n]\n</pre><br style=\"box-sizing: border-box;\">卷基本上与镜像相同，不过现在还指定了一些公开给宿主的端口，也声明了卷位于宿主的位置，容器状态是从现在直到结束，等等。与前面一样，如果它看起来让人生畏，不要担心，你不会直接处理这些json。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h2 style=\"box-sizing: border-box; font-weight: 500; line-height: 30px; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.75em;\">超级、无比简单的步骤说明</h2>第一步，<a href=\"https://docs.docker.com/installation/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">安装Docker</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">Docker命令工具需要root权限才能工作。你可以将你的用户放入docker组来避免每次都要使用sudo。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">第二步，使用以下命令从<a href=\"https://registry.hub.docker.com/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">公共registry</a>下载一个镜像：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">$&gt;&nbsp;docker&nbsp;pull&nbsp;ubuntu:latest\nubuntu:latest:&nbsp;The&nbsp;image&nbsp;you&nbsp;are&nbsp;pulling&nbsp;has&nbsp;been&nbsp;verified\n3b363fd9d7da:&nbsp;Pull&nbsp;complete\n.....&lt;bunch&nbsp;of&nbsp;downloading-stuff&nbsp;output&gt;.....\n8eaa4ff06b53:&nbsp;Pull&nbsp;complete\nStatus:&nbsp;Downloaded&nbsp;newer&nbsp;image&nbsp;for&nbsp;ubuntu:latest\n$&gt;\n</pre><br style=\"box-sizing: border-box;\">这个公共registry上有你需要的几乎所有东西的镜像：Ubuntu、Fedora、Postgresql、MySQL、Jenkins、Elasticsearch、Redis等等。Docker开发人员在这个公共registry里维护着数个镜像，不过你能从上面拉取大量来自用户发布的自建镜像。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">也许你需要或想要一个私有的registry（用于开发应用之类的容器），<a href=\"https://docs.docker.com/reference/api/hub_registry_spec/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">你可以先看看这个</a>。<a href=\"http://blog.docker.com/2013/07/how-to-use-your-own-registry/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">现在</a>，<a href=\"http://www.activestate.com/blog/2014/01/deploying-your-own-private-docker-registry\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">有好几个</a><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-docker-registry-on-ubuntu-14-04\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">方式</a>可以<a href=\"https://blog.codecentric.de/en/2014/02/docker-registry-run-private-docker-image-repository/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">设置</a>你<a href=\"http://azure.microsoft.com/blog/2014/11/11/deploying-your-own-private-docker-registry-on-azure/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">自己的</a><a href=\"https://medium.com/@deeeet/building-private-docker-registry-with-basic-authentication-with-self-signed-certificate-using-it-e6329085e612\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">私有</a><a href=\"https://github.com/docker/docker-registry\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">registry</a>。<a href=\"https://quay.io/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">你也可以</a><a href=\"https://registry.hub.docker.com/plans/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">买一个</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">第三步，列出你的镜像：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">$&gt;&nbsp;docker&nbsp;images\nREPOSITORY&nbsp;&nbsp;TAG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IMAGE&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CREATED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VIRTUAL&nbsp;SIZE\nubuntu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;latest&nbsp;&nbsp;8eaa4ff06b53&nbsp;&nbsp;4&nbsp;days&nbsp;ago&nbsp;&nbsp;192.7&nbsp;MB\n</pre><br style=\"box-sizing: border-box;\">第四步，从该镜像上创建一个容器。<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">$&gt;&nbsp;docker&nbsp;run&nbsp;--rm&nbsp;-ti&nbsp;ubuntu&nbsp;/bin/bash\nroot@4638a40c2fbb:/#&nbsp;ls\nbin&nbsp;boot&nbsp;dev&nbsp;etc&nbsp;home&nbsp;lib&nbsp;lib64&nbsp;media&nbsp;mnt&nbsp;opt&nbsp;proc&nbsp;root......\nroot@4638a40c2fbb:/#&nbsp;exit\n</pre><br style=\"box-sizing: border-box;\">上一条命令的简要说明：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\">--rm：告诉Docker一旦运行的进程退出就删除容器。这在进行测试时非常有用，可免除杂乱</li><li style=\"box-sizing: border-box; line-height: 25px;\">-ti：告诉Docker分配一个伪终端并进入交互模式。这将进入到容器内，对于快速原型开发或尝试很有用，但不要在生产容器中打开这些标志</li><li style=\"box-sizing: border-box; line-height: 25px;\">ubuntu：这是容器立足的镜像</li><li style=\"box-sizing: border-box; line-height: 25px;\">/bin/bash：要运行的命令，因为我们以交互模式启动，它将显示一个容器的提示符</li></ul><br style=\"box-sizing: border-box;\">在运行run命令时，你可指定链接、卷、端口、窗口名称（如果你没提供，Docker将分配一个默认名称）等等。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">现在，我们在后台运行一个容器：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">$&gt;&nbsp;docker&nbsp;run&nbsp;-d&nbsp;ubuntu&nbsp;ping&nbsp;8.8.8.8\n31c68e9c09a0d632caae40debe13da3d6e612364198e2ef21f842762df4f987f\n$&gt;\n</pre><br style=\"box-sizing: border-box;\">输出的是分配的ID，因为是随机的，你的将有所不同。我们来检查一下容器是否开始运行了：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">$&gt;&nbsp;docker&nbsp;ps\nCONTAINER&nbsp;ID&nbsp;IMAGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CREATED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORTS&nbsp;&nbsp;NAMES\n31c68e9c09a0&nbsp;ubuntu:latest&nbsp;\"ping&nbsp;8.8.8.8\"&nbsp;&nbsp;2&nbsp;minutes&nbsp;ago&nbsp;&nbsp;Up&nbsp;2&nbsp;minutes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loving_mcclintock\n</pre><br style=\"box-sizing: border-box;\">我们发现容器就是在那里面，它被自动分配了一个叫loving<a href=\"http://en.wikipedia.org/wiki/Barbara_McClintock\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">_mcclintock</a>的名称。我们看看容器里正在发生什么：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">$&gt;&nbsp;docker&nbsp;exec&nbsp;-ti&nbsp;loving_mcclintock&nbsp;/bin/bash\nroot@31c68e9c09a0:/#&nbsp;ps&nbsp;-aux|grep&nbsp;ping\nroot&nbsp;1&nbsp;0.0&nbsp;0.0&nbsp;6504&nbsp;636&nbsp;?&nbsp;Ss&nbsp;20:46&nbsp;0:00&nbsp;ping&nbsp;8.8.8.8\nroot@31c68e9c09a0:/#&nbsp;exit\n</pre><br style=\"box-sizing: border-box;\">我们所做的是在容器里运行程序，这里的程序是/bin/bash。-ti标志与docker run的作用相同，将我们放置到容器的控制台里。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h2 style=\"box-sizing: border-box; font-weight: 500; line-height: 30px; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.75em;\">结尾</h2>Docker的大致内容就是这些，它包括了很多内容，但那超出了本文的范围。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">不过我会提供一些我认为非常重要或有趣的链接和延伸阅读材料<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">Docker的基本结构：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/introduction/understanding-docker/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"></a><a href=\"https://docs.docker.com/introduction/understanding-docker/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">https://docs.docker.com/introd ... cker/</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"http://blog.docker.com/2014/03/docker-0-9-introducing-execution-drivers-and-libcontainer/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"></a><a href=\"http://blog.docker.com/2014/03/docker-0-9-introducing-execution-drivers-and-libcontainer/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">http://blog.docker.com/2014/03 ... iner/</a></li></ul><br style=\"box-sizing: border-box;\">延伸阅读：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/builder/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Dockerfiles</a>：允许你使用一个文本文件定义镜像，这非常重要</li><li style=\"box-sizing: border-box; line-height: 25px;\">我说过<a href=\"https://docs.docker.com/reference/builder/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">dockerfiles</a>非常重要吧？</li><li style=\"box-sizing: border-box; line-height: 25px;\">你真应该看看<a href=\"https://docs.docker.com/reference/builder/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">dockerfiles</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#build\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker build</a>：你需要这个来构建你的<a href=\"https://docs.docker.com/reference/builder/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">dockerfiles</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#push\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker push</a>/<a href=\"https://docs.docker.com/reference/commandline/cli/#pull\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker pull</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#create\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker create</a>/<a href=\"https://docs.docker.com/reference/commandline/cli/#run\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker run</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#rm\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker rm</a>/<a href=\"https://docs.docker.com/reference/commandline/cli/#rmi\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker rmi</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#start\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker start</a>/<a href=\"https://docs.docker.com/reference/commandline/cli/#stop\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker stop</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#exec\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker exec</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#inspect\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker inspect</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/reference/commandline/cli/#tag\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">docker tag</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/userguide/dockerlinks/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Links</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://docs.docker.com/userguide/dockervolumes/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Volumes</a></li></ul><br style=\"box-sizing: border-box;\">有趣的链接：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"http://blog.docker.com/2014/12/announcing-docker-machine-swarm-and-compose-for-orchestrating-distributed-apps/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">ANNOUNCING DOCKER MACHINE, SWARM, AND COMPOSE FOR ORCHESTRATING DISTRIBUTED APPS</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"http://www.shopify.com/technology/15934308-docker-at-shopify-how-we-built-containers-that-power-over-100-000-online-shops\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker at Shopify: How we built containers that power over 100,000 online shops</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"http://www.infoworld.com/article/2844708/linux/coreos-game-changer-data-center-cloud.html\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Why CoreOS is a game-changer in the data center and cloud</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://devopsu.com/blog/docker-misconceptions/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker Misconceptions</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Microservices - Not a Free Lunch!</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Feature Preview: Docker-Based Development Environments</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://ahmetalpbalkan.com/blog/compiling-docker-cli-on-windows/?utm_content=buffer8eb17&amp;utm_medium=social&amp;utm_source=facebook.com&amp;utm_campaign=buffer\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">How to compile Docker on Windows</a>&nbsp;(感谢reddit的<a href=\"http://www.reddit.com/user/computermedic\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">computermedic</a>提供)</li></ul><br style=\"box-sizing: border-box;\">有用的项目和链接<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://github.com/phusion/baseimage-docker\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Phusion Docker baseimage</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://github.com/shipyard/shipyard\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Shipyard</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://github.com/crosbymichael/dockerui\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">DockerUI</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://coreos.com/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">CoreOS</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"http://decking.io/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Decking</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://github.com/docker/docker-py\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker-py</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://github.com/merll/docker-map\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker-map</a></li><li style=\"box-sizing: border-box; line-height: 25px;\"><a href=\"https://github.com/merll/docker-fabric\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker-fabric</a></li></ul><br style=\"box-sizing: border-box;\"><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">原文链接：<a href=\"https://blog.talpor.com/2015/01/docker-beginners-tutorial/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker - Beginner's tutorial</a>&nbsp;（翻译：<a href=\"https://github.com/seanliang\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">梁晓勇</a>&nbsp;审校：李颖杰）</span></div></div></div>"
    }
  ]
}
{
  "title": "关于Docker你应该知道的10件事",
  "cells": [
    {
      "type": "text",
      "data": "<section class=\"article-content\" style=\"font-size: 14px; box-sizing: border-box; padding-right: 20px; padding-bottom: 20px; padding-left: 20px; line-height: 1.57142857; color: rgb(111, 102, 88); font-family: Cabin, 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgb(245, 240, 204); padding-top: 10px !important;\"><p style=\"box-sizing: border-box; margin: 0px;\">如果你在企业IT工作，那你会听说过Docker。即使在是像Puppet、Hadoop和MongoDB这样的热门技术中，Docker也会脱颖而出。</p><p style=\"box-sizing: border-box; margin: 0px;\">但正是因为Docker正处于炒作期，因此这并不意味着它适合你。正如我们Tech&nbsp; Pro Research分析中指出，“不管你的公司是否给了Docker一个肯定的‘可能’，需要警惕。”</p><p style=\"box-sizing: border-box; margin: 0px;\">但是，在你下载Docker并使用起来之前，有10件事情是你应该对这项超人气容器技术应该了解的。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">1、Docker是一种打包和分发软件的方式</span></p><p style=\"box-sizing: border-box; margin: 0px;\">一个现代的软件系统包括许多部分，包括二进制文件、库文件、配置文件和依赖性。将这些不同的组件装成一台机器可不是一件容易的事情，但你“出货”这 款软件的时候就更加复杂了。一旦你出货了你的软件，你就需要找到一种方式，将所有这些东西打包到一起、把它们放到需要运行的地方。Docker就是这样一 种容器技术，让打包软件以及所有组件之间的依赖性、提供给开发者、分期或者生产、或者发送到需要运行的地方，所有这些变得非常轻松。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">2、Docker并不是特别新的技术</span></p><p style=\"box-sizing: border-box; margin: 0px;\">Docker问世只有短短几年时间，但是容器技术已经伴随我们有几十年了。虽然容器在大型机时代很有用处，但是Docker现在发挥才能是受很多因素影响的，包括Linux日益突出、虚拟化技术的普及、以及云对操作系统重要性的侵蚀。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">3、几乎每个人都提供了Docker</span></p><p style=\"box-sizing: border-box; margin: 0px;\">不管你选择的厂商恰好是谁，几乎这些厂商100%都支持Docker。从Amazon Web Services到Red Hat，再到Google，人人都爱Docker。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">4、Docker并不只是面向Linux</span></p><p style=\"box-sizing: border-box; margin: 0px;\">Docker扎根于Docker，但是微软把它发扬光大。或者它一定会如此。Docker依赖于像Linux Containers（LXC）这样的Linux技术，以及cgroups和命名空间功能，这些在Windows尚不存在。因此微软正在奋力构建这之间的 挂接，使得Docker容器也能够运行在Windows Server上。微软在Windows上运行自己的容器技术已经有多年时间了，但是微软正在扩大范围，也支持Docker这个社区标准。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">5、Docker让你分配特定量的CPU、内存和磁盘资源给每个进程，就像虚拟机</span></p><p style=\"box-sizing: border-box; margin: 0px;\">在Docker的核心是Linux cgroups（控制组），提供计算和限制容器使用CPU、内存、网络、磁盘资源数量的方法。这提供了一些虚拟化的好处，例如能够分配出一台计算机给少量 的资源，这样你就不用让一个进程占用所有计算机让其他进程没有资源可用——但是这并不会带来VMware那样沉重的开销或者成本。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">6、Docker比启动一个虚拟机快（微秒对分钟）</span></p><p style=\"box-sizing: border-box; margin: 0px;\">如果你想要在一台服务器上运行多个任务，那么传统的方法是将其划分为多个虚拟机，使用每个虚拟机来运行一个任务。但是虚拟机启动很慢，因为它们必须 启动整个操作系统，这要花上几分钟的时间。而且这会占用大量资源，因为每个虚拟机都需要运行一个完整的操作系统实例。容器则提供了某种类似的行为，但是速 度更快一些，因为启动一个容器就像启动一个进程。Docker的开销也更少——实际上不会多过一个进程。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">7、但是，Docker不消灭掉虚拟机</span></p><p style=\"box-sizing: border-box; margin: 0px;\">Docker并不是虚拟机的对等替代物，因为它要求你所有的容器共享相同的底层操作系统。这意味着，例如你不能在同一台服务器上同时运行 Windows和Linux应用。而且，随着Docker容器脱颖而出，它的安全隔离要弱于虚拟机，这也使得它成为某种多租户的不恰当的选择。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">8、Docker的开发速度相当迅猛</span></p><p style=\"box-sizing: border-box; margin: 0px;\">登上Docker这趟列车可不像是乘坐蒸汽机，而更像是跳上了日本子弹头火车……它以250 MPH的速度向你呼啸而来。考虑到Docker只有一年半的API已经有了15个修订版本，你会知道它变化地有多快。虽然Docker“已经成熟，因为它 正在成长为一款稳定的、企业值得使用的软件”，但是它仍然没有能持续10年的支持承诺，这通常是企业对他们的软件的期望。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">9、Docker正面临日益激烈的竞争</span></p><p style=\"box-sizing: border-box; margin: 0px;\">随着Docker越来越受欢迎，它不可避免地要面临竞争。例如，CoreOS最近发布了一个与之竞争的Docker运行时间，Rocket和 Linux青睐的Ubuntu也有自己的LXD容器项目。这些和其他竞争似乎都在指责Docker封闭的生态系统。在Docker的世界，所有都依赖于 Docker注册。你必须依赖公司的注册表，在你自己的数据中心运行一个Docker拷贝，这不是免费的。</p><p style=\"box-sizing: border-box; margin: 0px;\"><br style=\"box-sizing: border-box;\"></p><p style=\"box-sizing: border-box; margin: 0px;\"><span style=\"box-sizing: border-box; font-weight: 700;\">10、你应该谨慎行事</span></p><p style=\"box-sizing: border-box; margin: 0px;\">正如对待任何新技术，你可能会在使用Docker之间考虑考虑。从技术的角度来看，你应该在逐渐熟悉在Docker容器中运行应用的同时考虑哪些该 做哪些不该做。但这不仅仅是代码。正如正面所说，Docker的社区可能并不适合你。你应该加入社区——参加聚会、阅读、并加入到邮件列表中，等等——并 决定你是否希望在Docker上投入你的时间。</p><p style=\"box-sizing: border-box; margin: 0px;\">不管你是以何种方式接触到Docker，容器技术都已经来临。Docker使得现代计算中复杂的东西变得简化了。Docker是容器包的领导者，你需要考虑它的调卷。这些条款是什么取决于你和你企业基础设施的状态。</p></section>"
    }
  ]
}
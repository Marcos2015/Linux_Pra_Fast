{
  "title": "Docker和LXC有什么不同?",
  "cells": [
    {
      "type": "text",
      "data": "<span style=\"font-family: 'Helvetica Neue', STHeiti, 'Microsoft YaHei', Helvetica, Arial, sans-serif; font-size: 14px;\">【编者的话】</span><span style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', STHeiti, 'Microsoft YaHei', Helvetica, Arial, sans-serif; font-size: 14px; box-sizing: border-box; font-weight: 700;\">Docker和LXC有什么不同?</span><span style=\"font-family: 'Helvetica Neue', STHeiti, 'Microsoft YaHei', Helvetica, Arial, sans-serif; font-size: 14px;\">&nbsp;这大概是很多初学者的困惑所在，为什么说Docker不是LXC的一个替代方案呢? Docker基于LXC的基础上做了哪些有想象力的工作呢? 本文作者就此分享了自己的一些独特见解。</span><br><div class=\"mod-body\" style=\"font-size: 14px; box-sizing: border-box; margin-bottom: 20px; color: rgb(102, 102, 102); font-family: 'Helvetica Neue', STHeiti, 'Microsoft YaHei', Helvetica, Arial, sans-serif; line-height: 22.399999618530273px;\"><div class=\"content markitup-box\" style=\"box-sizing: border-box; position: relative; z-index: 1; line-height: 25.200000762939453px; padding: 10px 0px; word-wrap: break-word !important;\"><br style=\"box-sizing: border-box;\">自Docker诞生以来，顶级的云服务提供商们陆续发行了他们的企业级容器服务。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><a href=\"http://aws.amazon.com/ecs/details/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">AWS弹性容器服务</a><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><a href=\"http://azure.microsoft.com/blog/2015/04/08/microsoft-unveils-new-container-technologies-for-the-next-generation-cloud/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">微软为下一代云服务推出了新的集装箱技术</a><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><a href=\"https://docs.mesosphere.com/tutorials/launch-docker-container-on-mesosphere/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Mesosphere加入了对Docker的支持</a><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">但是，他们之中的一小部分仍然挂出一些基础问题的QA，像“什么是Docker，Docker和LXC的异同，Docker和VM的比较”。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">而在这篇文章里，我们将深入研究Docker和LXC的真正不同之处。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">Docker不是LXC的一个替代方案。『LXC』是指Linux内核（尤指命名空间以及Cgroup）的一个特性，它允许其他一些沙盒进程运行在一块相对独立的空间，并且能够方便的控制他们的资源调度。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150510/7702bd5e6722ac72e9ec4243ed40a943.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/E414C77C9F4A4E5ECAEE62B7250642FF.png\" class=\"img-polaroid\" title=\"lxc-vs-docker.png\" alt=\"lxc-vs-docker.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"1600\" height=\"810\"></a></div><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">而基于底层的内核特性的基础上，Docker在上层构建了一个更高层次的具备多个强大功能的工具集：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\">可移植的跨机器部署。Docker定义了一个将应用打包的规范，而它的所有依赖都被封装到了一个简单对象里，它可以被传输到任意一台能运行Docker的机器，并且在这里启动Docker的实例之后，它能够确保承载应用的执行环境将会与之前所定义的完全一致。Lxc实现了进程级的沙盒封装，它是可移植部署的一个重要前提，但是要想实现可移植部署，仅仅是这样可还不够。如果你发送给我一份安装到一个自定义LXC配置下的应用副本，那么几乎可以肯定的是，它在我的机器上运行的结果不会跟你的完全一样，因为它绑定了你机器的一些特殊配置：网络、存储、日志、Linux发行版本等等。Docker为这些机器的特定配置定义了一个抽象层，所以它使得这些相同的Docker容器能够一成不变的运行在多个不同的主机上，甚至带上各种不同的配置。</li><li style=\"box-sizing: border-box; line-height: 25px;\">以应用为中心。相对于机器而言，Docker被用于优化应用的部署过程。这可以从它的API、UI、设计理念还有文档里得到体现。反之，lxc的辅助脚本专注在把容器作为一个轻量级的<code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">机器</code>使用 —— 基本上就是一堆启动更快并且内存需求更小的服务器。我们认为容器技术的内容远远不止这些。</li><li style=\"box-sizing: border-box; line-height: 25px;\">自动构建。Docker为开发人员引入了一个可以用来把他们的源代码自动打包到容器里的工具，并且他们能够对于应用的依赖，构建工具，打包服务等有着完全的自主掌控能力。他们能够自由的使用make、Maven、Chef、Puppet、salt、debian包、RPM包，源码包，或者任意以上的结合，而无需关心机器本身的配置。</li><li style=\"box-sizing: border-box; line-height: 25px;\">版本化。Docker引入了一个类似git的特性来完成一个容器的连续版本追踪，版本之间的差异diff，新的版本的提交，回滚等。历史记录信息里也包含了容器的用户信息以及他是如何构建它的，因此生产环境的服务器你都有充足的手段去一步步的定位到最上游的开发人员。Docker也实现了一个增量上传和下载功能，类似于git pull，所以更换到新版本的容器只需要传输增量部分就行。</li><li style=\"box-sizing: border-box; line-height: 25px;\">组件的重用。任意容器都能用作“基础镜像”来创建更特定的组件。这可以手工完成也可以做成自动构建的一部分。例如，你可以准备一个理想的Python环境，并且把它用作10个不同的应用的基础镜像。你所定义的标准PostgreSQL设置可以被将来你手上的所有项目重用。诸如此类。</li><li style=\"box-sizing: border-box; line-height: 25px;\">共享。Docker 有权访问一个<a href=\"https://registry.hub.docker.com/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">公共的注册中心</a>而这里有数以千计的业界人士上传各种各样有价值的容器：任一从Redis、Couchdb、Postgres到irc bouncers再到Rails应用服务器，Hadoop甚至是多个发行版本的基础镜像。该注册中心也包含了一个官方的“标准库”，这里提供了一些由Docker官方团队维护的实用容器。注册中心本身也是开源的，所以任何人都能部署他们自己的私有注册中心来存储和下发私有容器，例如用于内网服务器的部署。</li><li style=\"box-sizing: border-box; line-height: 25px;\">工具生态圈。Docker定义了一个API来自动化和个性化的创建和部署容器。也因此催生了众多的工具集成到Docker，为之提供一些扩展特性。类PaaS的部署（Dokku、Deis、Flynn），多节点编排（Maestro、Salt、Mesos、OpenStack Nova），管理看板（Docker-UI、OpenStack Horizon、Shipyard），配置管理（Chef、Puppet)，持续集成（Jenkins、Strider、Travis）等等。Docker正在迅速的建立以它本身为标准的基于容器的工具生态圈。</li></ul><br style=\"box-sizing: border-box;\"><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">原文链接：<a href=\"http://opensourcecircle.blogspot.com/2015/05/difference-between-docker-and-lxc.html?spref=tw\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">What is the difference between docker and Lxc?</a>&nbsp;（翻译：吴佳兴）</span></div></div>"
    }
  ]
}
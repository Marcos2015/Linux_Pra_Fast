{
  "title": "深入浅出Docker",
  "cells": [
    {
      "type": "text",
      "data": "<br><div class=\"mod-body\" style=\"font-size: 14px; box-sizing: border-box; margin-bottom: 20px; color: rgb(102, 102, 102); font-family: 'Helvetica Neue', STHeiti, 'Microsoft YaHei', Helvetica, Arial, sans-serif; line-height: 22.399999618530273px;\"><div class=\"content markitup-box\" style=\"box-sizing: border-box; position: relative; z-index: 1; line-height: 25.200000762939453px; padding: 10px 0px; word-wrap: break-word !important;\">【编者的话】本文是一篇Docker入门文章，作者介绍了Docker相关的基础知识，包括Docker镜像、Dockerfile、Docker容器、Docker Hub。然后作者使用Docker搭建了一个WordPress应用，基础架构包含一个Nginx服务器来路由/代理请求、WordPress应用服务器来部署应用以及MySQL数据库来提供存储。初学Docker的同学可以看看。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">在持续集成这样新的开发方法论流行的今天，软件工程师只是将代码推送出去并且祈祷代码能在另外的环境里成功运行的日子已经一去不复返了。开发、测试和运维之间的传统高墙正在逐渐瓦解，并且这些职责会互相渗透，从而造就了新型工程师。DevOps在业界流行，项目开发团队越来越敏捷高效，并且能够迅速响应变化。这样的转变使得新工具和框架随之兴起，帮助我们自动化地部署、测试和标准化基础架构。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">转型浪潮的前端工具之一就是Docker，Docker是一个开放的平台，帮助开发人员和系统管理员构建、发布并运行分布式应用。在进一步深入探讨实际经验之前，推荐大家阅读这篇文章：<a href=\"https://www.docker.com/whatisdocker/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">《什么是Docker》</a>。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">在开始操作之前，你需要先安装Docker，我在Mac上用Boot2Docker来安装，更为详细的适合你的平台的安装指南请参考<a href=\"http://blog.rntech.co.uk/2015/01/31/a-dive-into-docker/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker安装介绍</a>。另外，可以使用云服务商来运行Docker主机，Digital Ocean提供运行在云端，并且可以使用Docker的服务器，只需要花费每小时0.007美元，要是你受限于带宽或资源的话，这是个很好的解决方法。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">基础知识</h3><h4 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: inherit; margin: 16px 0px; font-size: 1.25em;\">Docker镜像</h4>Docker镜像是一个只读容器，例如Ubuntu操作系统或者CentOS操作系统镜像。在Docker里运行的每个容器都需要基于某个Docker镜像。<br style=\"box-sizing: border-box;\"><h4 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: inherit; margin: 16px 0px; font-size: 1.25em;\">Dockerfile</h4><a href=\"https://docs.docker.com/reference/builder/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Dockerfile</a>其实就是一些代码指令，它告诉Docker应该如何构建Docker镜像。Docker镜像是分层的，易于扩展，支持在已有的基础镜像上增加额外的功能。常用的基础镜像是ubuntu:latest，这是Ubuntu版本的基础镜像。<br style=\"box-sizing: border-box;\"><h4 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: inherit; margin: 16px 0px; font-size: 1.25em;\">Docker容器</h4>Docker容器可以看成是运行着Linux系统（通常精简过的Linux系统）的虚拟机的轻量级自包含实例，可以迅速启动和停止。Docker容器可以通过Docker镜像无限复制，它们是无状态/短暂的资源。<br style=\"box-sizing: border-box;\"><h4 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: inherit; margin: 16px 0px; font-size: 1.25em;\">Docker Hub</h4><a href=\"https://registry.hub.docker.com/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Docker Hub</a>给系统基础框架引入了软件工程DRY的原则，它是存储Dockerfile和镜像的全局仓库。目前Docker Hub已经有很多的可用镜像，比如Ubuntu、RedHat、RabbitMQ、MongoDB、Nginx。<br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">深入Docker</h3>让我们直接深入Docker，我们要构建一个简单的基础框架，其上运行一个WordPress的自包含实例，WordPress是被全世界很多公司和作家使用的流行博客工具。这个基础架构包含一个Nginx服务器来路由/代理请求，WordPress应用服务器来部署应用以及MySQL数据库来提供存储。最终的架构类似于：<br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150207/80f1442733786871d9fd554df6b97424.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/140F939CAF08DA909D6B5E1906296CD0.png\" class=\"img-polaroid\" title=\"dockercrashcourse.png\" alt=\"dockercrashcourse.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"384\" height=\"265\"></a></div><br style=\"box-sizing: border-box;\"><h4 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: inherit; margin: 16px 0px; font-size: 1.25em;\">数据库容器</h4>现在开始创建MySQL数据库容器，很幸运的是MySQL已经被Docker化了，我们可以从Docker Hub上直接下载，默认配置就很好，因此不需要写自己的Dockerfile或者构建新的镜像。可以使用<code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">docker run</code>命令行来启动新容器。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">第一次运行需要一些时间，因为需要下载镜像，下载一次之后就会缓存，后续的构建可以直接使用缓存。<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">docker&nbsp;run&nbsp;--name&nbsp;wordpress-db&nbsp;-e&nbsp;MYSQL_ROOT_PASSWORD=mysecretpassword&nbsp;-d&nbsp;mysql\n</pre><br style=\"box-sizing: border-box;\">上面的命令是让Docker使用MySQL基础镜像运行一个新容器，各个参数意义如下：<br style=\"box-sizing: border-box;\"><ul style=\"box-sizing: border-box; margin: 0px; padding: 0px 0px 0px 32px; list-style-position: initial; list-style-image: initial; line-height: 30px;\"><li style=\"box-sizing: border-box; line-height: 25px;\"><code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">-name</code>表示分配给新容器的名字（或者标签）</li><li style=\"box-sizing: border-box; line-height: 25px;\"><code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">-e</code>设置容器的环境变量，指定MySQL实例的密码，已有配置文档可以在<a href=\"https://registry.hub.docker.com/_/mysql/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">MySQL Docker Hub</a>中找到。</li><li style=\"box-sizing: border-box; line-height: 25px;\"><code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">-d</code>指定Docker在后台运行容器。</li><li style=\"box-sizing: border-box; line-height: 25px;\"><code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">mysql</code>指定要使用的Docker镜像的名字，这是从Docker Hub下载下来的。</li></ul><br style=\"box-sizing: border-box;\">注意：为了维护跨容器的数据，必须配置一个<a href=\"https://docs.docker.com/userguide/dockervolumes/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">VOLUME</a>来确保数据一致性。为了简单起见我们忽略了这个标志，但是要记住涉及状态的部署必须考虑到数据跨容器生命周期的持续性。<br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">应用容器</h3>下面我们需要运行WordPress应用容器，这个也已经被Docker化并放在Docker Hub上了：<a href=\"https://registry.hub.docker.com/_/wordpress/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">WordPress仓库</a>。<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">docker&nbsp;run&nbsp;--name&nbsp;wordpress-app&nbsp;--link&nbsp;wordpress-db:mysql&nbsp;-d&nbsp;wordpress\n</pre><br style=\"box-sizing: border-box;\"><code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">-link wordpress-db:mysql</code>这个参数告诉Docker创建网络连接到wordpress-db容器（之前创建出来的），使得两个容器间能够网络通信。这个值分为两部分，左边部分指定想要连接的容器（wordpress-db），右边部分指定这个容器的主机别名（mysql）。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">用<code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">docker ps</code>查看一下正在运行的容器：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">docker&nbsp;ps\n\nCONTAINER&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IMAGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CREATED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NAMES\nc39600354fcb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordpress:latest&nbsp;&nbsp;&nbsp;&nbsp;\"/entrypoint.sh&nbsp;apac&nbsp;&nbsp;&nbsp;About&nbsp;a&nbsp;minute&nbsp;ago&nbsp;&nbsp;&nbsp;Up&nbsp;About&nbsp;a&nbsp;minute&nbsp;&nbsp;&nbsp;80/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordpress-app&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n20e66802e914&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql:latest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/entrypoint.sh&nbsp;mysq&nbsp;&nbsp;&nbsp;About&nbsp;a&nbsp;minute&nbsp;ago&nbsp;&nbsp;&nbsp;Up&nbsp;About&nbsp;a&nbsp;minute&nbsp;&nbsp;&nbsp;3306/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordpress-db&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n</pre><br style=\"box-sizing: border-box;\">可以看到有两个容器正在运行，一个在80端口，一个在3306端口。可以ssh进wordpress-app容器，验证可以连接到wordpress-db：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">docker&nbsp;exec&nbsp;-i&nbsp;-t&nbsp;wordpress-app&nbsp;bash\nping&nbsp;mysql\n64&nbsp;bytes&nbsp;from&nbsp;172.17.0.2:&nbsp;icmp_seq=0&nbsp;ttl=64&nbsp;time=0.085&nbsp;ms\n64&nbsp;bytes&nbsp;from&nbsp;172.17.0.2:&nbsp;icmp_seq=1&nbsp;ttl=64&nbsp;time=0.127&nbsp;ms\n64&nbsp;bytes&nbsp;from&nbsp;172.17.0.2:&nbsp;icmp_seq=2&nbsp;ttl=64&nbsp;time=0.108&nbsp;ms\n</pre><br style=\"box-sizing: border-box;\">非常好，wordpress-app容器可以连接到wordpress-db容器。退出bash会话，如果需要也可以查看运行着的容器的日志。<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">docker&nbsp;logs&nbsp;wordpress-app\n</pre><br style=\"box-sizing: border-box;\">很好，一切看起来都不错。<br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">Nginx容器</h3>Web应用之前通常有HTTP Web代理。这样做有很多好处，比如控制请求路由、审查、安全、日志、缓存、负载均衡、存放静态内容等。Nginx是常用的HTTP Web代理服务器。因为需要创建自定义的Nginx，所以需要一个新Dockerfile来定义包含自定义Nginx配置的新镜像：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">mkdir&nbsp;wordpress-nginx\ncd&nbsp;wordpress-nginx\nvi&nbsp;default.conf\n\nserver&nbsp;{\nlisten&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80;\nserver_name&nbsp;&nbsp;localhost;\n\nerror_log&nbsp;/var/log/nginx/error.log&nbsp;warn;\n\nlocation&nbsp;/&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;<a href=\"http://wordpress-app/\">http://wordpress-app:80/</a>;\n&nbsp;&nbsp;&nbsp;&nbsp;proxy_redirect&nbsp;<a href=\"http://server_name/\">http://server_name</a>&nbsp;<a href=\"http://wordpress-app/\">http://wordpress-app:80/</a>;\n&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;&nbsp;&nbsp;Host&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$host;\n&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;&nbsp;&nbsp;X-Forwarded-For&nbsp;&nbsp;&nbsp;&nbsp;$proxy_add_x_forwarded_for;\n&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;&nbsp;&nbsp;X-Forwarded-Proto&nbsp;&nbsp;http;\n}\n\nerror_page&nbsp;&nbsp;&nbsp;500&nbsp;502&nbsp;503&nbsp;504&nbsp;&nbsp;/50x.html;\nlocation&nbsp;=&nbsp;/50x.html&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;/usr/share/nginx/html;\n}\n}\n</pre><br style=\"box-sizing: border-box;\">注意我们将到达的请求路由到80端口的wordpress-app容器。接下来创建Dockerfile，定义如何构建Nginx容器镜像：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">vi&nbsp;Dockerfile\n\nFROM&nbsp;nginx\nCOPY&nbsp;default.conf&nbsp;/etc/nginx/conf.d/default.conf\n</pre><br style=\"box-sizing: border-box;\"><code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">FROM nginx</code>命令中的FROM指令告诉Docker从DockerHub上下载<a href=\"https://registry.hub.docker.com/_/nginx/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">Nginx基础镜像</a>。<br style=\"box-sizing: border-box;\"><code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">COPY default.conf /etc/nginx/conf.d/default.conf</code>这个命令从当前目录得到default.conf，并拷贝到/etc/nginx/conf.d/下的容器镜像。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">剩下的事情是构建新的Docker镜像并运行容器：<br style=\"box-sizing: border-box;\"><pre class=\"prettyprint\" style=\"box-sizing: border-box; overflow: hidden; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 16px; margin-top: 0px; margin-bottom: 10px; line-height: 20px; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(247, 247, 247); border: none; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">docker&nbsp;build&nbsp;-t&nbsp;wordpress-nginx&nbsp;.\ndocker&nbsp;run&nbsp;-d&nbsp;--name=wordpress-nginx&nbsp;--link=wordpress-app:wordpress-app&nbsp;-p&nbsp;80:80&nbsp;wordpress-nginx\ndocker&nbsp;ps\n\nCONTAINER&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IMAGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CREATED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NAMES\n2b9f99664249&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordpress-nginx:latest&nbsp;&nbsp;&nbsp;\"nginx&nbsp;-g&nbsp;'daemon&nbsp;of&nbsp;&nbsp;&nbsp;3&nbsp;seconds&nbsp;ago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Up&nbsp;2&nbsp;seconds&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;443/tcp,&nbsp;0.0.0.0:80-&gt;80/tcp&nbsp;&nbsp;&nbsp;wordpress-nginx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nc39600354fcb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordpress:latest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/entrypoint.sh&nbsp;apac&nbsp;&nbsp;&nbsp;9&nbsp;minutes&nbsp;ago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Up&nbsp;3&nbsp;minutes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordpress-app&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n20e66802e914&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql:latest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/entrypoint.sh&nbsp;mysq&nbsp;&nbsp;&nbsp;9&nbsp;minutes&nbsp;ago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Up&nbsp;4&nbsp;minutes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3306/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordpress-db&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n</pre><br style=\"box-sizing: border-box;\">可能你会注意到我们指定了参数<code class=\"prettyprint\" style=\"box-sizing: border-box; font-family: 'Courier New', Courier, monospace; padding: 0px 5px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; display: inline-block;\">-p 80:80</code>，这是告诉Docker暴露容器的80端口，这样可以从Docker的宿主机器外部访问该容器。<br style=\"box-sizing: border-box;\"><h3 style=\"box-sizing: border-box; font-weight: 500; line-height: 1.7; color: rgb(51, 51, 51); margin: 16px 0px; font-size: 1.5em;\">Hey Presto</h3>在浏览器浏览<a href=\"http://docker_host_ip/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">http://DOCKER_HOST_IP/</a>，看，WordPress已经可以用了，按照WordPress安装提示配置实例，很快就可以看到如下页面：<br style=\"box-sizing: border-box;\"><div class=\"aw-upload-img-list active\" style=\"box-sizing: border-box;\"><a href=\"http://dockerone.com/uploads/article/20150207/02483d2d81c50abb823e4eb8335eb64d.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\"><img src=\"quiver-image-url/170C29E8D7CF5005572D1CAD378847E1.png\" class=\"img-polaroid\" title=\"screen-shot-2015-01-31-at-23-02-51.png\" alt=\"screen-shot-2015-01-31-at-23-02-51.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 625px; margin-bottom: 15px;\" width=\"1336\" height=\"849\"></a></div><br style=\"box-sizing: border-box;\">总的来说，我们通过实际使用Docker Hub上的一些已有资源，学习到了一些Docker的基本概念，构建了WordPress的自包含可运行实例。一切只需要运行几个Docker命令。希望这篇文章能够帮助你开始Docker化你的应用基础架构，享受到Docker带来的巨大好处。<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">如果喜欢这篇文章，请帮忙转发给你的朋友，或者在Twitter，LinkedIn上共享。多谢阅读！<br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\"><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">原文链接：<a href=\"http://blog.rntech.co.uk/2015/01/31/a-dive-into-docker/\" style=\"box-sizing: border-box; color: rgb(21, 95, 170); text-decoration: none; cursor: pointer; background-position: 0px 0px;\">A Dive into Docker</a>（翻译：崔婧雯 校对：李颖杰）</span><br style=\"box-sizing: border-box;\"><br style=\"box-sizing: border-box;\">＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝<br style=\"box-sizing: border-box;\"><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\">译者介绍</span></div><div class=\"content markitup-box\" style=\"box-sizing: border-box; position: relative; z-index: 1; line-height: 25.200000762939453px; padding: 10px 0px; word-wrap: break-word !important;\"><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51);\"><span style=\"color: rgb(102, 102, 102); font-weight: normal;\">崔婧雯，现就职于VMware，高级软件工程师，负责桌面虚拟化产品的质量保证工作。曾在IBM WebSphere业务流程管理软件担任多年系统测试工作。对虚拟化，中间件技术有浓厚的兴趣。</span></span></div></div>"
    }
  ]
}
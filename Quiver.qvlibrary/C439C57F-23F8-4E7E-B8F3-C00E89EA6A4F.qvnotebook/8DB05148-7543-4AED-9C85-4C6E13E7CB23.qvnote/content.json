{
  "title": "C++还是Java 哪个响应高频交易应用比较快？",
  "cells": [
    {
      "type": "text",
      "data": "<div class=\"summary\" style=\"margin: 0px 0px 1.5em; padding: 5px 10px; list-style: none; background-color: rgb(247, 247, 247); color: rgb(51, 51, 51); font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\"><strong>摘要：</strong>高频交易是指从那些人们无法利用的极为短暂的市场变化中寻求获利的计算机化交易，这种交易的最大特点就是速度非常快，以至于有些交易机构将自己的“服务器群组”（server farms）安置到了离交易所的计算机很近的地方，以缩短交易指令通过光缆以光速旅行的距离。</div><div class=\"con news_content\" style=\"margin: 0px 0px 30px; padding: 0px; list-style: none; color: rgb(51, 51, 51); font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\"><strong>概述</strong></p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">高频交易的最佳解决方案是什么？对于这个问题，观点一直比较冲突，部分原因是人们不知道什么叫高频交易并且与人们想象的总是存在差异，其次是速度问题，用哪种语言开发速度会快点，本文作者拿当今非常流行的C++和Java这两种语言进行比较。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">如果你是一个典型的Java和C++程序员，并且用这两种语言编写过典型的面向对象程序。在相同的时间下面编写高频解决方案，Java程序员有可能会提前完成程序并且有时间调整应用程序。在这种情形下，恕我直言，Java应用程序的速度会快些。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">以我的经验，Java在执行上会好于C++，因为Java进行微基准测试，其实它没有做什么事情。但是如果没有时间限制，对Java和C++程序进行调优，那么C++程序会比Java快些。然而，考虑到资源的有限性和环境的不断变化，一个充满活力的语言可能会现实应用中超常发挥。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">在股票交易这种高频市场，即使延迟10微秒都需要认真对待。 Java甚至标准的OOP C++，用在商业硬件上都不是最佳选择，你需要借助C或者精简版的C++和一些专业的硬件工具，例如FPGAs、GPUs。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">然而，在外汇（FX：Foreign Exchange）市场，高频意味着延迟时间不低于100微秒。在这个的环境下，C++或者Java（低GC）都是个不错的选择。个人认为，在不断变化的交易场所，Java拥有更多的灵活性。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">当人们讨论高频率时，尤其是在做银行系统的时候，他们想把时间缩短1毫秒或者单单几毫秒。在这样的情况下，我会说，灵活/多态的Java、Scala或者C#等语言在编程时间上将会更加充裕，可维护性或可靠性优势将会超过C/C++或FPGA。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\"><strong>Java所面临的问题</strong></p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">问题不在于这样的语言上，而是缺乏缓存控制和上下文交互。如果你复制一块在本地已经操作过的内存，但是在运行之间使用不同的延迟，副本将会变慢。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">原因是部分缓存被交换出去，而复制本身也需要一些时间。这和访问内存的任何操作是一样的。例如，访问计划对象将会更慢。</p><pre style=\"margin-top: 0px; margin-bottom: 1em; padding: 10px; list-style: none; overflow: hidden; background-color: rgb(247, 247, 247); white-space: pre-wrap; border: 1px solid rgb(221, 221, 221); background-position: initial initial; background-repeat: initial initial;\"><ol class=\"dp-j\" style=\"margin: 0px 0px 1px 3em; padding: 5px 0px; list-style-position: initial; list-style-image: initial; border-left-width: 3px; border-left-style: solid; border-left-color: rgb(20, 107, 0); background-color: rgb(247, 247, 247); background-position: initial initial; background-repeat: initial initial;\"><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\"><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">private</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">void</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;doTest(Pauser&nbsp;delay)&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">throws</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;InterruptedException&nbsp;{ &nbsp;</span></span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">int</span><span style=\"background: rgb(255, 255, 255);\">[]&nbsp;times&nbsp;=&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">new</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">int</span><span style=\"background: rgb(255, 255, 255);\">[</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">1000</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;*&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">1000</span><span style=\"background: rgb(255, 255, 255);\">]; &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">byte</span><span style=\"background: rgb(255, 255, 255);\">[]&nbsp;bytes&nbsp;=&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">new</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">byte</span><span style=\"background: rgb(255, 255, 255);\">[</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">32</span><span style=\"background: rgb(255, 255, 255);\">*&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">1024</span><span style=\"background: rgb(255, 255, 255);\">]; &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">byte</span><span style=\"background: rgb(255, 255, 255);\">[]&nbsp;bytes2&nbsp;=&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">new</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">byte</span><span style=\"background: rgb(255, 255, 255);\">[</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">32</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;*&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">1024</span><span style=\"background: rgb(255, 255, 255);\">]; &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">long</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;end&nbsp;=&nbsp;System.nanoTime()&nbsp;+&nbsp;(</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">long</span><span style=\"background: rgb(255, 255, 255);\">)&nbsp;5e9; &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">int</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;i; &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">for</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;(i&nbsp;=&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">0</span><span style=\"background: rgb(255, 255, 255);\">;&nbsp;i&nbsp;&lt;&nbsp;times.length;&nbsp;i++)&nbsp;{ &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">long</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;start&nbsp;=&nbsp;System.nanoTime(); &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(bytes,&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">0</span><span style=\"background: rgb(255, 255, 255);\">,&nbsp;bytes2,&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">0</span><span style=\"background: rgb(255, 255, 255);\">,&nbsp;bytes.length); &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">long</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;time&nbsp;=&nbsp;System.nanoTime()&nbsp;-&nbsp;start; &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;times[i]&nbsp;=&nbsp;(</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">int</span><span style=\"background: rgb(255, 255, 255);\">)&nbsp;time; &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay.pause(); &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">if</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;(start&nbsp;&gt;&nbsp;end)&nbsp;</span><span class=\"keyword\" style=\"background: rgb(255, 255, 255);\">break</span><span style=\"background: rgb(255, 255, 255);\">; &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;Arrays.sort(times,&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">0</span><span style=\"background: rgb(255, 255, 255);\">,&nbsp;i); &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;System.out.printf(delay&nbsp;+&nbsp;</span><span class=\"string\" style=\"background: rgb(255, 255, 255);\">\":&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%%tile&nbsp;%.1f/%.1f/%.1f&nbsp;us%n\"</span><span style=\"background: rgb(255, 255, 255);\">, &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;times[i&nbsp;/&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">100</span><span style=\"background: rgb(255, 255, 255);\">]&nbsp;/&nbsp;1e3, &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;times[i&nbsp;/&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">2</span><span style=\"background: rgb(255, 255, 255);\">]&nbsp;/&nbsp;1e3, &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;times[i&nbsp;-&nbsp;i&nbsp;/&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">100</span><span style=\"background: rgb(255, 255, 255);\">&nbsp;-&nbsp;</span><span class=\"number\" style=\"background: rgb(255, 255, 255);\">1</span><span style=\"background: rgb(255, 255, 255);\">]&nbsp;/&nbsp;1e3 &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;); &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">}&nbsp;</span></li></ol></pre><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">&nbsp;这个测试其实是在多次执行同一件任务，在执行之间使用不同的延时。其中大部分时间都花在本地方法上，在测试期间没有创建或抛弃对象。</p><pre style=\"margin-top: 0px; margin-bottom: 1em; padding: 10px; list-style: none; overflow: hidden; background-color: rgb(247, 247, 247); white-space: pre-wrap; border: 1px solid rgb(221, 221, 221); background-position: initial initial; background-repeat: initial initial;\"><ol class=\"dp-xml\" style=\"margin: 0px 0px 1px 3em; padding: 5px 0px; list-style-position: initial; list-style-image: initial; border-left-width: 3px; border-left-style: solid; border-left-color: rgb(20, 107, 0); background-color: rgb(247, 247, 247); background-position: initial initial; background-repeat: initial initial;\"><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">YIELD:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;1.6/1.6/2.3&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">NO_WAIT:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;1.6/1.6/1.6&nbsp;us &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">BUSY_WAIT_10:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.8/3.5/4.4&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">BUSY_WAIT_3:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.7/3.0/4.0&nbsp;us &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">BUSY_WAIT_1:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;1.6/1.6/2.5&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">SLEEP_10:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.2/3.4/5.1&nbsp;us &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">SLEEP_3:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.2/3.4/4.4&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">SLEEP_1:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;1.8/3.4/4.2&nbsp;us&nbsp;</span></li></ol></pre><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">-XX+Java 7的UseLargePages</p><pre style=\"margin-top: 0px; margin-bottom: 1em; padding: 10px; list-style: none; overflow: hidden; background-color: rgb(247, 247, 247); white-space: pre-wrap; border: 1px solid rgb(221, 221, 221); background-position: initial initial; background-repeat: initial initial;\"><ol class=\"dp-xml\" style=\"margin: 0px 0px 1px 3em; padding: 5px 0px; list-style-position: initial; list-style-image: initial; border-left-width: 3px; border-left-style: solid; border-left-color: rgb(20, 107, 0); background-color: rgb(247, 247, 247); background-position: initial initial; background-repeat: initial initial;\"><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">YIELD:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;1.6/1.6/2.7&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">NO_WAIT:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;1.6/1.6/1.8&nbsp;us &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">BUSY_WAIT_10:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.7/3.6/6.6&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">BUSY_WAIT_3:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.7/2.8/5.0&nbsp;us &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">BUSY_WAIT_1:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;1.7/1.8/2.6&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">SLEEP_10:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.4/4.0/5.2&nbsp;us &nbsp;</span></li><li class=\"alt\" style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: inherit; background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">SLEEP_3:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.3/3.9/4.8&nbsp;us &nbsp;</span></li><li style=\"margin: 0px; padding: 0px 3px 0px 10px; list-style: decimal; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); background-position: initial initial; background-repeat: initial initial;\"><span style=\"background: rgb(255, 255, 255);\">SLEEP_1:&nbsp;Copy&nbsp;memory&nbsp;latency&nbsp;1/50/99%tile&nbsp;2.1/3.3/3.7&nbsp;us&nbsp;</span></li></ol></pre><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">上面是最好的三种运行。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">进行内存拷贝的典型时间（中间值）是1.6到4.6微秒，依据是否有线程在繁忙等待或休眠状态上使用了1到10毫秒。这大概是3倍的比率，并且与Java无关，这是因为它没有真正的控制权。即使在最好的情况下时间差大概也是2倍。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\"><strong>代码</strong></p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\"><a target=\"_blank\" href=\"http://code.google.com/p/core-java-performance-examples/source/browse/trunk/src/test/java/com/google/code/java/core/threads/ThreadLatencyTest.java\" style=\"cursor: pointer; color: rgb(0, 102, 204); text-decoration: none;\">ThreadlatencyTest.java</a></p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\"><strong>总结</strong></p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">在极端高频情况下，核心引擎一般会用C、汇编和定制的硬件实现比使用C++或JAVA面向对象实现的方式多。由于延迟需求不再那么紧张（指当基础平台使用C/C++搭建架构之后，应用平台层面，时间响应已不是很重要，反而开发响应更重要）。因此Java和其他动态语言可能会变得更富有成效，在这种情形下，选择Java或许可以帮你轻松应对不断变化的市场/需求。</p><p style=\"margin: 0px 0px 1.5em; padding: 0px; list-style: none;\">来自：<a target=\"_blank\" href=\"http://architects.dzone.com/articles/c-or-java-which-faster-high-0\" style=\"cursor: pointer; color: rgb(0, 102, 204); text-decoration: none;\">DZone</a></p></div>"
    }
  ]
}
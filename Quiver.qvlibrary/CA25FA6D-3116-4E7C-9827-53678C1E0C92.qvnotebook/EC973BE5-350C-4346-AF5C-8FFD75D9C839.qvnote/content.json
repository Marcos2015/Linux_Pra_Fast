{
  "title": "fd_set 用法",
  "cells": [
    {
      "type": "text",
      "data": "<div class=\"Blog_tit4 Blog_tit5\" style=\"word-wrap: break-word; border-bottom-width: 0px; padding: 0px 0px 11px;\"><br></div><div class=\"Blog_con2\" style=\"word-wrap: break-word; color: rgb(102, 102, 102); line-height: 26px;\"><div class=\"Blog_con3\" style=\"word-wrap: break-word; margin-top: 10px; line-height: 22px;\"><p style=\"word-wrap: break-word; margin: 0px; padding: 0px; color: rgb(25, 89, 155);\"></p></div><div class=\"Blog_wz1\" style=\"word-wrap: break-word; font-size: 16px;\"><span class=\"Apple-style-span\" style=\"word-wrap: break-word; line-height: 21px; color: rgb(57, 57, 57); font-family: verdana, 'ms song', Arial, Helvetica, sans-serif;\"><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">select()函数主要是建立在fd_set类型的基础上的。fd_set（它比较重要所以先介绍一下）是一组文件描述字(fd)的集合，它用一位来表示一个fd（下面会仔细介绍），对于fd_set类型通过下面四个宏来操作：&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp; fd_set set;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp; FD_ZERO(&amp;set);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* 将set清零使集合中不含任何fd*/</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp; FD_SET(fd, &amp;set);&nbsp;&nbsp;&nbsp; /* 将fd加入set集合 */</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp; FD_CLR(fd, &amp;set);&nbsp;&nbsp;&nbsp; /* 将fd从set集合中清除 */</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp; FD_ISSET(fd, &amp;set);&nbsp; /* 测试fd是否在set集合中*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">过去，一个fd_set通常只能包含&lt;32的fd（文件描述字），因为fd_set其实只用了一个32位矢量来表示fd；现在,UNIX系统通常会在头文件<sys select.h=\"\" style=\"word-wrap: break-word;\">中定义常量FD_SETSIZE，它是数据类型fd_set的描述字数量，其值通常是1024，这样就能表示&lt;1024的fd。根据fd_set的位矢量实现，我们可以重新理解操作fd_set的四个宏：&nbsp;</sys></p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp; fd_set set;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">FD_ZERO(&amp;set);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*将set的所有位置0，如set在内存中占8位则将set置为</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">00000000*/</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">FD_SET(0, &amp;set);&nbsp;&nbsp;&nbsp; /* 将set的第0位置1，如set原来是00000000，则现在变为10000000，这样fd==1的文件描述字就被加进set中了 */</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">FD_CLR(4, &amp;set);&nbsp;&nbsp;&nbsp; /*将set的第4位置0，如set原来是10001000，则现在变为10000000，这样fd==4的文件描述字就被从set中清除了 */&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">FD_ISSET(5, &amp;set);&nbsp; /* 测试set的第5位是否为1，如果set原来是10000100，则返回非零，表明fd==5的文件描述字在set中；否则返回0*/&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">―――――――――――――――――――――――――――――――――――――――</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">注意fd的最大值必须<fd_setsize></fd_setsize></p><p style=\"word-wrap: break-word;\"></p>&lt;&gt;<p></p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">―――――――――――――――――――――――――――――――――――――――&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">select函数的接口比较简单：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp; int select(int nfds, fd_set *readset, fd_set *writeset,</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">fd_set* exceptset, struct timeval *timeout);&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">功能：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">测试指定的fd可读？可写？有异常条件待处理？&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">参数：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">nfds&nbsp;&nbsp;&nbsp;&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中所含的最大fd值更大，一般设为三组fd_set中所含的最大fd值加1（如在readset,writeset,exceptset中所含最大的fd为5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">readset &nbsp;&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; 用来检查可读性的一组文件描述字。</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">writeset</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; 用来检查可写性的一组文件描述字。</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">exceptset</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; 用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">timeout</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">有三种可能：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timeout=NULL（阻塞：直到有一个fd位被置为1函数才返回）</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timeout所指向的结构设为非零时间（等待固定时间：有一个fd位被置为1或者时间耗尽，函数均返回）</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timeout所指向的结构，时间设为0（非阻塞：函数检查完每个fd后立即返回）&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">返回值： &nbsp; &nbsp;&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">返回对应位仍然为1的fd的总数。&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">Remarks：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">三组fd_set均将某些fd位置0，只有那些可读，可写以及有异常条件待处理的fd位仍然为1。</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">使用select函数的过程一般是：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">先调用宏FD_ZERO将指定的fd_set清零，然后调用宏FD_SET将需要测试的fd加入fd_set，接着调用函数select测试fd_set中的所有fd，最后用宏FD_ISSET检查某个fd在函数select调用后，相应位是否仍然为1。&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">以下是一个测试单个文件描述字可读性的例子：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; int isready(int fd)</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; {</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int rc;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fd_set fds;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct timeval tv; &nbsp; &nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FD_ZERO(&amp;fds);</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FD_SET(fd,&amp;fds);</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv.tv_sec = tv.tv_usec = 0; &nbsp; &nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;rc = select(fd+1, &amp;fds, NULL, NULL, &amp;tv);</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rc &lt; 0)&nbsp;&nbsp; //error</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1; &nbsp; &nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return FD_ISSET(fd,&amp;fds) ? 1 : 0;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; }</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">下面还有一个复杂一些的应用：</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">//这段代码将指定测试Socket的描述字的可读可写性，因为Socket使用的也是fd</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">uint32 SocketWait(TSocket *s,bool rd,bool wr,uint32 timems) &nbsp; &nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">{</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; fd_set rfds,wfds;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">#ifdef _WIN32</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; TIMEVAL tv;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">#else</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; struct timeval tv;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">#endif&nbsp;&nbsp; /* _WIN32 */&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; FD_ZERO(&amp;rfds);</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; FD_ZERO(&amp;wfds);&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; if (rd)&nbsp;&nbsp;&nbsp;&nbsp; //TRUE</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; FD_SET(*s,&amp;rfds);&nbsp;&nbsp; //添加要测试的描述字&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; if (wr)&nbsp;&nbsp;&nbsp;&nbsp; //FALSE</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; FD_SET(*s,&amp;wfds);&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; tv.tv_sec=timems/1000;&nbsp;&nbsp;&nbsp;&nbsp; //second</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; tv.tv_usec=timems%1000;&nbsp;&nbsp;&nbsp;&nbsp; //ms&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; for (;;) //如果errno==EINTR，反复测试缓冲区的可读性</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; switch(select((*s)+1,&amp;rfds,&amp;wfds,NULL,</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; (timems==TIME_INFINITE?NULL:&amp;tv)))&nbsp; //测试在规定的时间内套接口接收缓冲区中是否有数据可读</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; //0－－超时，-1－－出错</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 0:&nbsp;&nbsp;&nbsp;&nbsp; /* time out */</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return 0;&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case (-1):&nbsp;&nbsp;&nbsp; /* socket error */</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (SocketError()==EINTR)</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; break; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return 0; //有错但不是EINTR&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; default:</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (FD_ISSET(*s,&amp;rfds)) //如果s是fds中的一员返回非0，否则返回0</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return 1;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (FD_ISSET(*s,&amp;wfds))</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return 2;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return 0;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\"><br style=\"word-wrap: break-word;\"></p><p style=\"word-wrap: break-word; margin: 5px auto; padding: 0px; text-indent: 2em;\">}</p></span></div><div class=\"Blog_con2_1 Blog_con3_2\" style=\"word-wrap: break-word; margin-top: 50px; position: relative; line-height: 22px;\"><div style=\"word-wrap: break-word; height: 30px;\"><div class=\"bdsharebuttonbox bdshare-button-style0-16\" data-bd-bind=\"1441869943767\" style=\"word-wrap: break-word; zoom: 1; height: 30px;\"><a class=\"bds_more\" href=\"http://blog.chinaunix.net/uid-25749806-id-297906.html#\" data-cmd=\"more\" style=\"word-wrap: break-word; text-decoration: none; color: rgb(51, 51, 51); float: left; font-size: 12px; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(http://bdimg.share.baidu.com/static/api/img/share/icons_0_16.png?v=ba7acbd3.png); cursor: pointer; margin: 6px 6px 6px 0px; font-family: 宋体, Arial; background-position: 0px 0px; background-repeat: no-repeat no-repeat;\"></a><a class=\"bds_qzone\" title=\"分享到QQ空间\" href=\"http://blog.chinaunix.net/uid-25749806-id-297906.html#\" data-cmd=\"qzone\" style=\"word-wrap: break-word; text-decoration: none; color: rgb(25, 89, 155); float: left; font-size: 12px; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(http://bdimg.share.baidu.com/static/api/img/share/icons_0_16.png?v=ba7acbd3.png); cursor: pointer; margin: 6px 6px 6px 0px; font-family: 宋体, Arial; background-position: 0px -52px; background-repeat: no-repeat no-repeat;\"></a><a class=\"bds_tsina\" title=\"分享到新浪微博\" href=\"http://blog.chinaunix.net/uid-25749806-id-297906.html#\" data-cmd=\"tsina\" style=\"word-wrap: break-word; text-decoration: none; color: rgb(25, 89, 155); float: left; font-size: 12px; padding-left: 17px; line-height: 16px; height: 16px; background-image: url(http://bdimg.share.baidu.com/static/api/img/share/icons_0_16.png?v=ba7acbd3.png); cursor: pointer; margin: 6px 6px 6px 0px; font-family: 宋体, Arial; background-position: 0px -104px; background-repeat: no-repeat no-repeat;\"></a></div></div></div></div>"
    }
  ]
}
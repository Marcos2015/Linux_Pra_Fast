{
  "title": "Linux内核 TCP/IP、Socket参数调优",
  "cells": [
    {
      "type": "text",
      "data": "Doc1:<div><h1 style=\"margin: 0px; padding: 0px; font-size: 13px; font-weight: normal; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 18pt;\"><strong style=\"margin: 0px; padding: 0px;\">/proc/sys/net目录</strong></span></h1><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\">　　<span style=\"margin: 0px; padding: 0px; font-size: 14px;\">所有的TCP/IP参数都位于/proc/sys/net目录下（请注意，对/proc/sys/net目录下内容的修改都是临时的，任何修改在系统重启后都会丢失），例如下面这些重要的参数：</span></p><div style=\"margin: 0px; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\" align=\"center\"><table style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border-style: solid; border-color: silver; width: 989px; background-color: rgb(240, 248, 255); height: 1829px;\" cellspacing=\"0\" cellpadding=\"0\" border=\"1\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">参数（路径</strong><strong style=\"margin: 0px; padding: 0px;\">+</strong><strong style=\"margin: 0px; padding: 0px;\">文件）</strong></span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">默认值</strong></span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">优化值</strong></span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/core/rmem_default</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"left\"><span style=\"margin: 0px; padding: 0px;\">默认的TCP数据接收窗口大小（字节）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">229376</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">256960</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/core/rmem_max</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">最大的TCP数据接收窗口（字节）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">131071</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">513920</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/core/wmem_default</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">默认的TCP数据发送窗口大小（字节）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">229376</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">256960</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/core/wmem_max</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">最大的TCP数据发送窗口（字节）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">131071</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">513920</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/core/netdev_max_backlog</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1000</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">2000</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/core/somaxconn</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">128</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">2048</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/core/optmem_max</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">表示每个套接字所允许的最大缓冲区的大小。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">20480</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">81920</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_mem</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">确定TCP栈应该如何反映内存使用，每个值的单位都是内存页（通常是4KB）。第一个值是内存使用的下限；第二个值是内存压力模式开始对缓冲区使用应用压力的上限；第三个值是内存使用的上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。对于较大的BDP可以增大这些值（注意，其单位是内存页而不是字节）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">94011&nbsp; 125351&nbsp; 188022</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">131072&nbsp; 262144&nbsp; 524288</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_rmem</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">为自动调优定义socket使用的内存。第一个值是为socket接收缓冲区分配的最少字节数；第二个值是默认值（该值会被rmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值；第三个值是接收缓冲区空间的最大字节数（该值会被rmem_max覆盖）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">4096&nbsp; 87380&nbsp; 4011232</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">8760&nbsp; 256960&nbsp; 4088000</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_wmem</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">为自动调优定义socket使用的内存。第一个值是为socket发送缓冲区分配的最少字节数；第二个值是默认值（该值会被wmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值；第三个值是发送缓冲区空间的最大字节数（该值会被wmem_max覆盖）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">4096&nbsp; 16384&nbsp; 4011232</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">8760&nbsp; 256960&nbsp; 4088000</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_keepalive_time</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">7200</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1800</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_keepalive_intvl</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">探测消息未获得响应时，重发该消息的间隔时间（秒）。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">75</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">30</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_keepalive_probes</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">在认定TCP连接失效之前，最多发送多少个keepalive探测消息。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">9</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">3</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_sack</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">启用有选择的应答（1表示启用），通过有选择地应答乱序接收到的报文来提高性能，让发送者只发送丢失的报文段，（对于广域网通信来说）这个选项应该启用，但是会增加对CPU的占用。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_fack</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">启用转发应答，可以进行有选择应答（SACK）从而减少拥塞情况的发生，这个选项也应该启用。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_timestamps</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">TCP时间戳（会在TCP包头增加12个字节），以一种比重发超时更精确的方法（参考RFC 1323）来启用对RTT 的计算，为实现更好的性能应该启用这个选项。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_window_scaling</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">启用RFC 1323定义的window scaling，要支持超过64KB的TCP窗口，必须启用该值（1表示启用），TCP窗口最大至1GB，TCP连接双方都启用时才生效。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_syncookies</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">表示是否打开TCP同步标签（syncookie），内核必须打开了CONFIG_SYN_COOKIES项进行编译，同步标签可以防止一个套接字在有过多试图连接到达时引起过载。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_tw_reuse</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">表示是否允许将处于TIME-WAIT状态的socket（TIME-WAIT的端口）用于新的TCP连接 。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">0</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_tw_recycle</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">能够更快地回收TIME-WAIT套接字。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">0</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_fin_timeout</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间（秒）。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">60</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">30</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/ip_local_port_range</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">表示TCP/UDP协议允许使用的本地端口号</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">32768&nbsp; 61000</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1024&nbsp; 65000</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_max_syn_backlog</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">对于还未获得对方确认的连接请求，可保存在队列中的最大数目。如果服务器经常出现过载，可以尝试增加这个数字。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">2048</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">2048</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_low_latency</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">允许TCP/IP栈适应在高吞吐量情况下低延时的情况，这个选项应该禁用。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">0</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">&nbsp;</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_westwood</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">启用发送者端的拥塞控制算法，它可以维护对吞吐量的评估，并试图对带宽的整体利用情况进行优化，对于WAN 通信来说应该启用这个选项。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">0</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">&nbsp;</span></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"314\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">/proc/sys/net/ipv4/tcp_bic</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"449\"><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">为快速长距离网络启用Binary Increase Congestion，这样可以更好地利用以GB速度进行操作的链接，对于WAN通信应该启用这个选项。</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"212\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">1</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver;\" width=\"225\"><p style=\"margin: 10px auto; padding: 0px;\" align=\"center\"><span style=\"margin: 0px; padding: 0px;\">&nbsp;</span></p></td></tr></tbody></table></div><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\">&nbsp;</p><hr style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 18pt;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; line-height: 1.5;\">/etc/sysctl.conf文件</span></strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\">　　<span style=\"margin: 0px; padding: 0px; font-size: 14px;\">/etc/sysctl.conf是一个允许你改变正在运行中的Linux系统的接口。它包含一些TCP/IP堆栈和虚拟内存系统的高级选项，可用来控制Linux网络配置，由于/proc/sys/net目录内容的临时性，建议把TCPIP参数的修改添加到/etc/sysctl.conf文件,\n 然后保存文件，使用命令“/sbin/sysctl –p”使之立即生效。具体修改方案参照上文：</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.core.rmem_default = 256960</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.core.rmem_max = 513920</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.core.wmem_default = 256960</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.core.wmem_max = 513920</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.core.netdev_max_backlog = 2000</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.core.somaxconn = 2048</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.core.optmem_max = 81920</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_mem = 131072&nbsp; 262144&nbsp; 524288</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_rmem = 8760&nbsp; 256960&nbsp; 4088000</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_wmem = 8760&nbsp; 256960&nbsp; 4088000</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_keepalive_time = 1800</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_keepalive_intvl = 30</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_keepalive_probes = 3</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_sack = 1</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_fack = 1</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_timestamps = 1</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_window_scaling = 1</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_syncookies = 1</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_tw_reuse = 1</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_tw_recycle = 1</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_fin_timeout = 30</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.ip_local_port_range = 1024&nbsp; 65000</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">net.ipv4.tcp_max_syn_backlog = 2048</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\"><br></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\">Doc2：</span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">&nbsp;\n \n&nbsp;可调优的内核变量存在两种主要接口：sysctl命令和/proc文件系统，proc中与进程无关的所有信息都被移植到sysfs中。IPV4协议栈的sysctl参数主要是sysctl.net.core、sysctl.net.ipv4，对应的/proc文件系统是/proc/sys/net/ipv4和/proc/sys/net/core。只有内核在编译时包含了特定的属性，该参数才会出现在内核中。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">&nbsp; &nbsp; 对于内核参数应该谨慎调节，这些参数通常会影响到系统的整体性能。内核在启动时会根据系统的资源情况来初始化特定的变量，这种初始化的调节一般会满足通常的性能需求。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">&nbsp;\n &nbsp; \n应用程序通过socket系统调用和远程主机进行通讯，每一个socket都有一个读写缓冲区。读缓冲区保存了远程主机发送过来的数据，如果缓冲区已满，则数据会被丢弃，写缓冲期保存了要发送到远程主机的数据，如果写缓冲区已满，则系统的应用程序在写入数据时会阻塞。可知，缓冲区是有大小的。<br></span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>socket缓冲区默认大小</strong>：<br>/proc/sys/net/core/rmem_default &nbsp; &nbsp; 对应net.core.rmem_default<br>/proc/sys/net/core/wmem_default &nbsp; &nbsp; 对应net.core.wmem_default<br>&nbsp; &nbsp; 上面是各种类型socket的默认读写缓冲区大小，然而对于特定类型的socket则可以设置独立的值覆盖默认值大小。例如tcp类型的socket就可以用/proc/sys/net/ipv4/tcp_rmem和tcp_wmem来覆盖。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>socket缓冲区最大值：</strong><br>/proc/sys/net/core/rmem_max &nbsp; &nbsp; &nbsp; &nbsp;对应net.core.rmem_max<br>/proc/sys/net/core/wmem_max &nbsp; &nbsp; &nbsp; &nbsp;对应net.core.wmem_max</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/core/netdev_max_backlog &nbsp; &nbsp;对应 net.core.netdev_max_backlog<br>&nbsp; &nbsp; 该参数定义了当接口收到包的速率大于内核处理包的速率时，设备的输入队列中的最大报文数。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/core/somaxconn &nbsp; &nbsp; &nbsp; &nbsp;对应 net.core.somaxconn<br>&nbsp; &nbsp; 通过listen系统调用可以指定的最大accept队列backlog，当排队的请求连接大于该值时，后续进来的请求连接会被丢弃。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/core/optmem_max &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;对应 net.core.optmem_max<br>&nbsp; &nbsp; 每个socket的副缓冲区大小。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>TCP/IPV4内核参数：</strong><br>&nbsp; &nbsp; 在创建socket的时候会指定socke协议和地址类型。TCP socket缓冲区大小是他自己控制而不是由core内核缓冲区控制。<br>/proc/sys/net/ipv4/tcp_rmem &nbsp; &nbsp; 对应net.ipv4.tcp_rmem<br>/proc/sys/net/ipv4/tcp_wmem &nbsp; &nbsp; 对应net.ipv4.tcp_wmem<br>&nbsp; &nbsp; 以上是TCP socket的读写缓冲区的设置，每一项里面都有三个值，第一个值是缓冲区最小值，中间值是缓冲区的默认值，最后一个是缓冲区的最大值，虽然缓冲区的值不受core缓冲区的值的限制，但是缓冲区的最大值仍旧受限于core的最大值。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_mem &nbsp;<br>&nbsp;\n &nbsp; \n该内核参数也是包括三个值，用来定义内存管理的范围，第一个值的意思是当page数低于该值时，TCP并不认为他为内存压力，第二个值是进入内存的压力区域时所达到的页数，第三个值是所有TCP\n sockets所允许使用的最大page数，超过该值后，会丢弃后续报文。page是以页面为单位的，为系统中socket全局分配的内存容量。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">socket的结构如下图：</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><img src=\"quiver-image-url/1F4B110D03516D028A3C6AEDF046652B.jpg\" alt=\"socket结构图.jpg\" width=\"447\" height=\"399\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><br></span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_window_scaling &nbsp; &nbsp; &nbsp;对应net.ipv4.tcp_window_scaling<br>&nbsp; &nbsp; 管理TCP的窗口缩放特性，因为在tcp头部中声明接收缓冲区的长度为26位，因此窗口不能大于64K，如果大于64K，就要打开窗口缩放。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_sack &nbsp; &nbsp;对应net.ipv4.tcp_sack<br>&nbsp; &nbsp; 管理TCP的选择性应答，允许接收端向发送端传递关于字节流中丢失的序列号，减少了段丢失时需要重传的段数目，当段丢失频繁时，sack是很有益的。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_dsack &nbsp; 对应net.ipv4.tcp_dsack<br>&nbsp; &nbsp; 是对sack的改进，能够检测不必要的重传。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_fack &nbsp; &nbsp;对应net.ipv4.tcp_fack<br>&nbsp; &nbsp; 对sack协议加以完善，改进tcp的拥塞控制机制。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>TCP的连接管理：</strong><br>/proc/sys/net/ipv4/tcp_max_syn_backlog &nbsp; &nbsp;对应net.ipv4.tcp_max_syn_backlog<br>&nbsp; &nbsp; 每一个连接请求(SYN报文)都需要排队，直至本地服务器接收，该变量就是控制每个端口的 TCP SYN队列长度的。如果连接请求多余该值，则请求会被丢弃。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_syn_retries &nbsp; &nbsp;对应net.ipv4.tcp_syn_retries<br>&nbsp; &nbsp; 控制内核向某个输入的SYN/ACK段重新发送相应的次数，低值可以更好的检测到远程主机的连接失败。可以修改为3</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_retries1 &nbsp; &nbsp;对应net.ipv4.tcp_retries1<br>&nbsp; &nbsp; 该变量设置放弃回应一个tcp连接请求前，需要进行多少次重试。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_retries2 &nbsp; &nbsp;对应net.ipv4.tcp_retries2<br>&nbsp; &nbsp; 控制内核向已经建立连接的远程主机重新发送数据的次数，低值可以更早的检测到与远程主机失效的连接，因此服务器可以更快的释放该连接，可以修改为5</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>TCP连接的保持：</strong><br>/proc/sys/net/ipv4/tcp_keepalive_time &nbsp; &nbsp; &nbsp; &nbsp;对应net.ipv4.tcp_keepalive_time<br>&nbsp; &nbsp; 如果在该参数指定的秒数内连接始终处于空闲状态，则内核向客户端发起对该主机的探测</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_keepalive_intvl &nbsp; &nbsp;对应net.ipv4.tcp_keepalive_intvl<br>&nbsp; &nbsp; 该参数以秒为单位，规定内核向远程主机发送探测指针的时间间隔</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_keepalive_probes &nbsp; 对应net.ipv4.tcp_keepalive_probes<br>&nbsp; &nbsp; 该参数规定内核为了检测远程主机的存活而发送的探测指针的数量，如果探测指针的数量已经使用完毕仍旧没有得到客户端的响应，即断定客户端不可达，关闭与该客户端的连接，释放相关资源。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/ip_local_port_range &nbsp; 对应net.ipv4.ip_local_port_range<br>&nbsp; &nbsp; 规定了tcp/udp可用的本地端口的范围。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>TCP连接的回收：</strong><br>/proc/sys/net/ipv4/tcp_max_tw_buckets &nbsp; &nbsp; 对应net.ipv4.tcp_max_tw_buckets<br>&nbsp; &nbsp;该参数设置系统的TIME_WAIT的数量，如果超过默认值则会被立即清除。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_tw_reuse &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 对应net.ipv4.tcp_tw_reuse<br>&nbsp; &nbsp;该参数设置TIME_WAIT重用，可以让处于TIME_WAIT的连接用于新的tcp连接</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_tw_recycle &nbsp; &nbsp; &nbsp; &nbsp; 对应net.ipv4.tcp_tw_recycle<br>&nbsp; &nbsp;该参数设置tcp连接中TIME_WAIT的快速回收。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/tcp_fin_timeout &nbsp; &nbsp; &nbsp; 对应net.ipv4.tcp_fin_timeout<br>&nbsp; &nbsp;设置TIME_WAIT2进入CLOSED的等待时间。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/route/max_size<br>&nbsp; &nbsp;内核所允许的最大路由数目。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/ip_forward<br>&nbsp; &nbsp;接口间转发报文</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">/proc/sys/net/ipv4/ip_default_ttl<br>&nbsp; &nbsp;报文可以经过的最大跳数</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>虚拟内存参数：</strong><br>/proc/sys/vm/<br><br><br>&nbsp;\n &nbsp;在linux kernel 2.6.25之前通过ulimit \n-n(setrlimit(RLIMIT_NOFILE))设置每个进程的最大打开文件句柄数不能超过NR_OPEN(1024*1024),也就是100多w(除非重新编译内核)，而在25之后，内核导出了一个sys接口可以修改这个最大值/proc/sys/fs/nr_open。shell里不能直接更改，是因为登录的时候pam已经从limits.conf中设置了上限，ulimit命令只能在低于上限的范围内发挥了。</span></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\"><strong>Linux中查看socket状态：</strong><br>cat /proc/net/sockstat #（这个是ipv4的）<br><br>sockets: used 137<br>TCP: inuse 49 orphan 0 tw 3272 alloc 52 mem 46<br>UDP: inuse 1 mem 0<br>RAW: inuse 0<br>FRAG: inuse 0 memory 0<br>说明：<br>sockets: used：已使用的所有协议套接字总量<br>TCP: inuse：正在使用（正在侦听）的TCP套接字数量。其值≤ netstat –lnt | grep ^tcp | wc –l<br>TCP: orphan：无主（不属于任何进程）的TCP连接数（无用、待销毁的TCP socket数）<br>TCP: tw：等待关闭的TCP连接数。其值等于netstat –ant | grep TIME_WAIT | wc –l<br>TCP：alloc(allocated)：已分配（已建立、已申请到sk_buff）的TCP套接字数量。其值等于netstat –ant | grep ^tcp | wc –l<br>TCP：mem：套接字缓冲区使用量（单位不详。用scp实测，速度在4803.9kB/s时：其值=11，netstat –ant 中相应的22端口的Recv-Q＝0，Send-Q≈400）<br>UDP：inuse：正在使用的UDP套接字数量<br>RAW：<br>FRAG：使用的IP段数量<br><br><br></span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 19.5px; background-color: rgb(245, 245, 245);\"><span style=\"margin: 0px; padding: 0px; font-size: 14px;\"></span></p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica, Arial, sans-serif; font-size: medium; line-height: normal; background-color: rgb(249, 249, 249);\"><span style=\"font-size: 16px;\"><span style=\"font-family: NSimSun;\">参考：http://www.mjmwired.net/kernel/Documentation/sysctl/</span></span></p></div>"
    }
  ]
}
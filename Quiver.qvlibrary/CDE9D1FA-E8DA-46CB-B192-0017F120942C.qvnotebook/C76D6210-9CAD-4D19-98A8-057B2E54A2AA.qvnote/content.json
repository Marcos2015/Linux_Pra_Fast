{
  "title": "Linux 内核网络优化",
  "cells": [
    {
      "type": "text",
      "data": "<p>核心的网络功能，所以相关的设定数据都是放置在 /proc/sys/net/ipv4/ 这个目录当中。 至于该目录下各个档案的详细资料，建议大家可以参考核心的说明文件：\n<br>\n/usr/src/linux-{version}/networking/ip-sysctl.txt&nbsp;<br>\n</p>\n<p>RHEL 6.0：</p>\n<p>/usr/src/kernels/2.6.32-71.el6.i686/net/ipv4/Kconfig<br>\n</p>\n<p><br>\n</p>\n<p>阻断式服务 (DoS) 攻击法当中的一种方式，就是利用 TCP 封包的 SYN 三向交握<br>\n原理所达成的， 这种方式称为 SYN Flooding 。那如何预防这种方式的攻击呢？我们可以启用核心的 SYN <br>\nCookie 模块啊！ 这个 SYN Cookie 模块可以在系统用来启动随机联机的埠口 (1024:65535) 即将用完时<br>\n自动启动。 <br>\n<br>\n当启动 SYN Cookie 时，主机在发送 SYN/ACK 确认封包前，会要求 Client 端在短时间内回复一个序号， <br>\n这个序号包含许多原本 SYN 封包内的信息，包括 IP、port 等。若 Client 端可以回复正确的序号， 那<br>\n么主机就确定该封包为可信的，因此会发送 SYN/ACK 封包，否则就不理会此一封包。 <br>\n<br>\n透过此一机制可以大大的降低无效的 SYN 等待埠口，而避免 SYN Flooding 的 DoS 攻击说！ 那么如何启<br>\n动这个模块呢？很简单，这样做即可： [root@linux ~]# echo \"1\" &gt; /proc/sys/net/ipv4/tcp_syncookies <br>\n但是这个设定值由于违反 TCP 的三向交握 (因为主机在发送 SYN/ACK 之前需要先等待 client 的序号响<br>\n应)， 所以可能会造成某些服务的延迟现象，例如 SMTP (mail server)。 不过总的来说，这个设定值还<br>\n是不错用的！ 只是不适合用在负载已经很高的服务器内喔！ 因为负载太高的主机有时会让核心误判遭受 <br>\nSYN Flooding 的攻击呢。&nbsp;<br>\n<br>\n</p>\n<p></p>\n<div style=\"font-size:12px\"><span style=\"font-size:13px\">&nbsp;/proc/sys/net/core/优化<br>\n　　该目录下的配置文件主要用来控制内核和网络层之间的交互行为。<br>\n1） /proc/sys/net/core/message_burst<br>\n写新的警告消息所需的时间（以 1/10 秒为单位）；在这个时间内系统接收到的其它警告消息会被丢弃。这用于防止某些企图用消息“淹没”系统的人所使用的拒绝服务（Denial of Service）攻击。<br>\n<br>\n缺省设置：50（5秒）<br>\n2） /proc/sys/net/core/message_cost<br>\n该文件表示写每个警告消息相关的成本值。该值越大，越有可能忽略警告消息。<br>\n<br>\n缺省设置：5<br>\n3） /proc/sys/net/core/netdev_max_backlog<br>\n该文件表示在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。<br>\n<br>\n缺省设置：300<br>\n4） /proc/sys/net/core/optmem_max<br>\n该文件表示每个套接字所允许的最大缓冲区的大小。<br>\n<br>\n缺省设置：10240<br>\n5） /proc/sys/net/core/rmem_default<br>\n该文件指定了接收套接字缓冲区大小的缺省值（以字节为单位）。<br>\n<br>\n缺省设置：110592<br>\n6） /proc/sys/net/core/rmem_max<br>\n该文件指定了接收套接字缓冲区大小的最大值（以字节为单位）。<br>\n<br>\n缺省设置：131071<br>\n7） /proc/sys/net/core/wmem_default<br>\n该文件指定了发送套接字缓冲区大小的缺省值（以字节为单位）。<br>\n<br>\n缺省设置：110592<br>\n8） /proc/sys/net/core/wmem_max<br>\n该文件指定了发送套接字缓冲区大小的最大值（以字节为单位）。<br>\n<br>\n缺省设置：131071<br>\n9） 待续。。。<br>\n六、/proc/sys/net/ipv4/优化<br>\n1) /proc/sys/net/ipv4/ip_forward<br>\n该文件表示是否打开IP转发。<br>\n0，禁止<br>\n1，转发<br>\n<br>\n缺省设置：0<br>\n2) /proc/sys/net/ipv4/ip_default_ttl<br>\n该文件表示一个数据报的生存周期（Time To Live），即最多经过多少路由器。<br>\n<br>\n缺省设置：64<br>\n增加该值会降低系统性能。<br>\n3) /proc/sys/net/ipv4/ip_no_pmtu_disc<br>\n该文件表示在全局范围内关闭路径MTU探测功能。<br>\n<br>\n缺省设置：0<br>\n4) /proc/sys/net/ipv4/route/min_pmtu<br>\n该文件表示最小路径MTU的大小。<br>\n<br>\n缺省设置：552<br>\n5) /proc/sys/net/ipv4/route/mtu_expires<br>\n该文件表示PMTU信息缓存多长时间（秒）。<br>\n<br>\n缺省设置：600（秒）<br>\n6) /proc/sys/net/ipv4/route/min_adv_mss<br>\n该文件表示最小的MSS（Maximum Segment Size）大小，取决于第一跳的路由器MTU。<br>\n<br>\n缺省设置：256（bytes）<br>\n6.1 IP Fragmentation<br>\n1) /proc/sys/net/ipv4/ipfrag_low_thresh/proc/sys/net/ipv4/ipfrag_low_thresh<br>\n两个文件分别表示用于重组IP分段的内存分配最低值和最高值，一旦达到最高内存分配值，其它分段将被丢弃，直到达到最低内存分配值。<br>\n<br>\n缺省设置：196608（ipfrag_low_thresh）<br>\n　　　　　262144（ipfrag_high_thresh）<br>\n2) /proc/sys/net/ipv4/ipfrag_time<br>\n该文件表示一个IP分段在内存中保留多少秒。<br>\n<br>\n缺省设置：30（秒）<br>\n6.2 INET Peer Storage<br>\n1) /proc/sys/net/ipv4/inet_peer_threshold<br>\nINET对端存储器某个合适值，当超过该阀值条目将被丢弃。该阀值同样决定生存<br>\n时间以及废物收集通过的时间间隔。条目越多，存活期越低，GC 间隔越短。<br>\n<br>\n缺省设置：65664<br>\n2) /proc/sys/net/ipv4/inet_peer_minttl<br>\n条目的最低存活期。在重组端必须要有足够的碎片(fragment)存活期。这个最低<br>\n存活期必须保证缓冲池容积是否少于 inet_peer_threshold。该值以 jiffies为<br>\n单位测量。<br>\n<br>\n缺省设置：120<br>\n3) /proc/sys/net/ipv4/inet_peer_maxttl<br>\n条目的最大存活期。在此期限到达之后，如果缓冲池没有耗尽压力的话(例如：缓<br>\n冲池中的条目数目非常少)，不使用的条目将会超时。该值以 jiffies为单位测量。<br>\n<br>\n缺省设置：600<br>\n4) /proc/sys/net/ipv4/inet_peer_gc_mintime<br>\n废物收集(GC)通过的最短间隔。这个间隔会影响到缓冲池中内存的高压力。 该值<br>\n以 jiffies为单位测量。</span></div>\n<div style=\"font-size:12px\">5) /proc/sys/net/ipv4/inet_peer_gc_maxtime<br>\n废物收集(GC)通过的最大间隔，这个间隔会影响到缓冲池中内存的低压力。 该值<br>\n以 jiffies为单位测量。<br>\n<br>\n缺省设置：120<br>\n6.3 TCP Variables<br>\n1) /proc/sys/net/ipv4/tcp_syn_retries<br>\n该文件表示本机向外发起TCP SYN连接超时重传的次数，不应该高于255；该值仅仅针对外出的连接，对于进来的连接由tcp_retries1控制。<br>\n<br>\n缺省设置：5<br>\n2) /proc/sys/net/ipv4/tcp_keepalive_probes<br>\n该文件表示丢弃TCP连接前，进行最大TCP保持连接侦测的次数。保持连接仅在<br>\nSO_KEEPALIVE套接字选项被打开时才被发送。<br>\n<br>\n缺省设置：9（次）<br>\n3) /proc/sys/net/ipv4/tcp_keepalive_time<br>\n该文件表示从不再传送数据到向连接上发送保持连接信号之间所需的秒数。<br>\n<br>\n缺省设置：7200（2小时）<br>\n4) /proc/sys/net/ipv4/tcp_keepalive_intvl<br>\n该文件表示发送TCP探测的频率，乘以tcp_keepalive_probes表示断开没有相应的TCP连接的时间。<br>\n<br>\n缺省设置：75（秒）<br>\n5) /proc/sys/net/ipv4/tcp_retries1<br>\n　　该文件表示放弃回应一个TCP连接请求前进行重传的次数。<br>\n　　<br>\n　　缺省设置：3<br>\n6) /proc/sys/net/ipv4/tcp_retries2<br>\n　　该文件表示放弃在已经建立通讯状态下的一个TCP数据包前进行重传的次数。<br>\n　　<br>\n　　缺省设置：15<br>\n7) /proc/sys/net/ipv4/tcp_orphan_retries<br>\n在近端丢弃TCP连接之前，要进行多少次重试。默认值是 7 个，相当于 50秒–<br>\n16分钟，视 RTO 而定。如果您的系统是负载很大的web服务器，那么也许需<br>\n要降低该值，这类 sockets 可能会耗费大量的资源。另外参考<br>\ntcp_max_orphans。<br>\n8) /proc/sys/net/ipv4/tcp_fin_timeout<br>\n对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间。对方可能<br>\n会断开连接或一直不结束连接或不可预料的进程死亡。默认值为 60 秒。过去在<br>\n2.2版本的内核中是 180 秒。您可以设置该值，但需要注意，如果您的机器为负<br>\n载很重的web服务器，您可能要冒内存被大量无效数据报填满的风险，<br>\nFIN-WAIT-2 sockets 的危险性低于 FIN-WAIT-1，因为它们最多只吃 1.5K <br>\n的内存，但是它们存在时间更长。另外参考 tcp_max_orphans。<br>\n<br>\n缺省设置：60（秒）<br>\n9) /proc/sys/net/ipv4/tcp_max_tw_buckets<br>\n系统在同时所处理的最大timewait sockets 数目。如果超过此数的话，<br>\ntime-wait socket 会被立即砍除并且显示警告信息。之所以要设定这个限制，纯<br>\n粹为了抵御那些简单的 DoS 攻击，千万不要人为的降低这个限制，不过，如果<br>\n网络条件需要比默认值更多，则可以提高它(或许还要增加内存)。<br>\n<br>\n缺省设置：180000<br>\n10) /proc/sys/net/ipv4/tcp_tw_recyle<br>\n打开快速 TIME-WAIT sockets 回收。除非得到技术专家的建议或要求，请不要随<br>\n意修改这个值。<br>\n<br>\n缺省设置：0<br>\n11) /proc/sys/net/ipv4/tcp_tw_reuse<br>\n该文件表示是否允许重新应用处于TIME-WAIT状态的socket用于新的TCP连接。<br>\n<br>\n缺省设置：0<br>\n12) /proc/sys/net/ipv4/tcp_max_orphans<br>\n系统所能处理不属于任何进程的TCP sockets最大数量。假如超过这个数量，那<br>\n么不属于任何进程的连接会被立即reset，并同时显示警告信息。之所以要设定这<br>\n个限制，纯粹为了抵御那些简单的 DoS 攻击，千万不要依赖这个或是人为的降<br>\n低这个限制。<br>\n<br>\n缺省设置：8192<br>\n13) /proc/sys/net/ipv4/tcp_abort_on_overflow<br>\n当守护进程太忙而不能接受新的连接，就向对方发送reset消息，默认值是false。<br>\n这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确<br>\n信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。<br>\n<br>\n缺省设置：０<br>\n14) /proc/sys/net/ipv4/tcp_syncookies<br>\n该文件表示是否打开TCP同步标签(syncookie)，内核必须打开了 CONFIG_SYN_COOKIES项进行编译。 同步标签(syncookie)可以防止一个套接字在有过多试图连接到达时引起过载。<br>\n<br>\n缺省设置：0<br>\n15) /proc/sys/net/ipv4/tcp_stdurg<br>\n使用 TCP urg pointer 字段中的主机请求解释功能。大部份的主机都使用老旧的 <br>\nBSD解释，因此如果您在 Linux 打开它，或会导致不能和它们正确沟通。<br>\n<br>\n缺省设置：0<br>\n16) /proc/sys/net/ipv4/tcp_max_syn_backlog<br>\n对于那些依然还未获得客户端确认的连接请求，需要保存在队列中最大数目。对于<br>\n超过 128Mb 内存的系统，默认值是 1024，低于 128Mb 的则为 128。如果<br>\n服务器经常出现过载，可以尝试增加这个数字。警告！假如您将此值设为大于<br>\n1024，最好修改 include/net/tcp.h 里面的 TCP_SYNQ_HSIZE，以保持<br>\nTCP_SYNQ_HSIZE*16 0)或者bytes-bytes/2^(-tcp_adv_win_scale)(如<br>\n果tcp_adv_win_scale 128Mb 32768-610000)则系统将忽略所有发送给自己<br>\n的ICMP ECHO请求或那些广播地址的请求。<br>\n<br>\n缺省设置：1024<br>\n17) /proc/sys/net/ipv4/tcp_window_scaling<br>\n该文件表示设置tcp/ip会话的滑动窗口大小是否可变。参数值为布尔值，为1时表示可变，为0时表示不可变。tcp/ip通常使用的窗口最大可达到65535\n 字节，对于高速网络，该值可能太小，这时候如果启用了该功能，可以使tcp/ip滑动窗口大小增大数个数量级，从而提高数据传输的能力。<br>\n<br>\n缺省设置：1<br>\n18) /proc/sys/net/ipv4/tcp_sack<br>\n该文件表示是否启用有选择的应答（Selective Acknowledgment），这可以通过有选择地应答乱序接收到的报文来提高性能（这样可以让发送者只发送丢失的报文段）；（对于广域网通信来说）这个选项应该启用，但是这会增加对 CPU 的占用。<br>\n<br>\n缺省设置：1<br>\n19) /proc/sys/net/ipv4/tcp_timestamps<br>\n该文件表示是否启用以一种比超时重发更精确的方法（请参阅 RFC 1323）来启用对 RTT 的计算；为了实现更好的性能应该启用这个选项。<br>\n<br>\n缺省设置：1<br>\n20) /proc/sys/net/ipv4/tcp_fack<br>\n该文件表示是否打开FACK拥塞避免和快速重传功能。<br>\n<br>\n缺省设置：1<br>\n21) /proc/sys/net/ipv4/tcp_dsack<br>\n该文件表示是否允许TCP发送“两个完全相同”的SACK。<br>\n<br>\n缺省设置：1<br>\n22) /proc/sys/net/ipv4/tcp_ecn<br>\n该文件表示是否打开TCP的直接拥塞通告功能。<br>\n<br>\n缺省设置：0<br>\n23) /proc/sys/net/ipv4/tcp_reordering<br>\n该文件表示TCP流中重排序的数据报最大数量。<br>\n<br>\n缺省设置：3<br>\n24) /proc/sys/net/ipv4/tcp_retrans_collapse<br>\n该文件表示对于某些有bug的打印机是否提供针对其bug的兼容性。<br>\n<br>\n缺省设置：1<br>\n25) /proc/sys/net/ipv4/tcp_wmem<br>\n该文件包含3个整数值，分别是：min，default，max<br>\nMin：为TCP socket预留用于发送缓冲的内存最小值。每个TCP socket都可以使用它。<br>\nDefault：为TCP socket预留用于发送缓冲的内存数量，默认情况下该值会影响其它协议使用的net.core.wmem中default的 值，一般要低于net.core.wmem中default的值。<br>\nMax：为TCP socket预留用于发送缓冲的内存最大值。该值不会影响net.core.wmem_max，今天选择参数SO_SNDBUF则不受该值影响。默认值为128K。<br>\n<br>\n缺省设置：4096 16384 131072<br>\n26) /proc/sys/net/ipv4/tcp_rmem<br>\n该文件包含3个整数值，分别是：min，default，max<br>\nMin：为TCP socket预留用于接收缓冲的内存数量，即使在内存出现紧张情况下TCP socket都至少会有这么多数量的内存用于接收缓冲。 <br>\nDefault：为TCP socket预留用于接收缓冲的内存数量，默认情况下该值影响其它协议使用的 net.core.wmem中default的\n 值。该值决定了在tcp_adv_win_scale、tcp_app_win和tcp_app_win的默认值情况下，TCP \n窗口大小为65535。\n<br>\nMax：为TCP socket预留用于接收缓冲的内存最大值。该值不会影响 net.core.wmem中max的值，今天选择参数 SO_SNDBUF则不受该值影响。<br>\n<br>\n缺省设置：4096 87380 174760<br>\n27) /proc/sys/net/ipv4/tcp_mem<br>\n该文件包含3个整数值，分别是：low，pressure，high<br>\nLow：当TCP使用了低于该值的内存页面数时，TCP不会考虑释放内存。 <br>\nPressure：当TCP使用了超过该值的内存页面数量时，TCP试图稳定其内存使用，进入pressure模式，当内存消耗低于low值时则退出pressure状态。\n<br>\nHigh：允许所有tcp sockets用于排队缓冲数据报的页面量。 <br>\n一般情况下这些值是在系统启动时根据系统内存数量计算得到的。<br>\n<br>\n缺省设置：24576 32768 49152<br>\n28) /proc/sys/net/ipv4/tcp_app_win<br>\n该文件表示保留max(window/2^tcp_app_win, mss)数量的窗口由于应用缓冲。当为0时表示不需要缓冲。<br>\n<br>\n缺省设置：31<br>\n29) /proc/sys/net/ipv4/tcp_adv_win_scale<br>\n该文件表示计算缓冲开销bytes/2^tcp_adv_win_scale(如果tcp_adv_win_scale &gt;; \n0)或者bytes-bytes/2^(-tcp_adv_win_scale)(如果tcp_adv_win_scale &lt;= 0）。<br>\n<br>\n缺省设置：2<br>\n6.4 IP Variables<br>\n1) /proc/sys/net/ipv4/ip_local_port_range<br>\n该文件表示TCP／UDP协议打开的本地端口号。<br>\n<br>\n缺省设置：1024 4999<br>\n建议设置：32768 61000<br>\n2) /proc/sys/net/ipv4/ip_nonlocal_bind<br>\n该文件表示是否允许进程邦定到非本地地址。<br>\n<br>\n缺省设置：0<br>\n3) /proc/sys/net/ipv4/ip_dynaddr<br>\n该参数通常用于使用拨号连接的情况，可以使系统动能够立即改变ip包的源地址为该ip地址，同时中断原有的tcp对话而用新地址重新发出一个syn请求包，开始新的tcp对话。在使用ip欺骗时，该参数可以立即改变伪装地址为新的ip地址。该文件表示是否允许动态地址，如果该值非0，表示允许；如果该值大于1，内核将通过log记录动态地址重写信息。<br>\n<br>\n缺省设置：0<br>\n4) /proc/sys/net/ipv4/icmp_echo_ignore_all/proc/sys/net/ipv4/icmp_echo_ignore_broadcasts<br>\n该文件表示内核是否忽略所有的ICMP ECHO请求，或忽略广播和多播请求。<br>\n0， 响应请求<br>\n1， 忽略请求<br>\n<br>\n缺省设置：０<br>\n建议设置：1<br>\n5) /proc/sys/net/ipv4/icmp_ratelimit<br>\n6) /proc/sys/net/ipv4/icmp_ratemask<br>\n7) /proc/sys/net/ipv4/icmp_ignore_bogus_error_reponses<br>\n某些路由器违背RFC1122标准，其对广播帧发送伪造的响应来应答。这种违背行<br>\n为通常会被以告警的方式记录在系统日志中。如果该选项设置为True，内核不会<br>\n记录这种警告信息。<br>\n<br>\n缺省设置：0<br>\n8) /proc/sys/net/ipv4/igmp_max_memberships<br>\n该文件表示多播组中的最大成员数量。<br>\n<br>\n缺省设置：20<br>\n6.5 Other Configuration<br>\n1) /proc/sys/net/ipv4/conf/*/accept_redirects<br>\n　　　如果主机所在的网段中有两个路由器，你将其中一个设置成了缺省网关，但是该网关<br>\n　　　在收到你的ip包时发现该ip包必须经过另外一个路由器，这时这个路由器就会给你<br>\n　　　发一个所谓的“重定向”icmp包，告诉将ip包转发到另外一个路由器。参数值为布尔<br>\n　　　值，1表示接收这类重定向icmp 信息，0表示忽略。在充当路由器的linux主机上缺<br>\n　　　省值为0，在一般的linux主机上缺省值为1。建议将其改为0以消除安全性隐患。<br>\n2) /proc/sys/net/ipv4/*/accept_source_route<br>\n　是否接受含有源路由信息的ip包。参数值为布尔值，1表示接受，0表示不接受。在<br>\n　充当网关的linux主机上缺省值为1，在一般的linux主机上缺省值为0。从安全性角<br>\n　度出发，建议关闭该功能。<br>\n3) /proc/sys/net/ipv4/*/secure_redirects<br>\n　其实所谓的“安全重定向”就是只接受来自网关的“重定向”icmp包。该参数就是<br>\n　用来设置“安全重定向”功能的。参数值为布尔值，1表示启用，0表示禁止，缺省值<br>\n　为启用。<br>\n4) /proc/sys/net/ipv4/*/proxy_arp<br>\n　设置是否对网络上的arp包进行中继。参数值为布尔值，1表示中继，0表示忽略，<br>\n　缺省值为0。该参数通常只对充当路由器的linux主机有用。<br>\n七、性能优化策略<br>\n7.1 基本优化<br>\n1) 关闭后台守护进程<br>\n系统安装完后，系统会默认启动一些后台守护进程，有些进程并不是必需的；因此，关闭这些进程可以节省一部分物理内存消耗。以root身份登录系统，运行ntsysv，选中如下进程：<br>\n　　iptables<br>\nnetwork<br>\nsyslog<br>\nrandom<br>\napmd<br>\nxinetd<br>\nvsftpd<br>\ncrond<br>\nlocal<br>\n修改完后，重新启动系统。<br>\n如此，系统将仅仅启动选中的这些守护进程。<br>\n2) 减少终端连接数<br>\n系统默认启动6个终端，而实际上只需启动3个即可；以root身份登录系统，运行vi /etc/inittab，修改成如下：<br>\n# Run gettys in standard runlevels<br>\n1:2345:respawn:/sbin/mingetty tty1<br>\n2:2345:respawn:/sbin/mingetty tty2<br>\n3:2345:respawn:/sbin/mingetty tty3<br>\n#4:2345:respawn:/sbin/mingetty tty4<br>\n#5:2345:respawn:/sbin/mingetty tty5<br>\n#6:2345:respawn:/sbin/mingetty tty6<br>\n如上所述，注释掉4、5、6终端。<br>\n3) 待续。。。<br>\n7.2 网络优化<br>\n1) 优化系统套接字缓冲区<br>\nnet.core.rmem_max=16777216<br>\nnet.core.wmem_max=16777216<br>\n2) 优化TCP接收／发送缓冲区<br>\nnet.ipv4.tcp_rmem=4096 87380 16777216<br>\nnet.ipv4.tcp_wmem=4096 65536 16777216<br>\n3) 优化网络设备接收队列<br>\nnet.core.netdev_max_backlog=3000<br>\n4) 关闭路由相关功能<br>\nnet.ipv4.conf.lo.accept_source_route=0<br>\nnet.ipv4.conf.all.accept_source_route=0<br>\nnet.ipv4.conf.eth0.accept_source_route=0<br>\nnet.ipv4.conf.default.accept_source_route=0<br>\n<br>\nnet.ipv4.conf.lo.accept_redirects=0<br>\nnet.ipv4.conf.all.accept_redirects=0<br>\nnet.ipv4.conf.eth0.accept_redirects=0<br>\nnet.ipv4.conf.default.accept_redirects=0<br>\n<br>\nnet.ipv4.conf.lo.secure_redirects=0<br>\nnet.ipv4.conf.all.secure_redirects=0<br>\nnet.ipv4.conf.eth0.secure_redirects=0<br>\nnet.ipv4.conf.default.secure_redirects=0<br>\n<br>\nnet.ipv4.conf.lo.send_redirects=0<br>\nnet.ipv4.conf.all.send_redirects=0<br>\nnet.ipv4.conf.eth0.send_redirects=0<br>\nnet.ipv4.conf.default.send_redirects=0<br>\n5) 优化TCP协议栈<br>\n打开TCP SYN cookie选项，有助于保护服务器免受SyncFlood攻击。<br>\nnet.ipv4.tcp_syncookies=1<br>\n<br>\n打开TIME-WAIT套接字重用功能，对于存在大量连接的Web服务器非常有效。<br>\nnet.ipv4.tcp_tw_recyle=1<br>\nnet.ipv4.tcp_tw_reuse=1<br>\n<br>\n减少处于FIN-WAIT-2连接状态的时间，使系统可以处理更多的连接。<br>\nnet.ipv4.tcp_fin_timeout=30<br>\n<br>\n减少TCP KeepAlive连接侦测的时间，使系统可以处理更多的连接。<br>\nnet.ipv4.tcp_keepalive_time=1800<br>\n<br>\n增加TCP SYN队列长度，使系统可以处理更多的并发连接。<br>\nnet.ipv4.tcp_max_syn_backlog=8192</div>\n<br>\n<p></p>\n<p><br>\n</p>\n<p><br>\n</p>\n<p></p>\n<div id=\"main-content\" class=\"item-content\">\n<div style=\"line-height:160%; font-size:14px\">\n<p>tcp_syncookies是一个开关，是否打开SYN Cookie功能，该功能可以防止部分SYN攻击。tcp_synack_retries和tcp_syn_retries定义SYN的重试次数。</p>\n<p></p>\n<p><a title=\"Permanent link to linux network optimize with sysctl\" href=\"http://my.icxo.com/p=197.html\" rel=\"bookmark\" target=\"_blank\"><span style=\"font-size:24px\">linux network optimize with sysctl</span></a></p>\n<p>Disabling the TCP options reduces the overhead of each TCP packet and\n might help to get the last few percent of performance out of the \nserver. Be aware that disabling these options most likely decreases \nperformance for high-latency and lossy links.<br>\n* net.ipv4.tcp_sack = 0<br>\n* net.ipv4.tcp_timestamps = 0<br>\n<br>\nIncreasing the TCP send and receive buffers will increase the \nperformance a lot if (and only if) you have a lot of large files to \nsend.</p>\n<p>* net.ipv4.tcp_wmem = 4096 65536 524288<br>\n* net.core.wmem_max = 1048576</p>\n<p>If you have a lot of large file uploads, increasing the receive buffers will help.</p>\n<p>* net.ipv4.tcp_rmem = 4096 87380 524288<br>\n* net.core.rmem_max = 1048576</p>\n<p># These ensure that TIME_WAIT ports either get reused or closed fast.<br>\nnet.ipv4.tcp_fin_timeout = 1<br>\nnet.ipv4.tcp_tw_recycle = 1<br>\n# TCP memory<br>\nnet.core.rmem_max = 16777216<br>\nnet.core.rmem_default = 16777216<br>\nnet.core.netdev_max_backlog = 262144<br>\nnet.core.somaxconn = 262144</p>\n<p>net.ipv4.tcp_syncookies = 1<br>\nnet.ipv4.tcp_max_orphans = 262144<br>\nnet.ipv4.tcp_max_syn_backlog = 262144<br>\nnet.ipv4.tcp_synack_retries = 2<br>\nnet.ipv4.tcp_syn_retries = 2</p>\n<p># you shouldn’t be using conntrack on a heavily loaded server anyway, but these are<br>\n# suitably high for our uses, insuring that if conntrack gets turned on, the box doesn’t die<br>\nnet.ipv4.ip_conntrack_max = 1048576<br>\nnet.nf_conntrack_max = 1048576<br>\n<code><br>\n<span style=\"font-family:新宋体\"># increase Linux TCP buffer limits<br>\necho 8388608 &gt; /proc/sys/net/core/rmem_max<br>\necho 8388608 &gt; /proc/sys/net/core/wmem_max</span></code></p>\n<p># increase Linux autotuning TCP buffer limits<br>\necho \"4096 87380 8388608\" &gt; /proc/sys/net/ipv4/tcp_rmem<br>\necho \"4096 65536 8388608\" &gt; /proc/sys/net/ipv4/tcp_wmem</p>\n<p>#echo 65536 &gt; /proc/sys/fs/file-max # physical RAM * 256/4</p>\n<p>echo \"1024 65000\" &gt; /proc/sys/net/ipv4/ip_local_port_range</p>\n<p>#echo 1 &gt; /proc/sys/net/ipv4/tcp_syncookies<br>\necho 8192 &gt; /proc/sys/net/ipv4/tcp_max_syn_backlog<br>\n# Decrease the time default value for tcp_fin_timeout connection<br>\n#echo 30 &gt; /proc/sys/net/ipv4/tcp_fin_timeout<br>\n#echo 3 &gt; /proc/sys/net/ipv4/tcp_syn_retries<br>\n#echo 2 &gt; /proc/sys/net/ipv4/tcp_retries1<br>\n# Decrease the time default value for tcp_keepalive_time connection<br>\n#echo 1800 &gt;/proc/sys/net/ipv4/tcp_keepalive_time<br>\n# Turn off tcp_window_scaling<br>\necho 0 &gt;/proc/sys/net/ipv4/tcp_window_scaling<br>\n#echo \"67108864\" &gt; /proc/sys/kernel/shmmax<br>\n# Turn off the tcp_sack<br>\necho 0 &gt;/proc/sys/net/ipv4/tcp_sack # This disables RFC2018 TCP Selective Acknowledgements<br>\n#Turn off tcp_timestamps<br>\necho 0 &gt;/proc/sys/net/ipv4/tcp_timestamps # This disables RFC1323 TCP timestamps<br>\necho 5 &gt; /proc/sys/kernel/panic # reboot 5 minutes later then kernel panic<br>\n<br>\n<span style=\"font-family:宋体,MS Song\">the third:<br>\nnet.ipv4.tcp_window_scaling = 1<br>\nnet.ipv4.tcp_syncookies = 1<br>\nnet.core.rmem_max = 16777216<br>\nnet.core.wmem_max = 16777216<br>\nnet.ipv4.tcp_rmem = 4096 87380 16777216<br>\nnet.ipv4.tcp_wmem = 4096 65536 16777216</span></p>\n<span style=\"font-family:宋体\"></span>\n<p>Lot of tuning</p>\n<p># Disables packet forwarding<br>\nnet.ipv4.ip_forward = 0<br>\n# Enables source route verification<br>\nnet.ipv4.conf.default.rp_filter = 1<br>\n# Disables the magic-sysrq key<br>\nkernel.sysrq = 0<br>\n# Decrease the time default value for tcp_fin_timeout connection<br>\nnet.ipv4.tcp_fin_timeout = 25<br>\n# Decrease the time default value for tcp_keepalive_time connection<br>\nnet.ipv4.tcp_keepalive_time = 3600<br>\n# Turn on the tcp_window_scaling<br>\nnet.ipv4.tcp_window_scaling = 1<br>\n# Turn on the tcp_sack<br>\nnet.ipv4.tcp_sack = 1<br>\n# tcp_fack should be on because of sack<br>\nnet.ipv4.tcp_fack = 1<br>\n# Turn on the tcp_timestamps<br>\nnet.ipv4.tcp_timestamps = 1<br>\n# Enable TCP SYN Cookie Protection<br>\nnet.ipv4.tcp_syncookies = 1<br>\n# Enable ignoring broadcasts request<br>\nnet.ipv4.icmp_echo_ignore_broadcasts = 1<br>\n# Disable ICMP Redirect Acceptance<br>\nnet.ipv4.conf.all.accept_redirects = 0<br>\n# Enable bad error message Protection<br>\nnet.ipv4.icmp_ignore_bogus_error_responses = 1<br>\n# Don’t Log Spoofed Packets, Source Routed Packets, Redirect Packets<br>\nnet.ipv4.conf.all.log_<span style=\"background-color:#ffd700\">mar</span>tians = 0<br>\n# Make more local ports available<br>\nnet.ipv4.ip_local_port_range = 1024 65000<br>\n# Increase maximum amount of memory allocated to shm<br>\nkernel.shmmax = 1073741824<br>\n# Improve file system performance<br>\nvm.bdflush = 100 1200 128 512 15 5000 500 1884 2<br>\n# This will increase the amount of memory available for socket input/output queues<br>\nnet.ipv4.tcp_rmem = 4096 25165824 25165824<br>\nnet.core.rmem_max = 25165824<br>\nnet.core.rmem_default = 25165824<br>\nnet.ipv4.tcp_wmem = 4096 65536 25165824<br>\nnet.core.wmem_max = 25165824<br>\nnet.core.wmem_default = 65536<br>\nnet.core.optmem_max = 25165824</p>\n<p># If you are feeling daring, you can also use these settings below, otherwise just remove them. (Should increase performance)</p>\n<p>net.core.netdev_max_backlog = 2500<br>\nnet.ipv4.tcp_tw_recycle = 1<br>\nnet.ipv4.tcp_tw_reuse = 1</p>\n<p>net.ipv4.tcp_rmem = 4096 25165824 25165824<br>\nnet.core.rmem_max = 25165824<br>\nnet.core.rmem_default = 25165824<br>\nnet.ipv4.tcp_wmem = 4096 65536 25165824<br>\nnet.core.wmem_max = 25165824<br>\nnet.core.wmem_default = 65536</p>\n<p># Disables packet forwarding<br>\nnet.ipv4.ip_forward=0</p>\n<p># Disables IP source routing<br>\nnet.ipv4.conf.all.accept_source_route = 0<br>\nnet.ipv4.conf.lo.accept_source_route = 0<br>\nnet.ipv4.conf.eth0.accept_source_route = 0<br>\nnet.ipv4.conf.default.accept_source_route = 0</p>\n<p># Enable IP spoofing protection, turn on source route verification<br>\nnet.ipv4.conf.all.rp_filter = 1<br>\nnet.ipv4.conf.lo.rp_filter = 1<br>\nnet.ipv4.conf.eth0.rp_filter = 1<br>\nnet.ipv4.conf.default.rp_filter = 1</p>\n<p># Disable ICMP Redirect Acceptance<br>\nnet.ipv4.conf.all.accept_redirects = 0<br>\nnet.ipv4.conf.lo.accept_redirects = 0<br>\nnet.ipv4.conf.eth0.accept_redirects = 0<br>\nnet.ipv4.conf.default.accept_redirects = 0</p>\n<p># Enable Log Spoofed Packets, Source Routed Packets, Redirect Packets<br>\nnet.ipv4.conf.all.log_<span style=\"background-color:#ffd700\">mar</span>tians = 0<br>\nnet.ipv4.conf.lo.log_<span style=\"background-color:#ffd700\">mar</span>tians = 0<br>\nnet.ipv4.conf.eth0.log_<span style=\"background-color:#ffd700\">mar</span>tians = 0</p>\n<p># Disables IP source routing<br>\nnet.ipv4.conf.all.accept_source_route = 0<br>\nnet.ipv4.conf.lo.accept_source_route = 0<br>\nnet.ipv4.conf.eth0.accept_source_route = 0<br>\nnet.ipv4.conf.default.accept_source_route = 0</p>\n<p># Enable IP spoofing protection, turn on source route verification<br>\nnet.ipv4.conf.all.rp_filter = 1<br>\nnet.ipv4.conf.lo.rp_filter = 1<br>\nnet.ipv4.conf.eth0.rp_filter = 1<br>\nnet.ipv4.conf.default.rp_filter = 1</p>\n<p># Disable ICMP Redirect Acceptance<br>\nnet.ipv4.conf.all.accept_redirects = 0<br>\nnet.ipv4.conf.lo.accept_redirects = 0<br>\nnet.ipv4.conf.eth0.accept_redirects = 0<br>\nnet.ipv4.conf.default.accept_redirects = 0</p>\n<p># Disables the magic-sysrq key<br>\nkernel.sysrq = 0</p>\n<p># Decrease the time default value for tcp_fin_timeout connection<br>\nnet.ipv4.tcp_fin_timeout = 15</p>\n<p># Decrease the time default value for tcp_keepalive_time connection<br>\nnet.ipv4.tcp_keepalive_time = 1800</p>\n<p># Turn off the tcp_window_scaling<br>\nnet.ipv4.tcp_window_scaling = 0</p>\n<p># Turn off the tcp_sack<br>\nnet.ipv4.tcp_sack = 0</p>\n<p># Turn off the tcp_timestamps<br>\nnet.ipv4.tcp_timestamps = 0</p>\n<p># Enable TCP SYN Cookie Protection<br>\nnet.ipv4.tcp_syncookies = 1</p>\n<p># Enable ignoring broadcasts request<br>\nnet.ipv4.icmp_echo_ignore_broadcasts = 1</p>\n<p># Enable bad error message Protection<br>\nnet.ipv4.icmp_ignore_bogus_error_responses = 1</p>\n<p># Log Spoofed Packets, Source Routed Packets, Redirect Packets<br>\nnet.ipv4.conf.all.log_<span style=\"background-color:#ffd700\">mar</span>tians = 1</p>\n<p># Increases the size of the socket queue (effectively, q0).<br>\nnet.ipv4.tcp_max_syn_backlog = 1024</p>\n<p># Increase the tcp-time-wait buckets pool size<br>\nnet.ipv4.tcp_max_tw_buckets = 1440000</p>\n<p># Allowed local port range<br>\nnet.ipv4.ip_local_port_range = 16384 65536</p>\n</div>\n&lt;!--\n<div id=\"miniAd\" style=\"padding-top:20px\"></div>\n--&gt;</div>"
    }
  ]
}
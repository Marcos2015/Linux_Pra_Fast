{
  "title": "Java与C++两大语言比较",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">C++不仅拥有计算机高效运行的实用性特征，同时还致力于提高大规模程序的编程质量与程序设计语言的问题描述能力。</p><h2 style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-image: linear-gradient(100deg, rgb(253, 93, 60), rgb(255, 255, 255)); padding: 0.5rem; font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\">C++与Java的区别</h2><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">Java要理解抽象的定义，把侧重点应该放到类组织方式，类职责的管理层级等设计问题上来</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">C++要充分理解C语言，除了上面提到的，也更应该注重内存问题的思考和判断上。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><span class=\"a-image\" style=\"box-sizing: inherit;\"></span></p><figure class=\"aspectRatioFigure\" style=\"box-sizing: inherit; margin: 0px; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><div class=\"aspectRatioPlaceholder\" style=\"box-sizing: inherit; margin: 0px auto; position: relative; width: 640px; max-width: 640px; max-height: 375px;\"><div class=\"aspectRatioPlaceholder-fill\" style=\"box-sizing: inherit; padding-bottom: 375px;\"></div><div class=\"progressiveMedia\" style=\"box-sizing: inherit; height: 375px; left: 0px; position: absolute; top: 0px; width: 640px;\"><img class=\"aligncenter lazy\" title=\"图0：Java与C++两大语言比较\" alt=\"图0：Java与C++两大语言比较\" data-width=\"640\" data-height=\"375\" data-original=\"http://codebay.cn/wp-content/uploads/2017/08/image.php_-13.gif\" src=\"quiver-image-url/AEF6C8B5524422AD25CC4231DFCEB187.jpg\" style=\"box-sizing: inherit; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; clear: both; display: block; margin: 0px auto 12px;\" width=\"640\" height=\"375\"></div></div></figure><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"></p><h2 style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-image: linear-gradient(100deg, rgb(253, 93, 60), rgb(255, 255, 255)); padding: 0.5rem; font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\">1、面向对象</h2><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">对于C++而言，谈面向对象的时候，是面向对象设计</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">对于Java而言，谈面向对象的时候，是面向对象思想</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">不要小看这两者之间的区别，C++说到底还是C语言的衍生版，通看《C++编程思想》其实，对于类设计，继承，重载这些并没有看作面向对象特性来判断，只是提供了一种代码服用的表现形式以及“晚捆绑”在C++编译器中相对于C语言编译器的区别和有事。但是在《Java编程思想》当中，则是把类，继承，重载，多态等作为很重要的面向对象思想来看待的。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">举一个例子，static修饰符</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">在C++当中，存在类内静态成员变量的问题和Java其实是一致的，但是C++仍抱有C语言特性，static生命仍具有全局概念。Java当中已经不存在所谓的全局概念了，更准确的说是通过类边界，将全局概念隐藏了。作用虽然一致，但是Java在于static提供类共享的时候，可能并没有C++来做的判断合适</p><h2 style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-image: linear-gradient(100deg, rgb(253, 93, 60), rgb(255, 255, 255)); padding: 0.5rem; font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\">2、代码</h2><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">这个也很多人忽略，语言只是工具，只要按照算法做就是了，但是工具可是各有各的特点，往往也被忽略掉了。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">举一个例子：空指针判断，数组越界，异常，断言</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">可能上面说的，在于C++而言要完全控制的，如果不控制就会出大问题，直接对应到内存的异常。可是Java而言，由于是纯面向对象语言，加上完整的基于虚拟机的异常控制，使得数组越界而言可能并不是什么大问题，throws一个Exception和内存异常比较起来反而小的多。可见Java对于内存的隐藏优势</p><h2 style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-image: linear-gradient(100deg, rgb(253, 93, 60), rgb(255, 255, 255)); padding: 0.5rem; font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\">3、组织</h2><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">看C++代码，给我一个很深刻的印象就是，我能很准确的看懂他的组织形式和功能。然而Java我需要充分理解类之间的层次结构和边界问题，往往搭建库的时候映射到上层，很难通透的看出整个的形式和功能，只能基于类的调用来梳理。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">由此也可以看出C++还是遗传了C语言的特性，是一个基于文档目录结构来做代码组织的。虽然有了面向对象特性，但是就面向对象只是给C++一种代码服用以及设计时逻辑区分。然而对于Java而言，面向对象可是贯彻始终的。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">举一个例子：C++头文件的引入</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">很多人不太习惯为什么我写一个类，还要引入头文件，和Java类似写到一个文件里面不行吗？！其实C++，这是严格遵守了先声明后使用的逻辑。所以对于头文件引入的混乱的管理可以通过这个出发点，达成一定的一致的。</p><h2 style=\"box-sizing: inherit; color: rgb(0, 0, 0); background-image: linear-gradient(100deg, rgb(253, 93, 60), rgb(255, 255, 255)); padding: 0.5rem; font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-variant-ligatures: normal; orphans: 2; widows: 2; background-position: initial initial; background-repeat: initial initial;\">4、库函数区别</h2><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">初看之下，觉得C++的库函数能做的，Java也都做了。但是其实还是有一些细微的区分的。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">举一个例子：sort函数</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">C++当中对于vector的排序，是通过sort(vec.begin,vec.end,_compare)来进行的</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">Java当中呢，则是要复写需要比较类的Compare方法的。</p><p style=\"box-sizing: inherit; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 微软雅黑, Lucida, Verdana, 'Hiragino Sans GB', STHeiti, 'WenQuanYi Micro Hei', SimSun, sans-serif, serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">这样你还会觉得C++是个面向对象的语言嘛？明明是一个类和另一个类比较，这个比较是一个类行为，为什么还要在sort中放一个比较，这种跳出呢？</p>"
    }
  ]
}
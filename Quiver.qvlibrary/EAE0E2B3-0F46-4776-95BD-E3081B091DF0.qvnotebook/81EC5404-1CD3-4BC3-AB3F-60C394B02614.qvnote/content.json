{
  "title": "C++实现半同步半异步I/O的设计模式(half sync/half async)",
  "cells": [
    {
      "type": "text",
      "data": "<div id=\"article_content\" class=\"article_content csdn-tracking-statistics tracking-click\" data-mod=\"popu_519\" data-dsm=\"post\" style=\"overflow: hidden;\">\n                        \n<div style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;text-align:center;\">\n<strong>半同步半异步I/O的设计模式(half sync/half async)</strong></div>\n<br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><h2 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t0\"></a>\n<a name=\"t0\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a><strong>1.动机：</strong></h2>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">众所周知，同步模式编程简单，但是I/O的利用利率低；而异步模式编程复杂，但是I/O利用率高。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">综合同步异步的有优点，就有了半同步半异步的设计模式。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">这个模式中，高层使用同步I/O模型，简化编程。低层使用异步I/O模型，高效执行。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><p style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">\nhalf sync/half async可以很好的使得\"变成复杂度\"和\"执行效率\"之间达到一种平衡.</p>\n<p style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">\n<br></p>\n<h2 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t1\"></a>\n<a name=\"t1\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a><strong>2.应用场景：</strong></h2>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">半同步半异步模式在下面的场景中使用:</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><h3 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t2\"></a>\n<a name=\"t2\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>2.1 一个系统中的进程有下面的特征:</h3>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">系统必须响应和处理外部异步发生的事件，</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">如果为每一个外部资源的事件分派一个独立的线程同步处理I/O，效率很低。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">如果上层的任务以同步方式处理I/O，实现起来简单。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><h3 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t3\"></a>\n<a name=\"t3\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>2.2 一个或多个任务必须在单独的控制线程中执行，其它任务可以在多线程中执行:</h3>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">上层的任务（如：数据库查询，文件传输）使用同步I/O模型，简化了编写并行程序的难度。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">而底层的任务（如网络控制器的中断处理）使用异步I/O模型，提供了执行效率。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><p style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">\n一般情况下，上层的任务要比下层的任务多，使用一个简单的层次实现异步处理的复杂性，可以对外隐藏异步处理的细节。另外，同步层次和异步层次任务间的通信使用一个队列来协调。</p>\n<p style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">\n<br></p>\n<h2 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t4\"></a>\n<a name=\"t4\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>3.实现方案：</h2>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">可以分为三层：同步任务层，队列层，异步任务层。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><h3 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t5\"></a>\n<a name=\"t5\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>3.1 同步任务层（用户级的进程）:</h3>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">本层的任务完成上层的I/O操作，使用同步I/O模型，通过队列层的队列中传输数据。和异步层不同，同步层的任务使用活动对象执行，这些活动对象有自己运行栈和寄存器状态。当执行同步I/O的时候，他们会被阻塞/睡眠。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><h3 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t6\"></a>\n<a name=\"t6\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>3.2 队列层:</h3>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">这个层在同步任务层和异步任务层之间，提供了同步控制和缓存的功能。异步任务的I/O 事件被缓存到消息队列中，同步任务层在队列中提取这些事件（相反方向亦然）</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><h3 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t7\"></a>\n<a name=\"t7\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>3.3 异步任务层:</h3>\n<p style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">\n处理低层的事件，这些事件由多个外部的事件源产生（例如网卡，终端）。和异步任务不同，此层的实体是被动对象，没有自己的运行栈，要求不能被阻塞。</p>\n<p style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">\n<br></p>\n<h2 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t8\"></a>\n<a name=\"t8\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>4.优缺点：</h2>\n<h3 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t9\"></a>\n<a name=\"t9\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>4.1 半同步半异步模式有下面的优点:</h3>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">上层的任务被简化</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">不同层可以使用不同的同步策略</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">层间的通信被限制在单独的一点，因为所有的交互使用队列层协调。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">在多处理器环境中提高了性能。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><h3 style=\"margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px;\"><a name=\"t10\"></a>\n<a name=\"t10\" style=\"color:rgb(51,102,153);\" target=\"_blank\"></a>4.2 半同步半异步模式有下面的缺点:</h3>\n<span style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">跨边界导致的性能消耗，这是因为同步控制，数据拷贝和上下文切换会过度地消耗资源。</span><br style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\"><p style=\"color:rgb(51,51,51);font-family:Arial;font-size:14px;line-height:26px;\">\n上层任务缺少异步I/O的实现。</p>\n<div>编程实例：</div>\n<div><div class=\"dp-highlighter bg_cpp\"><div class=\"bar\"><div class=\"tools\"><b>[cpp]</b> <a href=\"http://blog.csdn.net/chinabhlt/article/details/50316805#\" class=\"ViewSource\" title=\"view plain\">view plain</a><span class=\"tracking-ad\" data-mod=\"popu_168\"> <a href=\"http://blog.csdn.net/chinabhlt/article/details/50316805#\" class=\"CopyToClipboard\" title=\"copy\">copy</a><div style=\"position: absolute; left: 241px; top: 1502px; width: 16px; height: 16px; z-index: 99;\"><embed id=\"ZeroClipboardMovie_1\" src=\"http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" name=\"ZeroClipboardMovie_1\" allowscriptaccess=\"always\" allowfullscreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"id=1&amp;width=16&amp;height=16\" wmode=\"transparent\" width=\"16\" height=\"16\" align=\"middle\"></div></span><span class=\"tracking-ad\" data-mod=\"popu_169\"> </span></div></div><ol start=\"1\" class=\"dp-cpp\"><li class=\"alt\"><span class=\"preprocessor\">#include&nbsp;&lt;iostream&gt;</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"preprocessor\">#include&nbsp;&lt;vector&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"preprocessor\">#include&nbsp;&lt;sys/time.h&gt;</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"preprocessor\">#include&nbsp;&lt;string.h&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"comment\">//&nbsp;for&nbsp;file&nbsp;operation.&nbsp;&nbsp;</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"preprocessor\">#include&nbsp;&lt;sys/types.h&gt;&nbsp;&nbsp;</span>&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"preprocessor\">#include&nbsp;&lt;sys/stat.h&gt;&nbsp;&nbsp;</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"preprocessor\">#include&nbsp;&lt;fcntl.h&gt;&nbsp;&nbsp;</span>&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"preprocessor\">#include&nbsp;&lt;unistd.h&gt;</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"preprocessor\">#include&nbsp;&lt;stdio.h&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"preprocessor\">#include&nbsp;&lt;stdlib.h&gt;</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"preprocessor\">#include&nbsp;&lt;errno.h&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"keyword\">using</span>&nbsp;<span class=\"keyword\">namespace</span>&nbsp;std;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"comment\">//队列层</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">class</span>&nbsp;TaskQueue&nbsp;&nbsp;</li><li class=\"alt\">{&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">public</span>:&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">struct</span>&nbsp;TaskItem&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">char</span>*&nbsp;buffer;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;startoffset;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;size;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TaskItem&amp;&nbsp;operator=(<span class=\"keyword\">const</span>&nbsp;TaskItem&amp;&nbsp;item)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>&nbsp;==&nbsp;&amp;item)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;*<span class=\"keyword\">this</span>;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer&nbsp;=&nbsp;item.buffer;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;item.size;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startoffset&nbsp;=&nbsp;item.startoffset;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;*<span class=\"keyword\">this</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;TaskQueue():refstart(0),refend(0)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_init(&amp;mutex,&nbsp;NULL);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_init(&amp;cond,&nbsp;NULL);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">virtual</span>&nbsp;~TaskQueue()&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_lock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_signal(&amp;cond);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_destroy(&amp;mutex);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_destroy(&amp;cond);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(getSize()&gt;0)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;TaskItem*&gt;::iterator&nbsp;iter&nbsp;=&nbsp;m_items.begin();&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(;iter&nbsp;!=&nbsp;m_items.end();&nbsp;++iter)&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>((*iter)-&gt;buffer&nbsp;!=&nbsp;NULL)&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">delete</span>&nbsp;(*iter)-&gt;buffer;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">delete</span>&nbsp;(*iter);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">void</span>&nbsp;push(TaskItem&nbsp;*item)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_lock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_items.push_back(item);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++refend;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(refend&nbsp;&gt;&nbsp;refstart)&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_signal(&amp;cond);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;TaskItem*&nbsp;pop()&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_lock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(m_items.empty()&nbsp;||&nbsp;refstart&nbsp;&gt;&nbsp;refend)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_wait(&amp;cond,&nbsp;&amp;mutex);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TaskItem*&nbsp;item&nbsp;=&nbsp;m_items[refstart++];&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;item;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;getSize()&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_lock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;size&nbsp;=&nbsp;m_items.size();&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;mutex);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;size;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">void</span>&nbsp;print()&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(!m_items.empty())&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;TaskItem*&gt;::iterator&nbsp;iter&nbsp;=&nbsp;m_items.begin();&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(;iter&nbsp;!=&nbsp;m_items.end();&nbsp;++iter)&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;(*iter)-&gt;buffer&lt;&lt;&nbsp;endl;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">private</span>:&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;TaskItem*&gt;&nbsp;m_items;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_t&nbsp;cond;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_t&nbsp;mutex;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;refstart;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;refend;&nbsp;&nbsp;</li><li class=\"\">};&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"comment\">//异步任务层</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">class</span>&nbsp;AioProcessor&nbsp;&nbsp;</li><li class=\"alt\">{&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">public</span>:&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;AioProcessor(<span class=\"datatypes\">int</span>&nbsp;fd,&nbsp;TaskQueue*&nbsp;queue):m_fd(fd),&nbsp;m_queue(queue)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isRun&nbsp;=&nbsp;<span class=\"keyword\">false</span>;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.tv_sec&nbsp;=&nbsp;0;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.tv_nsec&nbsp;=&nbsp;1000*1000*1000;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;~AioProcessor()&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isRun&nbsp;=&nbsp;<span class=\"keyword\">false</span>;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;pthread_t&gt;::iterator&nbsp;iter&nbsp;=&nbsp;m_tids.begin();&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(;iter&nbsp;!=m_tids.end();&nbsp;++iter)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_join(*iter,&nbsp;NULL);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">void</span>&nbsp;startUP(<span class=\"datatypes\">int</span>&nbsp;count)&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isRun&nbsp;=&nbsp;<span class=\"keyword\">true</span>;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(<span class=\"datatypes\">int</span>&nbsp;i=0;i&lt;count;&nbsp;++i)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_t&nbsp;tid;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_create(&amp;tid,&nbsp;NULL,&nbsp;<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>*(*)(<span class=\"keyword\">void</span>*)&gt;(process),&nbsp;<span class=\"keyword\">this</span>);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_tids.push_back(tid);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>*&nbsp;process(<span class=\"keyword\">void</span>*&nbsp;arg)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AioProcessor&nbsp;*proc&nbsp;=&nbsp;(AioProcessor*)arg;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TaskQueue::TaskItem&nbsp;*item;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">while</span>(proc-&gt;isRun)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>((item&nbsp;=&nbsp;proc-&gt;m_queue-&gt;pop())&nbsp;!=&nbsp;NULL)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(pread(proc-&gt;m_fd,&nbsp;item-&gt;buffer,&nbsp;item-&gt;size,&nbsp;item-&gt;startoffset)&nbsp;&lt;&nbsp;0)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;<span class=\"string\">\"read&nbsp;err\\n\"</span>;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">break</span>;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">while</span>(nanosleep(&amp;(proc-&gt;req),&nbsp;&amp;(proc-&gt;rem))!=0)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(errno&nbsp;==&nbsp;EINTR)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proc-&gt;req&nbsp;=&nbsp;proc-&gt;rem;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">else</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">break</span>;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">private</span>:&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;TaskQueue&nbsp;*m_queue;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;pthread_t&gt;&nbsp;m_tids;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;m_fd;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">struct</span>&nbsp;timespec&nbsp;req,&nbsp;rem;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">bool</span>&nbsp;isRun;&nbsp;&nbsp;</li><li class=\"\">};&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"comment\">//应用层</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">class</span>&nbsp;AppExcutor&nbsp;&nbsp;</li><li class=\"alt\">{&nbsp;&nbsp;</li><li class=\"\"><span class=\"keyword\">public</span>:&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;AppExcutor(<span class=\"datatypes\">int</span>&nbsp;fd):m_fd(fd),&nbsp;queue()&nbsp;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proc&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;AioProcessor(fd,&nbsp;&amp;queue);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proc-&gt;startUP(3);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">virtual</span>&nbsp;~AppExcutor()&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(proc)&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">delete</span>&nbsp;proc;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proc&nbsp;=&nbsp;NULL;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">void</span>&nbsp;reader(<span class=\"keyword\">const</span>&nbsp;<span class=\"datatypes\">int</span>&nbsp;startoffset,&nbsp;<span class=\"datatypes\">int</span>&nbsp;size,&nbsp;<span class=\"datatypes\">char</span>*&nbsp;buf)&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;TaskQueue::TaskItem();&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;buffer&nbsp;=&nbsp;buf;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;size&nbsp;=&nbsp;size;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;startoffset&nbsp;=&nbsp;startoffset;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.push(item);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">void</span>&nbsp;print()&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.print();&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"keyword\">private</span>:&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;TaskQueue&nbsp;queue;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;AioProcessor&nbsp;*proc;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;m_fd;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;TaskQueue::TaskItem&nbsp;*item;&nbsp;&nbsp;</li><li class=\"\">};&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;</li><li class=\"\"><span class=\"datatypes\">int</span>&nbsp;main(<span class=\"datatypes\">int</span>&nbsp;argc,&nbsp;<span class=\"datatypes\">char</span>&nbsp;*argv[])&nbsp;&nbsp;</li><li class=\"alt\">{&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;fd&nbsp;=&nbsp;open(<span class=\"string\">\"./testfile\"</span>,&nbsp;O_RDONLY);&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(fd&nbsp;&lt;&nbsp;0)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;-1;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;AppExcutor&nbsp;excutor(fd);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">int</span>&nbsp;size&nbsp;=&nbsp;50;&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(<span class=\"datatypes\">int</span>&nbsp;i=0;i&lt;10;&nbsp;++i)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"datatypes\">char</span>&nbsp;*buf&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;<span class=\"datatypes\">char</span>[size+1];&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(buf,&nbsp;0,&nbsp;<span class=\"keyword\">sizeof</span>(buf));&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;excutor.reader(i*size,&nbsp;size,&nbsp;buf);&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;excutor.print();&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;0;&nbsp;&nbsp;</li><li class=\"alt\">}&nbsp;&nbsp;</li></ol></div></div>\n<div><br>\n参考文章：http://www.linuxidc.com/Linux/2015-01/112507p7.htm</div></div>"
    }
  ]
}
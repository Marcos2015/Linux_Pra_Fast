{
  "title": "走进epoll的有向图世界",
  "cells": [
    {
      "type": "text",
      "data": "<div class=\"header\" style=\"font-size: 14px; margin: 0px 0px 20px; padding: 0px; max-width: 100%; overflow: hidden; color: rgb(51, 51, 51); font-family: Arial, 'Microsoft YaHei'; line-height: 26px; height: auto !important;\"><h1 class=\"title\" style=\"margin: 0px 0px 2px; padding: 0px; font-size: 26px; font-weight: normal; max-width: 100%; text-align: center; height: auto !important;\"><span style=\"color: rgb(255, 0, 0); font-family: sans-serif; font-size: 16px;\">作者：新浪微博（</span><span style=\"color: rgb(255, 0, 0); font-family: sans-serif; font-size: 16px; max-width: 100%; word-wrap: break-word !important;\"><a render=\"ext\" extra-data=\"type=atname\" href=\"http://weibo.com/n/NP%E7%AD%89%E4%B8%8D%E7%AD%89%E4%BA%8EP\" usercard=\"name=NP等不等于P\" style=\"color: rgb(235, 115, 80); text-decoration: none; word-wrap: break-word !important;\">@NP等不等于P</a></span><span style=\"color: rgb(255, 0, 0); font-family: sans-serif; font-size: 16px;\">）</span><br></h1></div><div class=\"WBA_content\" style=\"font-size: 14px; margin: 0px; padding: 0px; max-width: 100%; overflow: auto; color: rgb(51, 51, 51); font-family: Arial, 'Microsoft YaHei'; line-height: 26px; height: auto !important;\"><div style=\"margin: 0px; padding: 0px; max-width: 100%; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; color: rgb(255, 0, 0); font-family: sans-serif; font-size: 16px; word-wrap: break-word !important;\">计算机学习微信公众号（jsj_xx）</span></div><div style=\"margin: 0px; padding: 0px; max-width: 100%; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; color: rgb(0, 0, 0); font-family: sans-serif; word-wrap: break-word !important;\">在我们的《理解网络IO模型》一文里，我们仅仅对epoll进行了简单分析，所以本文将深入探讨epoll，</span><span style=\"max-width: 100%; font-size: 18px; color: rgb(0, 0, 0); font-family: sans-serif; background-color: rgb(255, 192, 0); word-wrap: break-word !important;\">真正走进epoll的世界：一个有向图的世界！</span></div><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">在《理解网络IO模型》一文里我们提到过，epoll中fd（具体设备的文件描述符）和epfd（指一个具体的epoll实例，一个虚拟的fd）合起来组织成一个层次结构，类似于文件系统的层层挂载。这种层次结构，其实就是一个有向图。想想，一个epfd可以关注很多fd，包括其它的epfd，而其它的epfd又可以继续照此方式关注下去，这就一层一层地递归下去了，这就构成了一个多叉树，再加上关注和被关注的单向关系，就形成了一个有向图（树），其中，具体的fd是叶子，epfd是中间节点（和根节点）。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">既然是有向图，那问题就来了。很容易想到的一些问题就是诸如：层次最深多深？自己关注自己怎么办？等等问题。。。那我们结合linux kernel 4.0代码，<span style=\"max-width: 100%; background-color: rgb(255, 192, 0); word-wrap: break-word !important;\">给出这个有向图所涉及的一些限制以及防范措施：</span></span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">1）深度检测</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">深度支持5层，假设根为第0层，然后是第1层到第5层。在后面的死循环检测中和反向路径检测中，都会嵌入此深度检测。深度限制是对epoll有向图的最基本的限制，毕竟过深的层次会事件上报速度有影响。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">【参见ep_call_nested()，有向图的核心处理函数，在处理中如果涉及到层次递归就用此函数，因为它可以检测层次限制和fd形式的死循环】</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">2）死循环检测</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">由于1）中仅做了fd形式的死循环检测，所以另有一个对epfd形式的死循环检测。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">【参见ep_loop_check()】<br style=\"word-wrap: break-word !important;\"></span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">3）反向路径检测</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">所谓反向，就是从底部的叶子，层层向上到顶部的树根的意思。这里只针对叶子节点，即fd，因为一个事件的源头肯定来自fd，epfd只是中间节点。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">考虑这种场景：epfd1-&gt;fd1+epfd2-&gt;epfd3-&gt;fd1，也就是多个有向图产生了交点。此时，fd1在各个不同的有向图里所属层次是不同的，比如在这个例子的场景里，fd1是第一层节点也是第二层节点，那反向路径的限制就是对此叶子节点在各层的有向图个数的限制。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">【参见path_limits[PATH_ARR_SIZE]】</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; background-color: rgb(255, 192, 0); font-size: 18px; word-wrap: break-word !important;\">既然是层次结构，那我们看下打通上下的桥梁。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">epoll有向图得以实现的根基就是epfd跟fd一样，提供了自己的poll()，这样就能打通epfd和fd的沟通：</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">【参见epfd.poll()-&gt;ep_eventpoll_poll()-&gt;...-&gt;ep_item_poll()-&gt;fd.poll()】</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">这样，在poll_wait时就可以仅仅根据自己的ready list就可以构建一个返回给用户的事件结果集，因为处理ready list时会通过item，也就是epfd的poll()来层层打通。<br style=\"word-wrap: break-word !important;\"></span></p><p style=\"margin: 5px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; background-color: rgb(255, 192, 0); word-wrap: break-word !important;\">我们看下epoll和poll/select的最大区别，或者说提升效率的地方：<br style=\"word-wrap: break-word !important;\"></span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">1）对于poll/select，需要想所有关注的fd派驻哨兵（诸如entry的结构）看守，每次调用都需要全部重新派驻。而对于epoll，这种派驻是固定的，之后仅仅查看或改变ready list即可。换句话讲，对于打地基这种非常繁重的工作，每次的poll/select调用都需要做，而epoll则做过一次就行了。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">【参见epoll_ctl()-&gt;ep_insert()-&gt;ep_item_poll()-&gt;poll_wait()】</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">2）唤醒后，对于poll/select而言，根据所有fd的状态构建出返回给用户的结果集；而对于epoll，则仅仅需要处理ready list，也就是仅是有变化的fd，缩小了范围，同时层层地将这种有的放矢的特性完美地延伸下去。</span></p><p style=\"margin: 10px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\">【参见ep_send_events()-&gt;ep_scan_ready_list()-&gt;ep_item_poll()】</span></p><p style=\"margin: 5px 0px; padding: 0px; max-width: 100%; clear: both; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; height: auto !important; word-wrap: break-word !important;\"><span style=\"max-width: 100%; font-size: 18px; word-wrap: break-word !important;\"><span style=\"max-width: 100%; background-color: rgb(255, 192, 0); word-wrap: break-word !important;\">那到底是什么成就了epoll？是epoll的虚拟</span><span style=\"max-width: 100%; word-wrap: break-word !important;\"><span style=\"max-width: 100%; background-color: rgb(255, 192, 0); word-wrap: break-word !important;\">fs机制！</span>再想想，poll/select监测的fd可能也是一个epoll fd，可见这个epoll有向图还能扩展到select/poll。。。</span></span></p></div>"
    }
  ]
}
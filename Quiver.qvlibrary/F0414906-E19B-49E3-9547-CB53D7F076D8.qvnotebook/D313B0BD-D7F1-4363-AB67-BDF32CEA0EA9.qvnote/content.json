{
  "title": "编程思想之多线程与多进程(1)：以操作系统的角度述说线程与进程",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><div class=\"grid-8\" style=\"border: 0px; margin: 0px 10px; padding: 0px; font-size: 13px; float: left; width: 620px; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 宋体, 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><div class=\"post-93386 post type-post status-publish format-standard hentry category-programmer tag-2514 tag-1889 odd\" id=\"post-93386\" style=\"border: 0px; margin: 0px; padding: 0px 0px 20px;\"><div class=\"entry\" style=\"border: 0px; margin: 0px; padding: 0px 5px; font-size: 15px; color: rgb(46, 46, 46); line-height: 1.6; word-break: break-all;\"><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">什么是线程</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">什么是线程？线程与进程与有什么关系？这是一个非常抽象的问题，也是一个特别广的话题，涉及到非常多的知识。我不能确保能把它讲的话，也不能确保讲的内容全部都正确。即使这样，我也希望尽可能地把他讲通俗一点，讲的明白一点，因为这是个一直困扰我很久的，扑朔迷离的知识领域，希望通过我的理解揭开它一层一层神秘的面纱。<br>&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">任务调度</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">线程是什么？要理解这个概念，须要先了解一下操作系统的一些相关概念。大部分操作系统(如Windows、Linux)的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发(别觉得并发有多高深，它的实现很复杂，但它的概念很简单，就是一句话：多个任务同时执行)。多任务运行过程的示意图如下：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/189A53E847E75B1F01037BE0A43AFF5E.jpg\" width=\"690\" height=\"353\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 1：操作系统中的任务调度</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">进程</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">我们都知道计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序侧是具有某种功能的程序，程序是运行于操作系统之上的。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。进程一般由程序、数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">进程具有的特征：</p><ul style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;\"><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">并发性：任何进程都可以同其他进程一起并发执行；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">独立性：进程是系统进行资源分配和调度的一个独立单位；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">结构性：进程由程序、数据和进程控制块三部分组成。</li></ul><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">线程</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">后来，随着计算机的发展，对CPU的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。<br>&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">进程与线程的区别</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">前面讲了进程与线程，但可能你还觉得迷糊，感觉他们很类似。的确，进程与线程有着千丝万缕的关系，下面就让我们一起来理一理：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">1.线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；<br>2.一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；<br>3.进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某进程内的线程在其它进程不可见；<br>4.调度和切换：线程上下文切换比进程上下文切换要快得多。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">线程与进程关系的示意图：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/0A37693F8F47C473B698F8BB9D5F6E9C.jpg\" width=\"690\" height=\"483\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 2：进程与线程的资源共享关系</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/A0B289EC520702A1AB3764A94136E4F2.jpg\" width=\"690\" height=\"431\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 3：单线程与多线程的关系</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">总之，线程和进程都是一种抽象的概念，线程是一种比进程更小的抽象，线程和进程都可用于实现并发。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。它相当于一个进程里只有一个线程，进程本身就是线程。所以线程有时被称为轻量级进程(Lightweight Process，LWP）。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/26128167DE707C7047BB8D74604C6ED5.jpg\" width=\"608\" height=\"94\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 4：早期的操作系统只有进程，没有线程</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">后来，随着计算机的发展，对多个任务之间上下文切换的效率要求越来越高，就抽象出一个更小的概念——线程，一般一个进程会有多个(也可是一个)线程。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"aligncenter\" alt=\"\" src=\"quiver-image-url/83DB2F83E13D085576FB7042B5D7199D.jpg\" width=\"608\" height=\"324\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; text-align: center; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 5：线程的出现，使得一个进程可以有多个线程</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">多线程与多核</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">上面提到的时间片轮转的调度方式说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。很多操作系统的书都说“同一时间点只有一个任务在执行”。那有人可能就要问双核处理器呢？难道两个核不是同时运行吗？</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">其实“同一时间点只有一个任务在执行”这句话是不准确的，至少它是不全面的。那多核处理器的情况下，线程是怎样执行呢？这就需要了解内核线程。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">多核(心)处理器是指在一个处理器上集成多个运算核心从而提高计算能力，也就是有多个真正并行计算的处理核心，每一个处理核心对应一个内核线程。内核线程（Kernel Thread， KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操作调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。一般一个处理核心对应一个内核线程，比如单核处理器对应一个内核线程，双核处理器对应两个内核线程，四核处理器对应四个内核线程。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">现在的电脑一般是双核四线程、四核八线程，是采用超线程技术将一个物理处理核心模拟成两个逻辑处理核心，对应两个内核线程，所以在操作系统中看到的CPU数量是实际物理CPU数量的两倍，如你的电脑是双核四线程，打开“任务管理器\\性能”可以看到4个CPU的监视器，四核八线程可以看到8个CPU的监视器。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/0BCB0FCF6C54C41CFB635E0B8B798E9C.jpg\" width=\"661\" height=\"601\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 6：双核四线程在Windows8下查看的结果</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">超线程技术就是利用特殊的硬件指令，把一个物理芯片模拟成两个逻辑处理核心，让单个处理器都能使用线程级并行计算，进而兼容多线程操作系统和软件，减少了CPU的闲置时间，提高的CPU的运行效率。这种超线程技术(如双核四线程)由处理器硬件的决定，同时也需要操作系统的支持才能在计算机中表现出来。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程(我们在这称它为用户线程)，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。用户线程与内核线程的对应关系有三种模型：一对一模型、多对一模型、多对多模型，在这以4个内核线程、3个用户线程为例对三种模型进行说明。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">一对一模型</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">对于一对一模型来说，一个用户线程就唯一地对应一个内核线程(反过来不一定成立，一个内核线程不一定有对应的用户线程)。这样，如果CPU没有采用超线程技术(如四核四线程的计算机)，一个用户线程就唯一地映射到一个物理CPU的线程，线程之间的并发是真正的并发。一对一模型使用户线程具有与内核线程一样的优点，一个线程因某种原因阻塞时其他线程的执行不受影响；此处，一对一模型也可以让多线程程序在多处理器的系统上有更好的表现。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">但一对一模型也有两个缺点：1.许多操作系统限制了内核线程的数量，因此一对一模型会使用户线程的数量受到限制；2.许多操作系统内核线程调度时，上下文切换的开销较大，导致用户线程的执行效率下降。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/E7C29614DB7BDF47C495E2A1948C0A6A.jpg\" width=\"657\" height=\"333\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 7：一对一模型</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">多对一模型</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">多对一模型将多个用户线程映射到一个内核线程上，线程之间的切换由用户态的代码来进行，因此相对一对一模型，多对一模型的线程切换速度要快许多；此外，多对一模型对用户线程的数量几乎无限制。但多对一模型也有两个缺点：1.如果其中一个用户线程阻塞，那么其它所有线程都将无法执行，因为此时内核线程也随之阻塞了；2.在多处理器系统上，处理器数量的增加对多对一模型的线程性能不会有明显的增加，因为所有的用户线程都映射到一个处理器上了。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/3CDA1538E9F0A22C784DA8A538C37D68.jpg\" width=\"657\" height=\"333\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 8：多对一模型</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">多对多模型</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">多对多模型结合了一对一模型和多对一模型的优点，将多个用户线程映射到多个内核线程上。多对多模型的优点有：1.一个用户线程的阻塞不会导致所有线程的阻塞，因为此时还有别的内核线程被调度来执行；2.多对多模型对用户线程的数量没有限制；3.在多处理器的操作系统中，多对多模型的线程也能得到一定的性能提升，但提升的幅度不如一对一模型的高。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">在现在流行的操作系统中，大都采用多对多的模型。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/51051E4F2C614B8EACC455AED958CCB5.jpg\" width=\"657\" height=\"469\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 9：多对多模型</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">查看进程与线程</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">一个应用程序可能是多线程的，也可能是多进程的，如何查看呢？在Windows下我们只须打开任务管理器就能查看一个应用程序的进程和线程数。按“Ctrl+Alt+Del”或右键快捷工具栏打开任务管理器。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">查看进程数和线程数：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/C7FC2D26BA4D50F050714C328738FF52.jpg\" width=\"690\" height=\"589\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 10：查看线程数和进程数</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">在“进程”选项卡下，我们可以看到一个应用程序包含的线程数。如果一个应用程序有多个进程，我们能看到每一个进程，如在上图中，Google的chrome浏览器就有多个进程。同时，如果打开了一个应用程序的多个实例也会有多个进程，如上图中我打开了两个cmd窗口，就有两个cmd进程。如果看不到线程数这一列，可以在点击“查看\\选择列”菜单，增加监听的列。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">查看CPU和内存的使用率：</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">在性能选项卡中，我们可以查看CPU和内存的使用率，根据CPU使用记录的监视器的个数还能看出逻辑处理核心的个数，如我的双核四线程的计算机就有四个监视器。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/5D2762F79C2F5B3996CA8B6904EA1129.jpg\" width=\"690\" height=\"589\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">图 11：查看CPU和内存的使用率</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">线程的生命周期</strong></h3><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">当线程的数量小于处理器的数量时，线程的并发是真正的并发，不同的线程运行在不同的处理器上。但当线程的数量大于处理器的数量时，线程的并发会受到一些阻碍，此时并不是真正的并发，因为此时至少有一个处理器会运行多个线程。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">在单个处理器运行多个线程时，并发是一种模拟出来的状态。操作系统采用时间片轮转的方式轮流执行每一个线程。现在，几乎所有的现代操作系统采用的都是时间片轮转的抢占式调度方式，如我们熟悉的Unix、Linux、Windows及Mac OS X等流行的操作系统。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">我们知道线程是程序执行的最小单位，也是任务执行的最小单位。在早期只有进程的操作系统中，进程有五种状态，创建、就绪、运行、阻塞(等待)、退出。早期的进程相当于现在的只有单个线程的进程，那么现在的多线程也有五种状态，现在的多线程的生命周期与早期进程的生命周期类似。</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/9CB1408583B5EF1706CF2E0B112399E7.jpg\" width=\"690\" height=\"216\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 12：早期进程的生命周期</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">进程在运行过程有三种状态：就绪、运行、阻塞，创建和退出状态描述的是进程的创建过程和退出过程。</p><ul style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;\"><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">创建：进程正在创建，还不能运行。操作系统在创建进程时要进行的工作包括分配和建立进程控制块表项、建立资源表格并分配资源、加载程序并建立地址空间；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">运行：此线程正在执行，正在占用时间片；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">退出：进程已结束，所以也称结束状态，释放操作系统分配的资源。</li></ul><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\"><img class=\"alignnone\" alt=\"\" src=\"quiver-image-url/0E57FD4941699FDEE0247D5374F06582.jpg\" width=\"690\" height=\"216\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;\"></p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; text-align: center;\">图 13：线程的生命周期</p><p style=\"border: 0px; margin: 0px 0px 20px; padding: 0px;\">&nbsp;</p><ul style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;\"><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">创建：一个新的线程被创建，等待该线程被调用执行；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">运行：此线程正在执行，正在占用时间片；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完；</li><li style=\"border: 0px; margin: 0px 0px 5px 30px; padding: 0px;\">退出：一个线程完成任务或者其他终止条件发生，该线程终止进入退出状态，退出状态释放该线程所分配的资源。</li></ul></div></div></div></div>"
    }
  ]
}
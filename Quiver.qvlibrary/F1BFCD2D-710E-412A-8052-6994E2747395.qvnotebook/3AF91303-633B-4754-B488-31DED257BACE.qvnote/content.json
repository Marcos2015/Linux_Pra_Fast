{
  "title": ".(空格)/etc/profile与source /etc/profile区别",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(255, 0, 0);\">. (空格) /etc/profile:<br></span><div><span style=\"color: rgb(255, 0, 0);\">可以使一个shell定义一个变量可以继承到子shell<br>但是 source /etc/profile则不可以</span><br><br></div></div><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;</span><b style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">方法1：</b><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">让/etc/profile文件修改后立即生效 ,可以使用如下命令:</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"># .&nbsp;&nbsp;/etc/profile</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">注意: . 和 /etc/profile 有空格</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><b style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">方法2：</b><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">让/etc/profile文件修改后立即生效 ,可以使用如下命令:</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"># source /etc/profile</span><div id=\"article_content\" class=\"article_content\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><p><span style=\"color: rgb(255, 0, 255);\">source命令也称为“点命令”，也就是一个点符号（.）。source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。</span></p><p>用法：&nbsp;</p><p>source filename 或 . filename</p><p>source命令除了上述的用途之外，还有一个另外一个用途。在对编译系统核心时常常需要输入一长串的命令，如：</p><p>make mrproper</p><p>make menuconfig</p><p>make dep</p><p>make clean</p><p>make bzImage</p><p>…………</p><p>如果把这些命令做成一个文件，让它自动顺序执行，对于需要多次反复编译系统核心的用户来说会很方便，而用source命令就可以做到这一点，它的作 用就是把一个文件的内容当成shell来执行，先在linux的源代码目录下（如/usr/src/linux-2.4.20）建立一个文件，如 make_command，在其中输入一下内容：</p><p>make mrproper &amp;&amp;</p><p>make menuconfig &amp;&amp;</p><p>make dep &amp;&amp;</p><p>make clean &amp;&amp;</p><p>make bzImage &amp;&amp;</p><p>make modules &amp;&amp;</p><p>make modules_install &amp;&amp;</p><p>cp arch/i386/boot/bzImage /boot/vmlinuz_new &amp;&amp;</p><p>cp System.map /boot &amp;&amp;</p><p>vi /etc/lilo.conf &amp;&amp;</p><p>lilo -v</p><p>文件建立好之后，每次编译核心的时候，只需要在/usr/src/linux-2.4.20下输入：</p><p>source make_command</p><p>即可，如果你用的不是lilo来引导系统，可以把最后两行去掉，配置自己的引导程序来引导内核。</p><p>顺便补充一点，&amp;&amp;命令表示顺序执行由它连接的命令，但是只有它之前的命令成功执行完成了之后才可以继续执行它后面的命令。</p></div>"
    }
  ]
}
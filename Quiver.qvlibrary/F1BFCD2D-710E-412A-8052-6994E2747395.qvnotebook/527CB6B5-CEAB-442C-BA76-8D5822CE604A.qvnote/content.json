{
  "title": "char、signed char、unsigned char的区别",
  "cells": [
    {
      "type": "text",
      "data": "<div><br></div><div><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">ANSI C 提供了3种字符类型，分别是char、signed char、unsigned char</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">char相当于signed char或者unsigned char，但是这取决于编译器！</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: Arial; font-size: 14px; color: rgb(47, 54, 153);\">这三种字符类型都是按照1个字节存储的，可以保存256个不同的值。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">不同的是取值范围</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: Arial; font-size: 14px; color: rgb(47, 54, 153);\">signed char取值范围是 -128 到 127</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: Arial; font-size: 14px; color: rgb(47, 54, 153);\">unsigned char 取值范围是 0 到 255</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">signed char的最高位为符号位，因此char能表示-128~127, unsigned char没有符号位，因此能表示0~255。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">但是char究竟相当于signed char呢还是相当于unsigned char呢？？</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">这就是char和int的不同之处！</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"font-family: Arial; font-size: 14px; color: rgb(47, 54, 153);\">int＝＝signed int，但是char不能简单以为＝＝signed char</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">要确定char究竟等同什么要基于不同的编译器做测试</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">大多数机器使用补码来存储整数，在这些机器中按照整数类型存储的－1的所有位均是1</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">假设我的机器也是如此存储，就能据此判断char究竟是等于signed char还是unsigned char</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">在实际使用过程种有什么区别呢？</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">主要是符号位，但是在普通的赋值，读写文件和网络字节流都没什么区别，反正就是一个字节，不管最高位是什么，最终的读取结果都一样，只是你怎么理解最高位而已，在屏幕上面的显示可能不一样。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><div class=\"para\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(255, 0, 0);\">判断</span><a target=\"_blank\" href=\"http://baike.baidu.com/view/487018.htm\" style=\"color: rgb(255, 0, 0);\"><span style=\"color: rgb(255, 0, 0);\">编译器</span></a><span style=\"color: rgb(255, 0, 0);\">的默认char符号</span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: Arial;\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\"><span style=\"color: rgb(255, 0, 0);\">1</span></div><div class=\"line number2 index1 alt1\"><span style=\"color: rgb(255, 0, 0);\">2</span></div><div class=\"line number3 index2 alt2\"><span style=\"color: rgb(255, 0, 0);\">3</span></div><div class=\"line number4 index3 alt1\"><span style=\"color: rgb(255, 0, 0);\">4</span></div><div class=\"line number5 index4 alt2\"><span style=\"color: rgb(255, 0, 0);\">5</span></div><div class=\"line number6 index5 alt1\"><span style=\"color: rgb(255, 0, 0);\">6</span></div><div class=\"line number7 index6 alt2\"><span style=\"color: rgb(255, 0, 0);\">7</span></div><div class=\"line number8 index7 alt1\"><span style=\"color: rgb(255, 0, 0);\">8</span></div><div class=\"line number9 index8 alt2\"><span style=\"color: rgb(255, 0, 0);\">9</span></div><div class=\"line number10 index9 alt1\"><span style=\"color: rgb(255, 0, 0);\">10</span></div><div class=\"line number11 index10 alt2\"><span style=\"color: rgb(255, 0, 0);\">11</span></div><div class=\"line number12 index11 alt1\"><span style=\"color: rgb(255, 0, 0);\">12</span></div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\"><span style=\"color: rgb(255, 0, 0);\">#include&nbsp;&lt;stdio.h&gt;</span></code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\"><span style=\"color: rgb(255, 0, 0);\">int</span></code><span style=\"color: rgb(255, 0, 0);\">&nbsp;</span><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">main(</span></code><code class=\"cpp keyword bold\"><span style=\"color: rgb(255, 0, 0);\">void</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">)</span></code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">{</span></code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp color1 bold\"><span style=\"color: rgb(255, 0, 0);\">char</span></code><span style=\"color: rgb(255, 0, 0);\">&nbsp;</span><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">c=-1;</span></code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp keyword bold\"><span style=\"color: rgb(255, 0, 0);\">if</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">(c&lt;200){</span></code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp functions bold\"><span style=\"color: rgb(255, 0, 0);\">printf</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">(</span></code><code class=\"cpp string\"><span style=\"color: rgb(255, 0, 0);\">\"signed\\n\"</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">);</span></code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">}</span></code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp keyword bold\"><span style=\"color: rgb(255, 0, 0);\">else</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">{</span></code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp functions bold\"><span style=\"color: rgb(255, 0, 0);\">printf</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">(</span></code><code class=\"cpp string\"><span style=\"color: rgb(255, 0, 0);\">\"unsigned\\n\"</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">);</span></code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">}</span></code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\"><span style=\"color: rgb(255, 0, 0);\">&nbsp;&nbsp;</span></code><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">return0;</span></code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\"><span style=\"color: rgb(255, 0, 0);\">}</span></code></div></div></td></tr></tbody></table><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">但是我们却发现在</span><span style=\"font-family: Arial; font-size: 14px; color: rgb(47, 54, 153);\">表示byte时，都用unsigned char，这是因为byte没有符号位之说</span><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">如果是char，那么系统认为最高位是符号位，而int可能是16或者32位，那么会对最高位进行扩展（注意，赋给unsigned int也会扩展），而如果是unsigned char，那么不会扩展。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">这就是二者的最大区别。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">同理可以推导到其它的类型，比如short， unsigned short。等等</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">具体可以通过下面的小例子看看其区别</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><pre style=\"color: rgb(0, 0, 0); font-size: 14px;\">static get_utili<span style=\"color: rgb(0, 153, 0);\">(</span><span style=\"color: rgb(0, 0, 0); font-weight: bold;\">const</span> char <span style=\"color: rgb(51, 153, 51);\">*</span>p<span style=\"color: rgb(0, 153, 0);\">)</span>\n<br>\n<span style=\"color: rgb(0, 153, 0);\">{</span>\n  int util<span style=\"color: rgb(51, 153, 51);\">;</span><br>\n&nbsp;<wbr> …\n  <span style=\"color: rgb(177, 177, 0);\"><br>\n&nbsp;<wbr> while</span> <span style=\"color: rgb(0, 153, 0);\">(</span>isspace<span style=\"color: rgb(0, 153, 0);\">((</span>int<span style=\"color: rgb(0, 153, 0);\">)</span><span style=\"color: rgb(51, 153, 51);\">*</span>p<span style=\"color: rgb(0, 153, 0);\">))</span>   <span style=\"color: rgb(102, 102, 102); font-style: italic;\">//跳过空格</span>\n<br>\n&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> <span style=\"color: rgb(51, 153, 51);\">++</span>p<span style=\"color: rgb(51, 153, 51);\">;</span>\n<br>\n&nbsp;<wbr> util <span style=\"color: rgb(51, 153, 51);\">=</span> <span style=\"color: rgb(0, 153, 0);\">(</span>int<span style=\"color: rgb(0, 153, 0);\">)</span> <span style=\"color: rgb(51, 153, 51);\">*</span>p<span style=\"color: rgb(51, 153, 51);\">++;</span><br>\n&nbsp;<wbr> …<br>\n<span style=\"color: rgb(0, 153, 0);\">}<br></span>\n</pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><div>现象&amp;后果:&nbsp;<wbr></div><div><p>当传入的参数p指向的内容为0x9A、0XAB等内容(最高位为1)时，得到的int型变量util的值将会出错，因为char会进行符号扩展，使得0x9A(十进制的154)变成了-102。会造成程序运行时的数据处理错误。</p><div><div>Bug分析:&nbsp;<wbr></div><div><p><span style=\"color: rgb(255, 0, 0);\">char符号扩展是与编译器相关的，但在x86平台上，对于任何主流的编译平台，char总是进行符号扩 展的。上述代码在将char型的*p赋给int型变量util的时候，需要先进行char型到unsigned char型的转换，以避免按照char的最高位进行符号扩展。</span><br>上述出错代码的符号扩展过程如下：<br>因为要扩展的短数据类型为有符号数的-- char x=10011100b（即0x9A）<br>因而在int y=(int)x时--进行符号扩展，即<span style=\"color: rgb(47, 54, 153);\">短数据类型的符号位填充到长数据类型的高字节位</span>（比短数据类型多出的那一部分），则y的值为11111111 10011100b(变成了十进制的-102)；<br>但是，将要扩展的短数据类型变成无符号数后--unsigned char x=10011100b（即0x9A）<br>在 int y=(int)x时--进行扩展的时候是以零扩展，即用零来填充长数据类型的高字节位，则y的值应为00000000 10011100b(十进制的154)。</p></div></div><div><div>正确代码:&nbsp;<wbr></div><div><pre>util <span style=\"color: rgb(51, 153, 51);\">=</span> <span style=\"color: rgb(0, 153, 0);\">(</span>int<span style=\"color: rgb(0, 153, 0);\">)</span> <span style=\"color: rgb(51, 153, 51);\">*</span>p<span style=\"color: rgb(51, 153, 51);\">++;</span>改成\n<br>\nutil <span style=\"color: rgb(51, 153, 51);\">=</span> <span style=\"color: rgb(0, 153, 0);\">(</span>int<span style=\"color: rgb(0, 153, 0);\">)(</span>unsigned char<span style=\"color: rgb(0, 153, 0);\">)</span> <span style=\"color: rgb(51, 153, 51);\">*</span>p<span style=\"color: rgb(51, 153, 51);\">++</span></pre></div></div></div></div></div>"
    }
  ]
}
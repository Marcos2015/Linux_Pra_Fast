{
  "title": "linux下的静态库和动态库的编译",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"color: rgb(0, 0, 0); line-height: 1.7; font-size: 14px; font-family: arial;\"><h1 class=\"postTitle\" style=\"margin: 0px 0px 10px; padding: 0px 15px; font-size: 12px; font-weight: normal; background-image: url(http://common.cnblogs.com/Skins/iMetro_HD/images/logo.png); font-family: Verdana, Arial, Helvetica, sans-serif; line-height: 18px; background-position: -10px 0px; background-repeat: no-repeat repeat;\"><br></h1><div class=\"postBody\" style=\"margin: 0px 0px 5px; padding: 0px 15px; font-family: Verdana, Arial, Helvetica, sans-serif;\"><div id=\"cnblogs_post_body\" style=\"margin: 0px 0px 30px; padding: 0px; overflow: auto; word-break: normal !important;\">转自:<a href=\"http://www.diybl.com/course/6_system/linux/Linuxjs/20071027/80547.html\">http://www.diybl.com/course/6_system/linux/Linuxjs/20071027/80547.html</a><br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">每个程序实质上都会链接到一个或者多个的库。比如使用C函数的程序会链接到C运行时库，GUI程序会链接到窗口库等等。无论哪种情况，你都会要决定是链接到静态库(static libary)还是动态库(dynamic libary)。<br style=\"margin: 0px; padding: 0px;\">链接到静态库会使你的程序臃肿，并且难以升级，但是可能会比较容易部署。<br style=\"margin: 0px; padding: 0px;\">而链接到动态库会使你的程序轻便，并且易于升级，但是会难以部署。<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\"><font size=\"2\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">静态库</font><br style=\"margin: 0px; padding: 0px;\">静态库也就相当于是把一系列的object文件放在同一个文件中（类似windows中的.lib文件）。当你提供一个静态库给链接器时，连接器将会搜索静态库，从中找到他所需要的object文件，提取出他们，将他们链接到你的程序中，就像你直接提供那些文件一样。<br style=\"margin: 0px; padding: 0px;\">如何创建静态库呢？你可以使用ar命令来创建。<br style=\"margin: 0px; padding: 0px;\">下面我们举个例子：<br style=\"margin: 0px; padding: 0px;\">test/lib/test1.c<br style=\"margin: 0px; padding: 0px;\">#include &lt;stdio.h&gt;<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">int hello_world1()<br style=\"margin: 0px; padding: 0px;\">{<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; printf(\"hello world1\\n\");<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; return 1;<br style=\"margin: 0px; padding: 0px;\">}<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">test/lib/test2.c<br style=\"margin: 0px; padding: 0px;\">#include &lt;stdio.h&gt;<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">void hello_world2()<br style=\"margin: 0px; padding: 0px;\">{<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; printf(\" hello world2\\n\");<br style=\"margin: 0px; padding: 0px;\">}<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">test/app.c<br style=\"margin: 0px; padding: 0px;\">#include &lt;stdio.h&gt;<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">int main()<br style=\"margin: 0px; padding: 0px;\">{<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; hello_world1();<br style=\"margin: 0px; padding: 0px;\">}<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">现在我们编译他们进入目录test/lib<br style=\"margin: 0px; padding: 0px;\">$gcc -c test1.c<br style=\"margin: 0px; padding: 0px;\">$gcc -c test2.c<br style=\"margin: 0px; padding: 0px;\">$ls<br style=\"margin: 0px; padding: 0px;\">test1.c&nbsp; test1.o&nbsp; test2.c&nbsp; test2.o<br style=\"margin: 0px; padding: 0px;\">$ar cr libtest.a test1.o test2.o<br style=\"margin: 0px; padding: 0px;\">$ls<br style=\"margin: 0px; padding: 0px;\">libtest.a&nbsp; test1.c&nbsp; test1.o&nbsp; test2.c&nbsp; test2.o<br style=\"margin: 0px; padding: 0px;\">cr标志告诉ar将object文件封装(archive),我们可以使用nm -s 命令来查看.a文件的内容<br style=\"margin: 0px; padding: 0px;\">$nm -s libtest.a<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">Archive index:<br style=\"margin: 0px; padding: 0px;\">hello_world1 in test1.o<br style=\"margin: 0px; padding: 0px;\">hello_world2 in test2.o<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">test1.o:<br style=\"margin: 0px; padding: 0px;\">00000000 T hello_world1<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; U puts<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">test2.o:<br style=\"margin: 0px; padding: 0px;\">00000000 T hello_world2<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; U puts<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">现在让我们编译主程序<br style=\"margin: 0px; padding: 0px;\">首先退出lib目录<br style=\"margin: 0px; padding: 0px;\">$cd ..<br style=\"margin: 0px; padding: 0px;\">$gcc -o app app.c -Llib -ltest<br style=\"margin: 0px; padding: 0px;\">-L指定了lib的搜索路径，-l指定了链接的库的名字-ltest也就是链接libtest.a<br style=\"margin: 0px; padding: 0px;\">$./app<br style=\"margin: 0px; padding: 0px;\">hello world1<br style=\"margin: 0px; padding: 0px;\">hello_world1（）被从libtest.a中找到并链接过来了，于是整个的过程中没有出现问题。<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; font-weight: bold;\">动态库</span><br style=\"margin: 0px; padding: 0px;\">动 态库(static lib)也可一也可以成为共享库(shared lib),一般的后缀名是.so。动态库与静态库有点类似，他们都是一系列的object文件的集合，只是他们的组织方式不同。同样他们的链接方式也是不 同的，动态库只在执行是链接使用，并不把相应的部分编译入程序中，在使用是一个库可以被多个程序使用故可称为共享库，而静态库将会整合到程序中，链接时各 程序使用自己的库。<br style=\"margin: 0px; padding: 0px;\">下面我们来介绍如何创建动态库，还是之前的三个文件，同样的布局，进入lib目录<br style=\"margin: 0px; padding: 0px;\">$gcc -c -fPIC&nbsp; test1.c<br style=\"margin: 0px; padding: 0px;\">$gcc -c -fPIC&nbsp; test2.c<br style=\"margin: 0px; padding: 0px;\">-fPIC告诉gcc将源代码编译成共享的object文件,PIC(Position-Independent Code)非位置依赖性代码。<br style=\"margin: 0px; padding: 0px;\">$gcc -shared -fPIC -o libtest.so test1.o test2.o<br style=\"margin: 0px; padding: 0px;\">将两个文件整合为共享库libtest.so<br style=\"margin: 0px; padding: 0px;\">退出lib目录<br style=\"margin: 0px; padding: 0px;\">$cd ..<br style=\"margin: 0px; padding: 0px;\">$gcc -o app app.c -Llib -ltest<br style=\"margin: 0px; padding: 0px;\">$./app<br style=\"margin: 0px; padding: 0px;\">./app: error while loading shared libraries: libtest.so: cannot open shared object file: No such file or directory<br style=\"margin: 0px; padding: 0px;\">啊哈，我们在这里遇到一个error没找到libtest.so,说明我们的编译成功了，libtest.so成为了一个shared libary。程序之所以不能运行是因为libtest.so不在默认的搜索路径上<br style=\"margin: 0px; padding: 0px;\">怎样才能让他跑呢？<br style=\"margin: 0px; padding: 0px;\">$LD_LIBRARY_PATH=$PWD/lib ./app<br style=\"margin: 0px; padding: 0px;\">hello world1<br style=\"margin: 0px; padding: 0px;\">我们在自己指定链接的路径，他找到了我们的libtest.so文件，并且链接成功了。<br style=\"margin: 0px; padding: 0px;\"><br style=\"margin: 0px; padding: 0px;\">参考资料：<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; 《Advenced linux Programming》Mark Mitchell, Jeffrey Oldham,and Alex Samuel<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; man nm<br style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; man ar</div><div id=\"MySignature\" style=\"margin: 10px 0px; padding: 10px; background-color: rgb(248, 248, 238); border: 1px solid rgb(232, 231, 208); box-shadow: rgb(170, 170, 170) 0px 0px 15px; color: gray;\"><br style=\"margin: 0px; padding: 0px;\">作者：<a href=\"http://itech.cnblogs.com/\" target=\"_blank\" style=\"margin: 0px; padding: 1px 3px; color: green; text-decoration: none;\">iTech</a><br style=\"margin: 0px; padding: 0px;\">出处：<a href=\"http://itech.cnblogs.com/\" target=\"_blank\" style=\"margin: 0px; padding: 1px 3px; color: green; text-decoration: none;\">http://itech.cnblogs.com/</a>&nbsp;<br style=\"margin: 0px; padding: 0px;\">欢迎转载，欢迎加入qq交流群172758282！</div></div></div><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><br style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span title=\"neteasefooter\" style=\"color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px;\"><span id=\"netease_mail_footer\"><div id=\"netease_mail_footer\"><div style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); padding: 10px 5px; color: rgb(102, 102, 102); line-height: 22px;\">来自网易手机号码邮箱<a id=\"mobile_set\" sys=\"1\" log=\"1\" logid=\"free_sms_20120504\" href=\"http://shouji.163.com/\" target=\"_blank\" style=\"color: rgb(0, 0, 255);\">了解更多</a></div></div></span></span>"
    }
  ]
}
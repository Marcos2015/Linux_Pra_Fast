{
  "title": "contain_of如何由结构体成员指针得到整个结构体指针",
  "cells": [
    {
      "type": "text",
      "data": "<span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;contain_of如何由结构体成员指针得到整个结构体指针 2012-05-17 19:33:30</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">分类： LINUX</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">首先我们来看一段代码：</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">#include&lt;stdio.h&gt;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">#include&lt;string.h&gt;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">struct student {</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; char name[20];</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; int num;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">};</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">int main()</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">{</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; struct student stu;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; struct student *stu_ptr;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; strcpy(stu.name,\"xgmiao\");</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; int offset1;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; stu.num =10;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%x\\n\",&amp;stu);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%x\\n\",stu.name);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%x\\n\",&amp;stu.num);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; const typeof(((struct student *)0)-&gt;num) *_mptr = &amp;stu.num;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; offset1 = (int)(&amp;((struct student *)0)-&gt;num);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%d\\n\",offset1);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; stu_ptr = (struct student *)((char *)_mptr-offset1);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"offset1=%d\\n\",offset1);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%x\\n\",stu_ptr);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; return 0;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">}</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">先看运行结果：</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">输出结果分析：第一行和第二行分别输出stu这个结构体变量的地址和stu中name成员的地址，是一样，容易理解。第三行输出的是stu中成员num的地址，显然与stu地址相差20，即就是name[20]所占的空间。后面的结果我们暂时不分析。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">再来看内核中contain_of宏是如何实现的：</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">contain_of定义在linux内核中/include/linux/kernel.h文件中。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">/**</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;* container_of - cast a member of a structure out to the containing structure</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;* @ptr:&nbsp;&nbsp; &nbsp;the pointer to the member.</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;* @type:&nbsp;&nbsp; &nbsp;the type of the container struct this is embedded in.</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;* @member:&nbsp;&nbsp; &nbsp;the name of the member within the struct.</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;*</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;*/</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">#define container_of(ptr, type, member) ({&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp; &nbsp;const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);&nbsp;&nbsp; &nbsp;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp; &nbsp;(type *)( (char *)__mptr - offsetof(type,member) );})</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">offsetof定义在/include/linux/stddef.h中</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">#define offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">TYPE是某struct的类型. 0是一个假想TYPE类型struct. MEMBER是该struct中的一个成员. 由于该struct的基地址为0, MEMBER的地址就是该成员相对于struct头地址的偏移量.如在我们的例子中offset1 = (int)(&amp;((struct student *)0)-&gt;num);输出是20，这句代码的意思就是如同当我定义的一个struct student stu变量，当&amp;stu为0时，找到stu成员中num的地址。如果将0改为1，则offset1的值就是21，所以用0的好处就是使成员MEMBER的地址是相对于struct头地址的偏移量。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">关于type_of它是gcc的c语言扩展保留字，用于声明变量的类型。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr)</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">声明一个member类型的指针常量_mptr,并初始化为ptr，这里的0同样是一个type类型的地址，将0改为其他的任意正整数如1等，不影响结果。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">(type *)( (char *)__mptr - offsetof(type,member) )</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">用_mptr的值(与ptr值相等)减去member成员地址相对于type头地址的偏移量，这样就利用ptr结构体成员的地址得到了包含这个ptr这个大结构的地址.(由部分得到整体)由此，container_of实现了根据一个结构体变量中的一个域成员变量的指针来获取指向整个结构体变量的指针的功能。</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">为什么要将_mptr先强制转换成char *类型呢？</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">先看一个例子：</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">#include&lt;stdio.h&gt;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">void main()</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">{</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; int a=10;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; int *ptr = &amp;a;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%x\\n\",ptr);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; ptr = ptr-1;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%x\\n\",ptr);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; ptr =&amp;a;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; ptr =(char *)ptr -1;</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">&nbsp;&nbsp;&nbsp; printf(\"%x\\n\",ptr);</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">}</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">结果：</span><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">输出第二行与第一行差4，这就是一个指针减去一个数。一个type类型的指针减去一个数n，实际上是：ptr-n*sizeof(type).所以在减去offsetof(type,member)要将_mptr转化成char *类型。</span>"
    }
  ]
}
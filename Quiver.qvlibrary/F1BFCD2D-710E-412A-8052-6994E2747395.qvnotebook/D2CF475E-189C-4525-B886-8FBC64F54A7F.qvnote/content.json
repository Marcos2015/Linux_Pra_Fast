{
  "title": "bzero和menset的区别",
  "cells": [
    {
      "type": "text",
      "data": "<pre id=\"best-content-1275529941\" class=\"best-text mb-10\" style=\"color: rgb(0, 0, 0); font-size: 14px;\">bzero<br>　　原型：extern void bzero（void *s, int n）;　　用法：#include &lt;string.h&gt;　　功能：置字节字符串s的前n个字节为零且包括‘\\0’。　　说明：bzero无返回值，并且使用strings.h头文件，strings.h曾经是posix标准的一部分，但是在POSIX.1-2001标准里面，这些函数被标记为了遗留函数而不推荐使用。在POSIX.1-2008标准里已经没有这些函数了。推荐使用memset替代bzero。<br> <br></pre><div style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">　　void *memset(void *s, int ch, size_t n);　　函数解释：将s中前n个字节替换为ch并返回s；　　memset:作用是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法。　　<br>常见的三种错误　<br>　 第一: 搞反了ch 和 n的位置.　　一定要记住 如果要把一个char a[20]清零, 一定是 memset(a, 0, 20)　　而不是 memset(a, 20, 0)　　<br>&nbsp;&nbsp;&nbsp; 第二: 过度使用memset, 我想这些程序员可能有某种心理阴影, 他们惧怕未经初始化的内存, 所以他们会写出这样的代码:　　char buffer[20];　　memset(buffer, 0, sizeof((char)*20));　　strcpy(buffer, \"123\");　　这里的memset是多余的. 因为这块内存马上就被覆盖了, 清零没有意义.　　<br>&nbsp;&nbsp;&nbsp;&nbsp; 第三: 其实这个错误严格来讲不能算用错memset, 但是它经常在使用memset的场合出现</div><pre id=\"best-content-1275529941\" class=\"best-text mb-10\" style=\"color: rgb(0, 0, 0); font-size: 14px;\"> <br>关于字符数组的初始化，在项目的压力测试中，发现性能明显下降，变怀疑在程序中的若干临时字符数组的初始化（使用bzero）身上。于是修改为首个字符置零的方式而非全部置零的方式初始化，响应得到明显的提升。原来在mp3检索的每一条结果都要进行bzero对临时数组初始化，每一个请求需要30次的bzero对临时数组的置零。于是想到了，在非必要的情况下，只对临时数组的第一个（或前几个）字符置零的初始化方式对比与使用bzero的话，能够明显提高性能。</pre>"
    }
  ]
}
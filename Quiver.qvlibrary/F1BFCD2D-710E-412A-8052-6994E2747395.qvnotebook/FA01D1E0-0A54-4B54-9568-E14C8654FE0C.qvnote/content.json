{
  "title": "char 与 unsigned char的本质区别",
  "cells": [
    {
      "type": "text",
      "data": "<h2 style=\"color: rgb(0, 0, 0); font-family: Arial;\"><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">在C中，默</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">认</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">的基</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">础</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">数据类型均</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">为</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">signed，</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">现</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">在我</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">们</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">以char</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">为</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">例，</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">说</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">明(signed) char与unsigned char之</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">间</span><span style=\"color: rgb(0, 0, 0); font-size: 14px;\">的区别&nbsp;</span><br></h2><div id=\"cnblogs_post_body\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><p>首先在内存中，char与unsigned char没有什么不同，都是一个字节，唯一的区别是，char的最高位为符号位，因此char能表示-128~127, unsigned char没有符号位，因此能表示0~255，这个好理解，8个bit，最多256种情况，因此无论如何都能表示256个数字。</p><p>在实际使用过程种有什么区别呢？</p><p>主要是符号位，但是在普通的赋值，读写文件和网络字节流都没什么区别，反正就是一个字节，不管最高位是什么，最终的读取结果都一样，只是你怎么理解最高位而已，在屏幕上面的显示可能不一样。</p><p>但是我们却发现在表示byte时，都用unsigned char，这是为什么呢？</p><p>首先我们通常意义上理解，byte没有什么符号位之说，更重要的是如果将byte的值赋给int，long等数据类型时，系统会做一些额外的工作。</p><p>如果是char，那么系统认为最高位是符号位，而int可能是16或者32位，那么会对最高位进行扩展（注意，赋给unsigned int也会扩展）</p><p>而如果是unsigned char，那么不会扩展。</p><p>这就是二者的最大区别。</p><p>同理可以推导到其它的类型，比如short， unsigned short。等等</p><p>具体可以通过下面的小例子看看其区别</p><p>include &lt;stdio.h&gt;</p><p>&nbsp;</p><p>void f(unsigned char v)</p><p>{</p><p>&nbsp; &nbsp; char c = v;</p><p>&nbsp; &nbsp; unsigned char uc = v;</p><p>&nbsp; &nbsp; unsigned int a = c, b = uc;</p><p>&nbsp; &nbsp; int i = c, j = uc;</p><p>&nbsp; &nbsp; printf(\"----------------\\n\");</p><p>&nbsp; &nbsp; printf(\"%%c: %c, %c\\n\", c, uc);</p><p>&nbsp; &nbsp; printf(\"%%X: %X, %X\\n\", c, uc);</p><p>&nbsp; &nbsp; printf(\"%%u: %u, %u\\n\", a, b);</p><p>&nbsp; &nbsp; printf(\"%%d: %d, %d\\n\", i, j);</p><p>}</p><p>&nbsp;</p><p>int main(int argc, char *argv[])</p><p>{</p><p>&nbsp; &nbsp; f(0x80);</p><p>&nbsp; &nbsp; f(0x7F);&nbsp;</p><p>&nbsp; &nbsp; return 0;</p><p>}</p><p>&nbsp;</p><p>输出结果：</p><p>----------------</p><p>%c: ?, ?</p><p>%X: FFFFFF80, 80</p><p>%u: 4294967168, 128</p><p>%d: -128, 128</p><p>----------------</p><p>%c: ,&nbsp;</p><p>%X: 7F, 7F</p><p>%u: 127, 127</p><p>%d: 127, 127</p><p>由此可见，最高位若为0时，二者没有区别，若为0时，则有区别了。</p></div>"
    }
  ]
}
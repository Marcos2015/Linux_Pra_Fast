{
  "title": "开源C/C++网络库比较",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">在开源的C/C++网络库中， 常用的就那么几个， 在业界知名度最高的， 应该是ACE了， 不过是个重量级的大家伙， 轻量级的有libevent， libev， 还有 Boost的ASIO。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">ACE是一个大型的中间件产品，代码20万行左右，过于宏大，一堆的设计模式，<a href=\"http://lib.csdn.net/base/architecture\" class=\"replace_word\" title=\"大型网站架构知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">架构</a>了一层又一层，使用的时候， 要根据情况，看你从那一层来进行使用。支持跨平台。<br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">Boost的ASIO是一个异步IO库，封装了对Socket的常用操作，简化了基于socket程序的开发。支持跨平台。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">libevent是一个<a href=\"http://lib.csdn.net/base/c\" class=\"replace_word\" title=\"C语言知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">C语言</a>写的网络库， 官方主要支持的是类<a href=\"http://lib.csdn.net/base/linux\" class=\"replace_word\" title=\"Linux知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">Linux</a>&nbsp;<a href=\"http://lib.csdn.net/base/operatingsystem\" class=\"replace_word\" title=\"操作系统知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">操作系统</a>， 最新的版本添加了对windows的IOCP的支持。由于IOCP是异步IO，与linux下的POLL模型，EPOLL模型，还有freebsd的 KQUEUE等这些同步模型在用法上完全不一致，所以使用方法也不一样，就好比ACE中的Reactor和Proactor模式一样， 使用起来需要转变思路。如果对性能没有特别的要求， 那么使用libevent中的select模型来实现跨平台的操作， select模型可以横跨windows， linux， unix，solaris等系统。<br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">libev是一个C语言写的，只支持linux系统的库，我以前研究的时候只封装了EPOLL模型， 不知道现在的新版有没有改进。使用方法类似libevent， 但是非常简洁，代码量是最少的一个库，也就几千行代码。显然这样的代码跨平台肯定是无法支持的了， 如果你只需要在linux下面运行，那用这个库也是可以的。<br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><br>ACE网络库在使用中，一直对其中的内存管理搞得一头雾水，分配的内存需要在哪里释放都不知道，ACE不愧是一个做研究用的库， 可以说里面的封装把设计模式这本书中列出的模式都在代码里面实现了一番，用起来感觉是在用<a href=\"http://lib.csdn.net/base/javase\" class=\"replace_word\" title=\"Java SE知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); font-weight: bold;\">Java</a>一 样，如果你想使用ACE作为你的网络库， 千万不要仅仅把它当成一个网络库使用， 你要把它当成一个框架来使用，如果你只想用它的网络库， 那大可不必用ACE， 因为它太庞大了，学习起来太费劲。但是你把它当成一个框架来用，你会感觉用的还真爽，该有的东西都有，比如线程池，内存池，定时器，递归锁等，都很方便 的。Boost的ASIO，在内存管理方面要直观的多。下面简单地与ACE做个比较。<br><br>1.层次架构：<br>ACE底层是C风格的OS适配层，上一层基于C++的wrap类，再上一层是一些框架（Accpetor, Connector，Reactor，Proactor等），最上一层是框架上服务。<br>Boost.ASIO与之类似，底层是OS的适配层，上一层一些模板类，再上一层模板类的参数化（TCP/UDP），再上一层是服务，它只有一种框架为io_service。<br>livevent在不同的操作系统下，做了多路复用模型的抽象，可以选择使用不同的模型，通过事件函数提供服务。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">2.涉及范围：<br>ACE包含了日志，IPC，线程池，共享内存，配置服务，递归锁，定时器等。<br>ASIO只涉及到Socket，提供简单的线程操作。<br>libevent只提供了简单的网络API的封装， 线程池， 内存池， 递归锁等均需要自己实现。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">3.设计模式：<br>ACE主要应用了Reactor，Proactor等。<br>而ASIO主要应用了Proactor。<br>libevent为Reactor模式</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">4.线程调度：<br>ACE的Reactor是单线程调度，Proactor支持多线程调度。<br>ASIO支持单线程与多线程调度。<br>libevent的线程调度需要自己来注册不同的事件句柄。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">5.事件分派处理：<br>ACE主要是注册handler类，当事件分派时，调用其handler的虚挂勾函数。实现ACE_Handler / ACE_Svc_Handler / ACE_Event_handler等类的虚函数。<br>ASIO是基于函数对象的hanlder事件分派。任何函数都可能成为hanlder，少了一堆虚表的维护，调度上优于ACE。<br>libevent基于注册的事件回调函数来实现事件分发。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">6.发布方式：<br>ACE是开源免费的，不依赖于第3方库， 一般应用使用它时，以动态链接的方式发布动态库。<br>ASIO是开源免费的，依赖Boost，应用使用时只要include头文件，不需动态库。<br>libevent为开源免费的，一般编译为静态库进行使用。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">7.可移植性：<br>ACE支持多种平台，可移植性不存在问题，据说socket编程在linux下有不少bugs。<br>ASIO支持多种平台，可移植性不存在问题。<br>libevent主要支持linux平台，freebsd平台， 其他平台下通过select模型进行支持， 效率不是太高。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">8.开发难度：<br>基于ACE开发应用，对程序员要求比较高，要用好它，必须非常了解其框架。在其框架下开发，往往new出一个对象，不知在什么地方释放好。<br></p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">基于ASIO开发应用，要求程序员熟悉函数对象，函数指针，熟悉boost库中的boost::bind。内存管理控制方面。</p><p style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\">基于libevent开发应用，相对容易， 具体大家可以参考memcached这个开源的应用，里面使用了libevent这个库。</p>"
    }
  ]
}
{
  "title": "socket异步编程--libevent的使用",
  "cells": [
    {
      "type": "text",
      "data": "<embed id=\"xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd\" type=\"application/thunder_download_plugin\" height=\"0\" width=\"0\" style=\"color: rgb(0, 0, 0); font-family: Arial; font-size: 14px;\"><span style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 这篇文章介绍下libevent在socket异步编程中的应用。在一些对性能要求较高的网络应用程序中，为了防止程序阻塞在socket I/O操作上造成程序性能的下降，需要使用异步编程，即程序准备好读写的函数(或接口)并向系统注册，然后在需要的时候只向系统提交读写的请求之后就继续做自己的事情，实际的读写操作由系统在合适的时候调用我们程序注册的接口进行。异步编程会给一些程序猿带来一些理解和编写上的困难，因为我们通常写的一些简单的程序都是顺序执行的，而异步编程将程序的执行顺序打乱了，有些代码什么情况下执行往往不是太清晰，因此也使得编程的复杂度大大增加。</span><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; Note：这里系统这个词使用的不准确，实际上可以是自己封装的异步调用机制，更常见的是一些可用的库，比如libevent,ACE等</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 想了解libevent的工作原理可以自行查询资料，网上相关的介绍一大堆，也可以自己阅读源码进行分析，本文仅从使用的角度做一个简单的介绍，看如何快速的将libevent引入我们的程序中。任何应用都免不了需要承载其功能的底层OS，libevent也不例外，其内部是通过封装操作系统的IO复用机制实现的，在linux系统上可能是epoll、kqueu之类的，取决于具体的OS所支持的IO复用方式，在我的系统上是epoll，因此可以理解为libevent提供了一个比epoll更为友好的操作接口，将程序猿从网络IO处理的细节中解放出来，使其可以专注于目标问题的处理上。</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 首先，安装libevent到任意目录下</p><div id=\"codeSnippetWrapper\" style=\"color: rgb(0, 0, 0); border: 1px solid silver; padding: 4px; font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 1151.46875px; cursor: text; direction: ltr; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: rgb(244, 244, 244); max-height: 200px;\"><div id=\"codeSnippet\" style=\"padding: 0px; font-size: 8pt; overflow: visible; width: 1151.46875px; direction: ltr; border-style: none; line-height: 12pt;\"><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1151.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\">wget <a href=\"http://monkey.org/~provos/libevent-1.4.13-stable.tar.gz\">http:</a><span style=\"line-height: 1.8; color: rgb(0, 128, 0);\"><a href=\"http://monkey.org/~provos/libevent-1.4.13-stable.tar.gz\">//monkey.org/~provos/libevent-1.4.13-stable.tar.gz</a></span></pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1151.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\">tar –xzvf libevent-1.4.13-stable.tar.gz</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1151.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\">cd libevent-1.4.13-stable</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1151.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\">./configure --prefix=/home/mydir/libevent</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1151.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\">make &amp;&amp; make install</pre></div></div><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 现在假定我们要设计一个服务器程序，用于接收客户端的数据，并将接收的数据回写给客户端。下面来构造该程序，由于本仅仅是展示一个Demo，因此<font color=\"#ff0000\">程序中将不对错误进行处理，假设所有的调用都成功</font></p><div class=\"cnblogs_code\" style=\"color: rgb(0, 0, 0); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: 'Courier New' !important; font-size: 12px !important;\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: navy; border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border: none !important;\" width=\"20\" height=\"20\"></a></span></div><div><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">2</span>&nbsp;<span style=\"line-height: 1.5 !important;\"></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\">&nbsp;PORT 25341</span><span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">3</span>&nbsp;<span style=\"line-height: 1.5 !important;\"></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\">&nbsp;BACKLOG 5</span><span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">4</span>&nbsp;<span style=\"line-height: 1.5 !important;\"></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\">&nbsp;MEM_SIZE 1024</span><span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">5</span>&nbsp;<span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">6</span>&nbsp;<span style=\"line-height: 1.5 !important;\"></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;event_base</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">7</span>&nbsp;<span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">8</span>&nbsp;<span style=\"line-height: 1.5 !important;\"></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;main(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;argc,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;argv[])<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">9</span>&nbsp;<span style=\"line-height: 1.5 !important;\">{<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">10</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr_in my_addr;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">11</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">12</span>&nbsp;<span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">13</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; sock&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;socket(AF_INET, SOCK_STREAM,&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);&nbsp;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">14</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;yes&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">15</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,&nbsp;</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">yes,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">));<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">16</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; memset(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">my_addr,&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(my_addr));<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">17</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; my_addr.sin_family&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;AF_INET;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">18</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; my_addr.sin_port&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;htons(PORT);<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">19</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; my_addr.sin_addr.s_addr&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;INADDR_ANY;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">20</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; bind(sock, (</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">my_addr,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr));<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">21</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; listen(sock, BACKLOG);<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">22</span>&nbsp;<span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">23</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">&nbsp;listen_ev;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">24</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;event_base_new();<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">25</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; event_set(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">listen_ev, sock, EV_READ</span><span style=\"line-height: 1.5 !important;\">|</span><span style=\"line-height: 1.5 !important;\">EV_PERSIST, on_accept, NULL);<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">26</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; event_base_set(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">listen_ev);<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">27</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; event_add(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">listen_ev, NULL);<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">28</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; event_base_dispatch(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">);<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">29</span>&nbsp;<span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">30</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">return</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">31</span>&nbsp;<span style=\"line-height: 1.5 !important;\">}</span></div><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: navy; border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border: none !important;\" width=\"20\" height=\"20\"></a></span></div></div><div class=\"csharpcode-wrapper\" id=\"codeSnippetWrapper\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, Helvetica, sans-serif;\"></div><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 第13行说明创建的是一个TCP socket。第15行是服务器程序的通常做法，设置了该选项后，在父子进程模型中，当子进程为客户服务的时候如果父进程退出，可以重新启动程序完成服务的无缝升级，否则在所有父子进程完全退出前再启动程序会在该端口上绑定失败，也即不能完成无缝升级的操作(更多信息可以参考该函数说明或Steven先生的&lt;网络编程&gt;)。第24行用于创建一个事件处理的全局变量，可以理解为这是一个负责集中处理各种出入IO事件的总管家，它负责接收和派发所有输入输出IO事件的信息，这里调用的是函数event_base_new(), 很多程序里这里用的是event_init()，区别就是前者是线程安全的、而后者是非线程安全的，后者在其官方说明中已经被标志为过时的函数、且建议用前者代替，libevent中还有很多类似的函数，比如建议用event_base_dispatch代替event_dispatch，用event_assign代替event_set和event_base_set等，关于libevent接口的详细说明见其官方说明<a href=\"http://www.monkey.org/~provos/libevent/doxygen-2.0.1/\" target=\"_blank\" style=\"color: navy; text-decoration: none;\">libevent_doc</a>. 第25行说明在listen_en这个事件监听sock这个描述字的读操作，当读消息到达是调用on_accept函数，EV_PERSIST参数告诉系统持续的监听sock上的读事件，如果不加该参数，每次要监听该事件时就要重复的调用26行的event_add函数，从前面的代码可知，sock这个描述字是bind到本地的socket端口上，因此其对应的可读事件自然就是来自客户端的连接到达，我们就可以调用accept无阻塞的返回客户的连接了。第26行将listen_ev注册到base这个事件中，相当于告诉处理IO的管家请留意我的listen_ev上的事件。第27行相当于告诉处理IO的管家，当有我的事件到达时你发给我(调用on_accept函数)，至此对listen_ev的初始化完毕。第28行正式启动libevent的事件处理机制，使系统运行起来，运行程序的话会发现event_base_dispatch是一个无限循环。</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">下面是on_accept函数的内容</p><div id=\"codeSnippetWrapper\" style=\"color: rgb(0, 0, 0); border: 1px solid silver; padding: 4px; font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 1136.46875px; cursor: text; direction: ltr; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: rgb(244, 244, 244); max-height: 200px;\"><div id=\"codeSnippet\" style=\"padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt;\"><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\"><span id=\"lnum1\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   1:</span> <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">void</span> on_accept(<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">int</span> sock, <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">short</span> event, <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">void</span>* arg)</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum2\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   2:</span> {</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\"><span id=\"lnum3\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   3:</span>     <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> sockaddr_in cli_addr;</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum4\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   4:</span>     <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">int</span> newfd, sin_size;</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\"><span id=\"lnum5\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   5:</span>     <span style=\"line-height: 1.8; color: rgb(0, 128, 0);\">// read_ev must allocate from heap memory, otherwise the program would crash from segmant fault</span></pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum6\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   6:</span>     <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event* read_ev = (<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event*)malloc(<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">sizeof</span>(<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event));;</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\"><span id=\"lnum7\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   7:</span>     sin_size = <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">sizeof</span>(<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> sockaddr_in);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum8\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   8:</span>     newfd = accept(sock, (<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> sockaddr*)&amp;cli_addr, &amp;sin_size);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\"><span id=\"lnum9\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   9:</span>     event_set(read_ev, newfd, EV_READ|EV_PERSIST, on_read, read_ev);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum10\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  10:</span>     event_base_set(base, read_ev);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: white;\"><span id=\"lnum11\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  11:</span>     event_add(read_ev, NULL);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum12\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  12:</span> } </pre></div></div><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 第9-12与前面main函数的24-26相同，即在代表客户的描述字newfd上监听可读事件，当有数据到达是调用on_read函数。这里有亮点需要注意，一是read_ev需要从堆里malloc出来，如果是在栈上分配，那么当函数返回时变量占用的内存会被释放，因此事件主循环event_base_dispatch会访问无效的内存而导致进程崩溃(即crash)；第二个要注意的是第9行read_ev作为参数传递给了on_read函数。</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">下面是on_read函数的内容</p><div id=\"codeSnippetWrapper\" style=\"color: rgb(0, 0, 0); border: 1px solid silver; padding: 4px; font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 1136.46875px; cursor: text; direction: ltr; line-height: 12pt; font-family: 'Courier New', courier, monospace; background-color: rgb(244, 244, 244); max-height: 200px;\"><div id=\"codeSnippet\" style=\"padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt;\"><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum1\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   1:</span> <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">void</span> on_read(<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">int</span> sock, <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">short</span> event, <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">void</span>* arg)</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum2\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   2:</span> {</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum3\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   3:</span>     <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event* write_ev;</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum4\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   4:</span>     <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">int</span> size;</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum5\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   5:</span>     <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">char</span>* buffer = (<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">char</span>*)malloc(MEM_SIZE);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum6\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   6:</span>     bzero(buffer, MEM_SIZE);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum7\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   7:</span>     size = recv(sock, buffer, MEM_SIZE, 0);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum8\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   8:</span>     printf(<span style=\"line-height: 1.8; color: rgb(0, 96, 128);\">\"receive data:%s, size:%d\\n\"</span>, buffer, size);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum9\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">   9:</span>     <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">if</span> (size == 0) {</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum10\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  10:</span>         event_del((<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event*)arg);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum11\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  11:</span>         free((<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event*)arg);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum12\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  12:</span>         close(sock);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum13\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  13:</span>         <span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">return</span>;</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum14\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  14:</span>     }</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum15\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  15:</span>     write_ev = (<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event*) malloc(<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">sizeof</span>(<span style=\"line-height: 1.8; color: rgb(0, 0, 255);\">struct</span> event));;</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum16\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  16:</span>     event_set(write_ev, sock, EV_WRITE, on_write, buffer);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum17\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  17:</span>     event_base_set(base, write_ev);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum18\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  18:</span>     event_add(write_ev, NULL);</pre><pre style=\"margin: 0em; padding: 0px; font-size: 8pt; overflow: visible; width: 1136.46875px; direction: ltr; border-style: none; line-height: 12pt; font-family: 'Courier New', courier, monospace;\"><span id=\"lnum19\" style=\"line-height: 1.8; color: rgb(96, 96, 96);\">  19:</span> }</pre></div></div><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 第9行，当从socket读返回0标志对方已经关闭了连接，因此这个时候就没必要继续监听该套接口上的事件，由于EV_READ在on_accept函数里是用EV_PERSIST参数注册的，因此要显示的调用event_del函数取消对该事件的监听。第18-21行与on_accept函数的6-11行类似，当可写时调用on_write函数，注意第19行将buffer作为参数传递给了on_write。这段程序还有比较严重的问题，后面进行说明。</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">on_write函数的实现</p><div class=\"cnblogs_code\" style=\"color: rgb(0, 0, 0); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: 'Courier New' !important; font-size: 12px !important;\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: navy; border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border: none !important;\" width=\"20\" height=\"20\"></a></span></div><div><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">1</span>&nbsp;<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">&nbsp;on_write(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">short</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;arg)<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">2</span>&nbsp;<span style=\"line-height: 1.5 !important;\">{<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">3</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;buffer&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)arg;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">4</span>&nbsp;<span style=\"line-height: 1.5 !important;\">&nbsp;&nbsp;&nbsp; send(sock, buffer, strlen(buffer),&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);&nbsp;<br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">5</span>&nbsp;<span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 128, 128); line-height: 1.5 !important;\">6</span>&nbsp;&nbsp;&nbsp;&nbsp; free(buffer);&nbsp;</div><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: navy; border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border: none !important;\" width=\"20\" height=\"20\"></a></span></div></div><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\"><span class=\"Apple-style-span\" style=\"line-height: 19px; font-family: 'Courier New';\"><span style=\"line-height: 1.8; color: rgb(0, 128, 128);\">7</span></span><span class=\"Apple-style-span\" style=\"line-height: 19px; font-family: 'Courier New';\">&nbsp;</span><span class=\"Apple-style-span\" style=\"line-height: 19px; font-family: 'Courier New';\"><span style=\"line-height: 1.8;\">}</span></span>&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp;&nbsp; on_write函数中向客户端回写数据，然后释放on_read函数中malloc出来的buffer。在很多书合编程指导中都很强调资源的所有权，经常要求谁分配资源、就由谁释放资源，这样对资源的管理指责就更明确，不容易出问题，但是通过该例子我们发现在异步编程中资源的分配与释放往往是由不同的所有者操作的，因此也是比较容易出问题的地方。</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 其实在on_read函数中从socket读取数据后程序就可以直接调用write/send接口向客户回写数据了，因为写事件已经满足，不存在异步不异步的问题，这里进行on_write的异步操作仅仅是为了说明异步编程中资源的管理与释放的问题，另外一方面，直接调用write/send函数向客户端写数据可能导致程序较长时间阻塞在IO操作上，比如socket的输出缓冲区已满，则write/send操作阻塞到有可用的缓冲区之后才能进行实际的写操作，而通过向写事件注册on_accept函数，那么libevent会在合适的时间调用我们的callback函数，(比如对于会引起IO阻塞的情况比如socket输出缓冲区满，则由libevent设计算法来处理，如此当回调on_accept函数时我们在调用IO操作就不会发生真正的IO之外的阻塞)。注：前面括号中是我个人认为一个库应该实现的功能，至于libevent是不是实现这样的功能并不清楚也无意深究。</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 再来看看前面提到的on_read函数中存在的问题，首先write_ev是动态分配的内存，但是没有释放，因此存在内存泄漏，另外，on_read中进行malloc操作，那么当多次调用该函数的时候就会造成内存的多次泄漏。这里的解决方法是对socket的描述字可以封装一个结构体来保护读、写的事件以及数据缓冲区，整理后的完整代码如下</p><div class=\"cnblogs_code\" style=\"color: rgb(0, 0, 0); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: 'Courier New' !important; font-size: 12px !important;\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: navy; border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border: none !important;\" width=\"20\" height=\"20\"></a></span></div><div><span style=\"line-height: 1.5 !important;\">#include&nbsp;</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">sys</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"line-height: 1.5 !important;\">socket.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include&nbsp;</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">sys</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"line-height: 1.5 !important;\">types.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include&nbsp;</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">netinet</span><span style=\"line-height: 1.5 !important;\">/</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">in</span><span style=\"line-height: 1.5 !important;\">.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br>#include&nbsp;</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"line-height: 1.5 !important;\">stdio.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br><br>#include&nbsp;</span><span style=\"line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">.h</span><span style=\"line-height: 1.5 !important;\">&gt;</span><span style=\"line-height: 1.5 !important;\"><br><br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\">&nbsp;PORT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 25341</span><span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\">&nbsp;BACKLOG&nbsp;&nbsp;&nbsp;&nbsp; 5</span><span style=\"line-height: 1.5 !important;\"><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">#define</span><span style=\"line-height: 1.5 !important;\">&nbsp;MEM_SIZE&nbsp;&nbsp;&nbsp; 1024</span><span style=\"line-height: 1.5 !important;\"><br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;event_base</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">;<br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock_ev {<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;read_ev;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;write_ev;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;buffer;<br>};<br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">&nbsp;release_sock_event(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock_ev</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;ev)<br>{<br>&nbsp;&nbsp;&nbsp; event_del(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">read_ev);<br>&nbsp;&nbsp;&nbsp; free(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">read_ev);<br>&nbsp;&nbsp;&nbsp; free(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">write_ev);<br>&nbsp;&nbsp;&nbsp; free(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">buffer);<br>&nbsp;&nbsp;&nbsp; free(ev);<br>}<br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">&nbsp;on_write(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">short</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;arg)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;buffer&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)arg;<br>&nbsp;&nbsp;&nbsp; send(sock, buffer, strlen(buffer),&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br><br>&nbsp;&nbsp;&nbsp; free(buffer);<br>}<br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">&nbsp;on_read(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">short</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;arg)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;write_ev;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;size;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock_ev</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;ev&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock_ev</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)arg;<br>&nbsp;&nbsp;&nbsp; ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">buffer&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)malloc(MEM_SIZE);<br>&nbsp;&nbsp;&nbsp; bzero(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">buffer, MEM_SIZE);<br>&nbsp;&nbsp;&nbsp; size&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;recv(sock, ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">buffer, MEM_SIZE,&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>&nbsp;&nbsp;&nbsp; printf(</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">receive data:%s, size:%d\\n</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">\"</span><span style=\"line-height: 1.5 !important;\">, ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">buffer, size);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">if</span><span style=\"line-height: 1.5 !important;\">&nbsp;(size&nbsp;</span><span style=\"line-height: 1.5 !important;\">==</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; release_sock_event(ev);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; close(sock);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">return</span><span style=\"line-height: 1.5 !important;\">;<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; event_set(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">write_ev, sock, EV_WRITE, on_write, ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">buffer);<br>&nbsp;&nbsp;&nbsp; event_base_set(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">, ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">write_ev);<br>&nbsp;&nbsp;&nbsp; event_add(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">write_ev, NULL);<br>}<br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">&nbsp;on_accept(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">short</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">void</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;arg)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr_in cli_addr;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;newfd, sin_size;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock_ev</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;ev&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock_ev</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)malloc(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock_ev));<br>&nbsp;&nbsp;&nbsp; ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">read_ev&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)malloc(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">));<br>&nbsp;&nbsp;&nbsp; ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">write_ev&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)malloc(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">));<br>&nbsp;&nbsp;&nbsp; sin_size&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr_in);<br>&nbsp;&nbsp;&nbsp; newfd&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;accept(sock, (</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">cli_addr,&nbsp;</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">sin_size);<br>&nbsp;&nbsp;&nbsp; event_set(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">read_ev, newfd, EV_READ</span><span style=\"line-height: 1.5 !important;\">|</span><span style=\"line-height: 1.5 !important;\">EV_PERSIST, on_read, ev);<br>&nbsp;&nbsp;&nbsp; event_base_set(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">, ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">read_ev);<br>&nbsp;&nbsp;&nbsp; event_add(ev</span><span style=\"line-height: 1.5 !important;\">-&gt;</span><span style=\"line-height: 1.5 !important;\">read_ev, NULL);<br>}<br><br></span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;main(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;argc,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">char</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">&nbsp;argv[])<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr_in my_addr;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;sock;<br><br>&nbsp;&nbsp;&nbsp; sock&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;socket(AF_INET, SOCK_STREAM,&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">&nbsp;yes&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">1</span><span style=\"line-height: 1.5 !important;\">;<br>&nbsp;&nbsp;&nbsp; setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,&nbsp;</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">yes,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">int</span><span style=\"line-height: 1.5 !important;\">));<br>&nbsp;&nbsp;&nbsp; memset(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">my_addr,&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(my_addr));<br>&nbsp;&nbsp;&nbsp; my_addr.sin_family&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;AF_INET;<br>&nbsp;&nbsp;&nbsp; my_addr.sin_port&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;htons(PORT);<br>&nbsp;&nbsp;&nbsp; my_addr.sin_addr.s_addr&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;INADDR_ANY;<br>&nbsp;&nbsp;&nbsp; bind(sock, (</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr</span><span style=\"line-height: 1.5 !important;\">*</span><span style=\"line-height: 1.5 !important;\">)</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">my_addr,&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">sizeof</span><span style=\"line-height: 1.5 !important;\">(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;sockaddr));<br>&nbsp;&nbsp;&nbsp; listen(sock, BACKLOG);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">struct</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">event</span><span style=\"line-height: 1.5 !important;\">&nbsp;listen_ev;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"line-height: 1.5 !important;\">=</span><span style=\"line-height: 1.5 !important;\">&nbsp;event_base_new();<br>&nbsp;&nbsp;&nbsp; event_set(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">listen_ev, sock, EV_READ</span><span style=\"line-height: 1.5 !important;\">|</span><span style=\"line-height: 1.5 !important;\">EV_PERSIST, on_accept, NULL);<br>&nbsp;&nbsp;&nbsp; event_base_set(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">,&nbsp;</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">listen_ev);<br>&nbsp;&nbsp;&nbsp; event_add(</span><span style=\"line-height: 1.5 !important;\">&amp;</span><span style=\"line-height: 1.5 !important;\">listen_ev, NULL);<br>&nbsp;&nbsp;&nbsp; event_base_dispatch(</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">base</span><span style=\"line-height: 1.5 !important;\">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">return</span><span style=\"line-height: 1.5 !important;\">&nbsp;</span><span style=\"color: rgb(128, 0, 128); line-height: 1.5 !important;\">0</span><span style=\"line-height: 1.5 !important;\">;<br></span></div><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: navy; border: none !important;\"><img src=\"quiver-image-url/51E409B11AA51C150090697429A953ED.gif\" alt=\"复制代码\" style=\"border: none !important;\" width=\"20\" height=\"20\"></a></span></div></div><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\"><span class=\"Apple-style-span\" style=\"line-height: 19px; font-family: 'Courier New';\">}</span></p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;&nbsp;&nbsp; 程序编译的时候要加 -levent 连接选项，以连接libevent的共享库，但是执行的时候依然爆出如下错误：<span style=\"line-height: 1.8; color: red;\">error while loading shared libraries: libevent-1.4.so.2: cannot open shared object file: No such file or directory，</span>&nbsp;这个是程序找不到共享库的位置，通过执行echo $LD_LIBRARY_PATH可以看到系统库的环境变量里没有我们安装的路径，即由--prefix制定的路径，执行export LD_LIBRARY_PATH=/home/mydir/libevent/lib/:$LD_LIBRARY_PATH将该路径加入系统环境变量里，再执行程序就可以了。</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">&nbsp;</p><p style=\"color: rgb(0, 0, 0); margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif;\">测试结果</p>"
    }
  ]
}